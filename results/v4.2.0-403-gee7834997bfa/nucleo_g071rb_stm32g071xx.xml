<testsuites>
	<testsuite name="nucleo_g071rb/stm32g071xx" timestamp="2025-07-22T19:33:20.425923" time="7461.9000000000015" tests="2856" failures="1" errors="0" skipped="607">
		<properties>
			<property name="version" value="v4.2.0-403-gee7834997bfa" />
		</properties>
		<testcase classname="crypto.mbedtls" name="mbedtls_fn.mbedtls" time="8.30" />
		<testcase classname="crypto.mbedtls_psa.without_entropy_driver" name="test_fn.mbedtls_psa" time="3.54" />
		<testcase classname="crypto.tinycrypt.hmac_prng" name="hmac_prng_fn.hmac_prng" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="crypto.tinycrypt" name="tinycrypt.aes_variable_key_fixed_text" time="0.04" />
		<testcase classname="crypto.tinycrypt" name="tinycrypt.aes_fixed_key_variable_text" time="0.16" />
		<testcase classname="crypto.tinycrypt" name="tinycrypt.cbc_sp_800_38a_encrypt_decrypt" time="0.01" />
		<testcase classname="crypto.tinycrypt" name="tinycrypt.ccm_vector_8" time="0.01" />
		<testcase classname="crypto.tinycrypt" name="tinycrypt.ccm_vector_7" time="0.01" />
		<testcase classname="crypto.tinycrypt" name="tinycrypt.ccm_vector_6" time="0.01" />
		<testcase classname="crypto.tinycrypt" name="tinycrypt.ccm_vector_5" time="0.01" />
		<testcase classname="crypto.tinycrypt" name="tinycrypt.ccm_vector_4" time="0.01" />
		<testcase classname="crypto.tinycrypt" name="tinycrypt.ccm_vector_3" time="0.01" />
		<testcase classname="crypto.tinycrypt" name="tinycrypt.ccm_vector_2" time="0.01" />
		<testcase classname="crypto.tinycrypt" name="tinycrypt.ccm_vector_1" time="0.01" />
		<testcase classname="crypto.tinycrypt" name="tinycrypt.cmac_mode" time="0.03" />
		<testcase classname="crypto.tinycrypt" name="tinycrypt.ctr_prng_vector" time="0.12" />
		<testcase classname="crypto.tinycrypt" name="tinycrypt.ctr_prng_robustness" time="0.00" />
		<testcase classname="crypto.tinycrypt" name="tinycrypt.ctr_prng_uninstantiate" time="0.01" />
		<testcase classname="crypto.tinycrypt" name="tinycrypt.ctr_prng_reseed" time="0.01" />
		<testcase classname="crypto.tinycrypt" name="tinycrypt.ecc_dh" time="51.97" />
		<testcase classname="crypto.tinycrypt" name="tinycrypt.ecc_dsa" time="55.28" />
		<testcase classname="crypto.tinycrypt" name="tinycrypt.hmac_7" time="0.01" />
		<testcase classname="crypto.tinycrypt" name="tinycrypt.hmac_6" time="0.01" />
		<testcase classname="crypto.tinycrypt" name="tinycrypt.hmac_5" time="0.00" />
		<testcase classname="crypto.tinycrypt" name="tinycrypt.hmac_4" time="0.00" />
		<testcase classname="crypto.tinycrypt" name="tinycrypt.hmac_3" time="0.00" />
		<testcase classname="crypto.tinycrypt" name="tinycrypt.hmac_2" time="0.00" />
		<testcase classname="crypto.tinycrypt" name="tinycrypt.hmac_1" time="0.00" />
		<testcase classname="crypto.tinycrypt" name="tinycrypt.sha256_13_and_14" time="0.00" />
		<testcase classname="crypto.tinycrypt" name="tinycrypt.sha256_12" time="2.77" />
		<testcase classname="crypto.tinycrypt" name="tinycrypt.sha256_11" time="0.01" />
		<testcase classname="crypto.tinycrypt" name="tinycrypt.sha256_10" time="0.01" />
		<testcase classname="crypto.tinycrypt" name="tinycrypt.sha256_9" time="0.01" />
		<testcase classname="crypto.tinycrypt" name="tinycrypt.sha256_8" time="0.00" />
		<testcase classname="crypto.tinycrypt" name="tinycrypt.sha256_7" time="0.00" />
		<testcase classname="crypto.tinycrypt" name="tinycrypt.sha256_6" time="0.00" />
		<testcase classname="crypto.tinycrypt" name="tinycrypt.sha256_5" time="0.00" />
		<testcase classname="crypto.tinycrypt" name="tinycrypt.sha256_4" time="0.00" />
		<testcase classname="crypto.tinycrypt" name="tinycrypt.sha256_3" time="0.00" />
		<testcase classname="crypto.tinycrypt" name="tinycrypt.sha256_2" time="0.00" />
		<testcase classname="crypto.tinycrypt" name="tinycrypt.sha256_1" time="0.00" />
		<testcase classname="testing.ztest.expect" name="expect.expect_str_equal_fail" time="0.01" />
		<testcase classname="testing.ztest.expect" name="expect.expect_str_equal" time="0.00" />
		<testcase classname="testing.ztest.expect" name="expect.fail_expect_between_inclusive" time="0.07" />
		<testcase classname="testing.ztest.expect" name="expect.expect_between_inclusive" time="0.00" />
		<testcase classname="testing.ztest.expect" name="expect.fail_expect_within" time="0.01" />
		<testcase classname="testing.ztest.expect" name="expect.expect_within" time="0.00" />
		<testcase classname="testing.ztest.expect" name="expect.fail_expect_equal_ptr" time="0.01" />
		<testcase classname="testing.ztest.expect" name="expect.expect_equal_ptr" time="0.00" />
		<testcase classname="testing.ztest.expect" name="expect.fail_expect_not_equal" time="0.01" />
		<testcase classname="testing.ztest.expect" name="expect.expect_not_equal" time="0.00" />
		<testcase classname="testing.ztest.expect" name="expect.fail_expect_equal" time="0.01" />
		<testcase classname="testing.ztest.expect" name="expect.expect_equal" time="0.00" />
		<testcase classname="testing.ztest.expect" name="expect.fail_expect_not_null" time="0.01" />
		<testcase classname="testing.ztest.expect" name="expect.expect_not_null" time="0.00" />
		<testcase classname="testing.ztest.expect" name="expect.fail_expect_is_null" time="0.01" />
		<testcase classname="testing.ztest.expect" name="expect.expect_is_null" time="0.00" />
		<testcase classname="testing.ztest.expect" name="expect.fail_expect_not_ok" time="0.01" />
		<testcase classname="testing.ztest.expect" name="expect.expect_not_ok" time="0.00" />
		<testcase classname="testing.ztest.expect" name="expect.fail_expect_ok" time="0.01" />
		<testcase classname="testing.ztest.expect" name="expect.expect_ok" time="0.00" />
		<testcase classname="testing.ztest.expect" name="expect.fail_expect_false" time="0.01" />
		<testcase classname="testing.ztest.expect" name="expect.expect_false" time="0.00" />
		<testcase classname="testing.ztest.expect" name="expect.fail_expect_true" time="0.01" />
		<testcase classname="testing.ztest.expect" name="expect.pass_expect_true" time="0.00" />
		<testcase classname="testing.ztest.expect" name="expect.fail_later" time="0.03" />
		<testcase classname="testing.ztest.expect_cpp" name="expect.expect_str_equal_fail" time="0.01" />
		<testcase classname="testing.ztest.expect_cpp" name="expect.expect_str_equal" time="0.00" />
		<testcase classname="testing.ztest.expect_cpp" name="expect.fail_expect_between_inclusive" time="0.07" />
		<testcase classname="testing.ztest.expect_cpp" name="expect.expect_between_inclusive" time="0.00" />
		<testcase classname="testing.ztest.expect_cpp" name="expect.fail_expect_within" time="0.01" />
		<testcase classname="testing.ztest.expect_cpp" name="expect.expect_within" time="0.00" />
		<testcase classname="testing.ztest.expect_cpp" name="expect.fail_expect_equal_ptr" time="0.01" />
		<testcase classname="testing.ztest.expect_cpp" name="expect.expect_equal_ptr" time="0.00" />
		<testcase classname="testing.ztest.expect_cpp" name="expect.fail_expect_not_equal" time="0.01" />
		<testcase classname="testing.ztest.expect_cpp" name="expect.expect_not_equal" time="0.00" />
		<testcase classname="testing.ztest.expect_cpp" name="expect.fail_expect_equal" time="0.01" />
		<testcase classname="testing.ztest.expect_cpp" name="expect.expect_equal" time="0.00" />
		<testcase classname="testing.ztest.expect_cpp" name="expect.fail_expect_not_null" time="0.01" />
		<testcase classname="testing.ztest.expect_cpp" name="expect.expect_not_null" time="0.00" />
		<testcase classname="testing.ztest.expect_cpp" name="expect.fail_expect_is_null" time="0.01" />
		<testcase classname="testing.ztest.expect_cpp" name="expect.expect_is_null" time="0.00" />
		<testcase classname="testing.ztest.expect_cpp" name="expect.fail_expect_not_ok" time="0.01" />
		<testcase classname="testing.ztest.expect_cpp" name="expect.expect_not_ok" time="0.00" />
		<testcase classname="testing.ztest.expect_cpp" name="expect.fail_expect_ok" time="0.01" />
		<testcase classname="testing.ztest.expect_cpp" name="expect.expect_ok" time="0.00" />
		<testcase classname="testing.ztest.expect_cpp" name="expect.fail_expect_false" time="0.01" />
		<testcase classname="testing.ztest.expect_cpp" name="expect.expect_false" time="0.00" />
		<testcase classname="testing.ztest.expect_cpp" name="expect.fail_expect_true" time="0.01" />
		<testcase classname="testing.ztest.expect_cpp" name="expect.pass_expect_true" time="0.00" />
		<testcase classname="testing.ztest.expect_cpp" name="expect.fail_later" time="0.03" />
		<testcase classname="testing.ztest.base.verbose_0" name="fail_in_setup.should_never_run" time="0.00" />
		<testcase classname="testing.ztest.base.verbose_0" name="rules_tests.rules_before_after" time="0.00" />
		<testcase classname="testing.ztest.base.verbose_0" name="fixture_tests.fixture_pointer" time="0.00" />
		<testcase classname="testing.ztest.base.verbose_0" name="framework_tests.skip_no_config" time="0.00" />
		<testcase classname="testing.ztest.base.verbose_0" name="framework_tests.skip_config" time="0.00" />
		<testcase classname="testing.ztest.base.verbose_0" name="framework_tests.assert_str_equal_fail" time="0.01" />
		<testcase classname="testing.ztest.base.verbose_0" name="framework_tests.assert_str_equal" time="0.00" />
		<testcase classname="testing.ztest.base.verbose_0" name="framework_tests.assert_mem_equal" time="0.00" />
		<testcase classname="testing.ztest.base.verbose_0" name="framework_tests.assert_tests" time="0.00" />
		<testcase classname="testing.ztest.base.verbose_0" name="framework_tests.empty_test" time="0.00" />
		<testcase classname="testing.ztest.base.verbose_0_userspace" name="fail_in_setup.should_never_run" time="0.00" />
		<testcase classname="testing.ztest.base.verbose_0_userspace" name="rules_tests.rules_before_after" time="0.00" />
		<testcase classname="testing.ztest.base.verbose_0_userspace" name="fixture_tests.fixture_pointer" time="0.00" />
		<testcase classname="testing.ztest.base.verbose_0_userspace" name="framework_tests.skip_no_config" time="0.00" />
		<testcase classname="testing.ztest.base.verbose_0_userspace" name="framework_tests.skip_config" time="0.00" />
		<testcase classname="testing.ztest.base.verbose_0_userspace" name="framework_tests.assert_str_equal_fail" time="0.01" />
		<testcase classname="testing.ztest.base.verbose_0_userspace" name="framework_tests.assert_str_equal" time="0.00" />
		<testcase classname="testing.ztest.base.verbose_0_userspace" name="framework_tests.assert_mem_equal" time="0.00" />
		<testcase classname="testing.ztest.base.verbose_0_userspace" name="framework_tests.assert_tests" time="0.00" />
		<testcase classname="testing.ztest.base.verbose_0_userspace" name="framework_tests.empty_test" time="0.00" />
		<testcase classname="testing.ztest.base.verbose_0_userspace" name="framework_tests.userspace_is_user" time="0.00" />
		<testcase classname="testing.ztest.base.verbose_1" name="fail_in_setup.should_never_run" time="0.00" />
		<testcase classname="testing.ztest.base.verbose_1" name="rules_tests.rules_before_after" time="0.00" />
		<testcase classname="testing.ztest.base.verbose_1" name="fixture_tests.fixture_pointer" time="0.00" />
		<testcase classname="testing.ztest.base.verbose_1" name="framework_tests.skip_no_config" time="0.00" />
		<testcase classname="testing.ztest.base.verbose_1" name="framework_tests.skip_config" time="0.00" />
		<testcase classname="testing.ztest.base.verbose_1" name="framework_tests.assert_str_equal_fail" time="0.01" />
		<testcase classname="testing.ztest.base.verbose_1" name="framework_tests.assert_str_equal" time="0.00" />
		<testcase classname="testing.ztest.base.verbose_1" name="framework_tests.assert_mem_equal" time="0.00" />
		<testcase classname="testing.ztest.base.verbose_1" name="framework_tests.assert_tests" time="0.00" />
		<testcase classname="testing.ztest.base.verbose_1" name="framework_tests.empty_test" time="0.00" />
		<testcase classname="testing.ztest.base.verbose_2" name="fail_in_setup.should_never_run" time="0.00" />
		<testcase classname="testing.ztest.base.verbose_2" name="rules_tests.rules_before_after" time="0.04" />
		<testcase classname="testing.ztest.base.verbose_2" name="fixture_tests.fixture_pointer" time="0.01" />
		<testcase classname="testing.ztest.base.verbose_2" name="framework_tests.skip_no_config" time="0.00" />
		<testcase classname="testing.ztest.base.verbose_2" name="framework_tests.skip_config" time="0.00" />
		<testcase classname="testing.ztest.base.verbose_2" name="framework_tests.assert_str_equal_fail" time="0.01" />
		<testcase classname="testing.ztest.base.verbose_2" name="framework_tests.assert_str_equal" time="0.01" />
		<testcase classname="testing.ztest.base.verbose_2" name="framework_tests.assert_mem_equal" time="0.01" />
		<testcase classname="testing.ztest.base.verbose_2" name="framework_tests.assert_tests" time="0.07" />
		<testcase classname="testing.ztest.base.verbose_2" name="framework_tests.empty_test" time="0.00" />
		<testcase classname="testing.ztest.error_hook" name="fail_assume_in_test.to_skip" time="0.01" />
		<testcase classname="testing.ztest.error_hook" name="fail_assume_in_before.to_skip1" time="0.01" />
		<testcase classname="testing.ztest.error_hook" name="fail_assume_in_before.to_skip0" time="0.01" />
		<testcase classname="testing.ztest.error_hook" name="fail_assume_in_setup.to_skip1" time="0.00" />
		<testcase classname="testing.ztest.error_hook" name="fail_assume_in_setup.to_skip0" time="0.00" />
		<testcase classname="testing.ztest.error_hook" name="error_hook_tests.catch_z_oops" time="0.03" />
		<testcase classname="testing.ztest.error_hook" name="error_hook_tests.catch_assert_in_isr" time="0.02" />
		<testcase classname="testing.ztest.error_hook" name="error_hook_tests.catch_assert_fail" time="0.02" />
		<testcase classname="testing.ztest.error_hook" name="error_hook_tests.catch_fatal_error" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="testing.ztest.error_hook.no_userspace" name="fail_assume_in_test.to_skip" time="0.01" />
		<testcase classname="testing.ztest.error_hook.no_userspace" name="fail_assume_in_before.to_skip1" time="0.01" />
		<testcase classname="testing.ztest.error_hook.no_userspace" name="fail_assume_in_before.to_skip0" time="0.01" />
		<testcase classname="testing.ztest.error_hook.no_userspace" name="fail_assume_in_setup.to_skip1" time="0.00" />
		<testcase classname="testing.ztest.error_hook.no_userspace" name="fail_assume_in_setup.to_skip0" time="0.00" />
		<testcase classname="testing.ztest.error_hook.no_userspace" name="error_hook_tests.catch_assert_in_isr" time="0.02" />
		<testcase classname="testing.ztest.error_hook.no_userspace" name="error_hook_tests.catch_assert_fail" time="0.02" />
		<testcase classname="testing.ztest.error_hook.no_userspace" name="error_hook_tests.catch_fatal_error" time="0.07" />
		<testcase classname="testing.ztest.summary.shared_unit_test" name="suite2.foo" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="testing.ztest.summary.shared_unit_test" name="suite1.foo" time="0.00" />
		<testcase classname="application_development.vector_table_relocation.arm" name="vector_table_relocation.vector_table_in_ram" time="4.92" />
		<testcase classname="buildsystem.include_file" name="gen_inc_file.gen_gz_inc_partial_file" time="0.00" />
		<testcase classname="buildsystem.include_file" name="gen_inc_file.gen_gz_inc_file_mtime_arg" time="0.00" />
		<testcase classname="buildsystem.include_file" name="gen_inc_file.gen_gz_inc_file_no_mtime" time="0.00" />
		<testcase classname="buildsystem.include_file" name="gen_inc_file.gen_partial_inc_file" time="0.00" />
		<testcase classname="buildsystem.include_file" name="gen_inc_file.gen_inc_file" time="0.00" />
		<testcase classname="kernel.timer.monotonic" name="timer_fn.timer" time="9.68" />
		<testcase classname="kernel.timer.timepoints" name="timepoints.comparison" time="0.00" />
		<testcase classname="kernel.timer.timepoints" name="timepoints.timepoint_api" time="1.10" />
		<testcase classname="kernel.timer.timer" name="timer_jitter_drift.jitter_drift_timer_startdelay" time="3.29" />
		<testcase classname="kernel.timer.timer" name="timer_jitter_drift.jitter_drift_timer_period" time="3.29" />
		<testcase classname="kernel.timer.timer" name="timer_tick_train.one_tick_timer_train" time="10.37" />
		<testcase classname="kernel.timer.starve" name="starve_fn.starve" time="3591.33" />
		<testcase classname="kernel.timer.cycle64" name="cycle64_tests.32bit_wrap_around" time="140.37" />
		<testcase classname="kernel.timer.error_case" name="timer_api_error.timer_add_timeout" time="0.00" />
		<testcase classname="kernel.timer.error_case" name="timer_api_error.timer_user_data_set_null" time="0.05" />
		<testcase classname="kernel.timer.error_case" name="timer_api_error.timer_user_data_get_null" time="0.05" />
		<testcase classname="kernel.timer.error_case" name="timer_api_error.timer_expires_ticks_null" time="0.05" />
		<testcase classname="kernel.timer.error_case" name="timer_api_error.timer_remaining_ticks_null" time="0.05" />
		<testcase classname="kernel.timer.error_case" name="timer_api_error.timer_status_sync_null" time="0.05" />
		<testcase classname="kernel.timer.error_case" name="timer_api_error.timer_status_get_null" time="0.05" />
		<testcase classname="kernel.timer.error_case" name="timer_api_error.timer_stop_null" time="0.04" />
		<testcase classname="kernel.timer.error_case" name="timer_api_error.timer_start_null" time="0.04" />
		<testcase classname="kernel.timer" name="timer_api.sleep_abs" time="0.01" />
		<testcase classname="kernel.timer" name="timer_api.timeout_abs" time="0.00" />
		<testcase classname="kernel.timer" name="timer_api.timer_remaining" time="0.05" />
		<testcase classname="kernel.timer" name="timer_api.timer_user_data" time="0.30" />
		<testcase classname="kernel.timer" name="timer_api.timer_k_define" time="0.70" />
		<testcase classname="kernel.timer" name="timer_api.timer_status_sync" time="0.35" />
		<testcase classname="kernel.timer" name="timer_api.timer_status_get_anytime" time="0.33" />
		<testcase classname="kernel.timer" name="timer_api.timer_status_get" time="0.00" />
		<testcase classname="kernel.timer" name="timer_api.timer_periodicity" time="0.25" />
		<testcase classname="kernel.timer" name="timer_api.timer_expirefn_null" time="0.33" />
		<testcase classname="kernel.timer" name="timer_api.timer_period_k_forever" time="0.20" />
		<testcase classname="kernel.timer" name="timer_api.timer_period_0" time="0.20" />
		<testcase classname="kernel.timer" name="timer_api.timer_restart" time="0.28" />
		<testcase classname="kernel.timer" name="timer_api.timer_duration_period" time="0.33" />
		<testcase classname="kernel.timer" name="timer_api.time_conversions" time="0.19" />
		<testcase classname="kernel.fifo.usage" name="fifo_usage.isr_fifo_play" time="0.00" />
		<testcase classname="kernel.fifo.usage" name="fifo_usage.dual_fifo_play" time="0.00" />
		<testcase classname="kernel.fifo.usage" name="fifo_usage.single_fifo_play" time="0.00" />
		<testcase classname="kernel.fifo.timeout" name="fifo_timeout_1cpu.timeout_threads_pend_fail_on_fifo" time="0.03" />
		<testcase classname="kernel.fifo.timeout" name="fifo_timeout_1cpu.timeout_threads_pend_on_dual_fifos" time="0.08" />
		<testcase classname="kernel.fifo.timeout" name="fifo_timeout_1cpu.timeout_threads_pend_on_fifo" time="0.04" />
		<testcase classname="kernel.fifo.timeout" name="fifo_timeout_1cpu.timeout_fifo_thread" time="0.01" />
		<testcase classname="kernel.fifo.timeout" name="fifo_timeout.timeout_non_empty_fifo" time="0.00" />
		<testcase classname="kernel.fifo.timeout" name="fifo_timeout_1cpu.timeout_empty_fifo" time="0.01" />
		<testcase classname="kernel.fifo" name="fifo_api_1cpu.fifo_cancel_wait" time="0.10" />
		<testcase classname="kernel.fifo" name="fifo_api.fifo_is_empty_isr" time="0.00" />
		<testcase classname="kernel.fifo" name="fifo_api.fifo_is_empty_thread" time="0.00" />
		<testcase classname="kernel.fifo" name="fifo_api.fifo_isr2thread" time="0.00" />
		<testcase classname="kernel.fifo" name="fifo_api.fifo_thread2isr" time="0.00" />
		<testcase classname="kernel.fifo" name="fifo_api_1cpu.fifo_thread2thread" time="0.00" />
		<testcase classname="kernel.fifo" name="fifo_api.fifo_get_fail" time="0.10" />
		<testcase classname="kernel.fifo" name="fifo_api_1cpu.fifo_loop" time="0.38" />
		<testcase classname="arch.common.xip" name="xip.globals" time="4.68" />
		<testcase classname="arch.common.xip.minimallibc" name="xip.globals" time="5.08" />
		<testcase classname="kernel.tickless.concept" name="tickless_concept.tickless_slice" time="0.61" />
		<testcase classname="kernel.tickless.concept" name="tickless_concept.tickless_sysclock" time="0.43" />
		<testcase classname="kernel.poll" name="poll_api_1cpu.poll_zero_events" time="0.05" />
		<testcase classname="kernel.poll" name="poll_api_1cpu.poll_msgq" time="0.00" />
		<testcase classname="kernel.poll" name="poll_api_1cpu.poll_threadstate" time="0.25" />
		<testcase classname="kernel.poll" name="poll_api.poll_multi" time="0.50" />
		<testcase classname="kernel.poll" name="poll_api_1cpu.poll_cancel_main_high_prio" time="0.10" />
		<testcase classname="kernel.poll" name="poll_api_1cpu.poll_cancel_main_low_prio" time="0.10" />
		<testcase classname="kernel.poll" name="poll_api_1cpu.poll_wait" time="1.75" />
		<testcase classname="kernel.poll" name="poll_api_1cpu.poll_no_wait" time="0.01" />
		<testcase classname="kernel.poll" name="poll_api.poll_signal_reset_null" time="0.05" />
		<testcase classname="kernel.poll" name="poll_api.poll_signal_raise_null" time="0.05" />
		<testcase classname="kernel.poll" name="poll_api.poll_signal_check_result" time="0.04" />
		<testcase classname="kernel.poll" name="poll_api.poll_signal_check_signal" time="0.04" />
		<testcase classname="kernel.poll" name="poll_api.poll_signal_check_obj" time="0.05" />
		<testcase classname="kernel.poll" name="poll_api.poll_signal_init_null" time="0.05" />
		<testcase classname="kernel.poll" name="poll_api.k_poll_user_type_msgq_err" time="0.05" />
		<testcase classname="kernel.poll" name="poll_api.k_poll_user_type_fifo_err" time="0.05" />
		<testcase classname="kernel.poll" name="poll_api.k_poll_user_type_signal_err" time="0.05" />
		<testcase classname="kernel.poll" name="poll_api.k_poll_user_type_sem_err" time="0.05" />
		<testcase classname="kernel.poll" name="poll_api.k_poll_user_mem_err" time="0.04" />
		<testcase classname="kernel.poll" name="poll_api.k_poll_user_num_err" time="0.01" />
		<testcase classname="kernel.poll.minimallibc" name="poll_api_1cpu.poll_zero_events" time="0.05" />
		<testcase classname="kernel.poll.minimallibc" name="poll_api_1cpu.poll_msgq" time="0.00" />
		<testcase classname="kernel.poll.minimallibc" name="poll_api_1cpu.poll_threadstate" time="0.25" />
		<testcase classname="kernel.poll.minimallibc" name="poll_api.poll_multi" time="0.50" />
		<testcase classname="kernel.poll.minimallibc" name="poll_api_1cpu.poll_cancel_main_high_prio" time="0.10" />
		<testcase classname="kernel.poll.minimallibc" name="poll_api_1cpu.poll_cancel_main_low_prio" time="0.10" />
		<testcase classname="kernel.poll.minimallibc" name="poll_api_1cpu.poll_wait" time="1.75" />
		<testcase classname="kernel.poll.minimallibc" name="poll_api_1cpu.poll_no_wait" time="0.01" />
		<testcase classname="kernel.poll.minimallibc" name="poll_api.poll_signal_reset_null" time="0.05" />
		<testcase classname="kernel.poll.minimallibc" name="poll_api.poll_signal_raise_null" time="0.05" />
		<testcase classname="kernel.poll.minimallibc" name="poll_api.poll_signal_check_result" time="0.04" />
		<testcase classname="kernel.poll.minimallibc" name="poll_api.poll_signal_check_signal" time="0.04" />
		<testcase classname="kernel.poll.minimallibc" name="poll_api.poll_signal_check_obj" time="0.05" />
		<testcase classname="kernel.poll.minimallibc" name="poll_api.poll_signal_init_null" time="0.05" />
		<testcase classname="kernel.poll.minimallibc" name="poll_api.k_poll_user_type_msgq_err" time="0.05" />
		<testcase classname="kernel.poll.minimallibc" name="poll_api.k_poll_user_type_fifo_err" time="0.05" />
		<testcase classname="kernel.poll.minimallibc" name="poll_api.k_poll_user_type_signal_err" time="0.05" />
		<testcase classname="kernel.poll.minimallibc" name="poll_api.k_poll_user_type_sem_err" time="0.05" />
		<testcase classname="kernel.poll.minimallibc" name="poll_api.k_poll_user_mem_err" time="0.04" />
		<testcase classname="kernel.poll.minimallibc" name="poll_api.k_poll_user_num_err" time="0.01" />
		<testcase classname="kernel.queue" name="queue_api.queue_unique_append" time="0.00" />
		<testcase classname="kernel.queue" name="queue_api_1cpu.queue_multithread_competition" time="0.06" />
		<testcase classname="kernel.queue" name="queue_api.access_kernel_obj_with_priv_data" time="0.05" />
		<testcase classname="kernel.queue" name="queue_api.multiple_queues" time="0.00" />
		<testcase classname="kernel.queue" name="queue_api_1cpu.queue_poll_race" time="0.02" />
		<testcase classname="kernel.queue" name="queue_api.queue_alloc" time="0.00" />
		<testcase classname="kernel.queue" name="queue_api_1cpu.queue_get_2threads" time="0.01" />
		<testcase classname="kernel.queue" name="queue_api.queue_isr2thread" time="0.00" />
		<testcase classname="kernel.queue" name="queue_api.queue_thread2isr" time="0.00" />
		<testcase classname="kernel.queue" name="queue_api_1cpu.queue_thread2thread" time="0.00" />
		<testcase classname="kernel.queue" name="queue_api.queue_cancel_wait_error" time="0.05" />
		<testcase classname="kernel.queue" name="queue_api.queue_peek_tail_null" time="0.05" />
		<testcase classname="kernel.queue" name="queue_api.queue_peek_head_null" time="0.05" />
		<testcase classname="kernel.queue" name="queue_api.queue_is_empty_null" time="0.05" />
		<testcase classname="kernel.queue" name="queue_api.queue_get_null" time="0.05" />
		<testcase classname="kernel.queue" name="queue_api.queue_alloc_prepend_null" time="0.05" />
		<testcase classname="kernel.queue" name="queue_api.queue_alloc_append_null" time="0.05" />
		<testcase classname="kernel.queue" name="queue_api.queue_init_null" time="0.05" />
		<testcase classname="kernel.queue" name="queue_api.queue_merge_list_error" time="0.00" />
		<testcase classname="kernel.queue" name="queue_api.queue_append_list_error" time="0.00" />
		<testcase classname="kernel.queue" name="queue_api_1cpu.queue_get_fail" time="0.10" />
		<testcase classname="kernel.queue" name="queue_api_1cpu.queue_loop" time="0.11" />
		<testcase classname="kernel.queue" name="queue_api.auto_free" time="0.00" />
		<testcase classname="kernel.queue" name="queue_api.queue_alloc_append_user" time="0.00" />
		<testcase classname="kernel.queue" name="queue_api.queue_alloc_prepend_user" time="0.00" />
		<testcase classname="kernel.queue" name="queue_api_1cpu.queue_supv_to_user" time="0.00" />
		<testcase classname="kernel.queue.minimallibc" name="queue_api.queue_unique_append" time="0.00" />
		<testcase classname="kernel.queue.minimallibc" name="queue_api_1cpu.queue_multithread_competition" time="0.06" />
		<testcase classname="kernel.queue.minimallibc" name="queue_api.access_kernel_obj_with_priv_data" time="0.05" />
		<testcase classname="kernel.queue.minimallibc" name="queue_api.multiple_queues" time="0.00" />
		<testcase classname="kernel.queue.minimallibc" name="queue_api_1cpu.queue_poll_race" time="0.02" />
		<testcase classname="kernel.queue.minimallibc" name="queue_api.queue_alloc" time="0.00" />
		<testcase classname="kernel.queue.minimallibc" name="queue_api_1cpu.queue_get_2threads" time="0.01" />
		<testcase classname="kernel.queue.minimallibc" name="queue_api.queue_isr2thread" time="0.00" />
		<testcase classname="kernel.queue.minimallibc" name="queue_api.queue_thread2isr" time="0.00" />
		<testcase classname="kernel.queue.minimallibc" name="queue_api_1cpu.queue_thread2thread" time="0.00" />
		<testcase classname="kernel.queue.minimallibc" name="queue_api.queue_cancel_wait_error" time="0.05" />
		<testcase classname="kernel.queue.minimallibc" name="queue_api.queue_peek_tail_null" time="0.05" />
		<testcase classname="kernel.queue.minimallibc" name="queue_api.queue_peek_head_null" time="0.05" />
		<testcase classname="kernel.queue.minimallibc" name="queue_api.queue_is_empty_null" time="0.05" />
		<testcase classname="kernel.queue.minimallibc" name="queue_api.queue_get_null" time="0.05" />
		<testcase classname="kernel.queue.minimallibc" name="queue_api.queue_alloc_prepend_null" time="0.05" />
		<testcase classname="kernel.queue.minimallibc" name="queue_api.queue_alloc_append_null" time="0.05" />
		<testcase classname="kernel.queue.minimallibc" name="queue_api.queue_init_null" time="0.05" />
		<testcase classname="kernel.queue.minimallibc" name="queue_api.queue_merge_list_error" time="0.00" />
		<testcase classname="kernel.queue.minimallibc" name="queue_api.queue_append_list_error" time="0.00" />
		<testcase classname="kernel.queue.minimallibc" name="queue_api_1cpu.queue_get_fail" time="0.10" />
		<testcase classname="kernel.queue.minimallibc" name="queue_api_1cpu.queue_loop" time="0.11" />
		<testcase classname="kernel.queue.minimallibc" name="queue_api.auto_free" time="0.00" />
		<testcase classname="kernel.queue.minimallibc" name="queue_api.queue_alloc_append_user" time="0.00" />
		<testcase classname="kernel.queue.minimallibc" name="queue_api.queue_alloc_prepend_user" time="0.00" />
		<testcase classname="kernel.queue.minimallibc" name="queue_api_1cpu.queue_supv_to_user" time="0.00" />
		<testcase classname="kernel.common.timing" name="sleep.sleep_forever" time="0.00" />
		<testcase classname="kernel.common.timing" name="sleep.sleep" time="2.01" />
		<testcase classname="kernel.common.timing" name="sleep.usleep" time="1.00" />
		<testcase classname="kernel.common.timing.minimallibc" name="sleep.sleep_forever" time="0.00" />
		<testcase classname="kernel.common.timing.minimallibc" name="sleep.sleep" time="2.01" />
		<testcase classname="kernel.common.timing.minimallibc" name="sleep.usleep" time="1.00" />
		<testcase classname="kernel.scheduler.wraparound" name="wraparound.tick_wraparound_in_sleep" time="5.32" />
		<testcase classname="kernel.scheduler.deadline" name="suite_deadline.thread_reschedule" time="0.00" />
		<testcase classname="kernel.scheduler.deadline" name="suite_deadline.unqueued" time="0.15" />
		<testcase classname="kernel.scheduler.deadline" name="suite_deadline.yield" time="0.10" />
		<testcase classname="kernel.scheduler.deadline" name="suite_deadline.deadline" time="0.10" />
		<testcase classname="kernel.scheduler.deadline.scalable" name="suite_deadline.thread_reschedule" time="0.00" />
		<testcase classname="kernel.scheduler.deadline.scalable" name="suite_deadline.unqueued" time="0.15" />
		<testcase classname="kernel.scheduler.deadline.scalable" name="suite_deadline.yield" time="0.10" />
		<testcase classname="kernel.scheduler.deadline.scalable" name="suite_deadline.deadline" time="0.10" />
		<testcase classname="kernel.scheduler.preempt" name="suite_preempt.preempt" time="4.85" />
		<testcase classname="kernel.scheduler.metairq" name="suite_preempt_metairq.preempt_metairq" time="5.69" />
		<testcase classname="kernel.scheduler" name="threads_scheduling.sleep_wakeup_preemptible" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler" name="threads_scheduling.user_k_wakeup" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler" name="threads_scheduling_1cpu.priority_preemptible_wait_prio" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler" name="threads_scheduling.sleep_cooperative" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler" name="threads_scheduling.k_thread_priority_set_overmax" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler" name="threads_scheduling.bad_priorities" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler" name="threads_scheduling.time_slicing_preemptible" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler" name="threads_scheduling.slice_scheduling" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler" name="threads_scheduling.unlock_preemptible" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler" name="threads_scheduling.user_k_is_preempt" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler" name="threads_scheduling.k_thread_priority_get_init_null" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler" name="threads_scheduling.time_slicing_disable_preemptible" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler" name="threads_scheduling.k_thread_priority_set_init_null" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler" name="threads_scheduling.slice_reset" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler" name="threads_scheduling.pending_thread_wakeup" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler" name="threads_scheduling.k_thread_suspend_init_null" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler" name="threads_scheduling.k_wakeup_init_null" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler" name="threads_scheduling.slice_perthread" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler" name="threads_scheduling.priority_cooperative" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler" name="threads_scheduling.wakeup_expired_timer_thread" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler" name="threads_scheduling.yield_cooperative" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler" name="threads_scheduling.k_thread_resume_init_null" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler" name="threads_scheduling.sched_is_preempt_thread" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler" name="threads_scheduling.lock_preemptible" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler" name="threads_scheduling.unlock_nested_sched_lock" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler" name="threads_scheduling.priority_preemptible" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler" name="threads_scheduling.priority_scheduling" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler" name="threads_scheduling.k_thread_priority_set_upgrade" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler" name="threads_scheduling.busy_wait_cooperative" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.no_timeslicing" name="threads_scheduling.sleep_wakeup_preemptible" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.no_timeslicing" name="threads_scheduling.user_k_wakeup" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.no_timeslicing" name="threads_scheduling_1cpu.priority_preemptible_wait_prio" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.no_timeslicing" name="threads_scheduling.sleep_cooperative" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.no_timeslicing" name="threads_scheduling.k_thread_priority_set_overmax" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.no_timeslicing" name="threads_scheduling.bad_priorities" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.no_timeslicing" name="threads_scheduling.time_slicing_preemptible" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.no_timeslicing" name="threads_scheduling.slice_scheduling" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.no_timeslicing" name="threads_scheduling.unlock_preemptible" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.no_timeslicing" name="threads_scheduling.user_k_is_preempt" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.no_timeslicing" name="threads_scheduling.k_thread_priority_get_init_null" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.no_timeslicing" name="threads_scheduling.time_slicing_disable_preemptible" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.no_timeslicing" name="threads_scheduling.k_thread_priority_set_init_null" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.no_timeslicing" name="threads_scheduling.slice_reset" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.no_timeslicing" name="threads_scheduling.pending_thread_wakeup" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.no_timeslicing" name="threads_scheduling.k_thread_suspend_init_null" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.no_timeslicing" name="threads_scheduling.k_wakeup_init_null" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.no_timeslicing" name="threads_scheduling.slice_perthread" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.no_timeslicing" name="threads_scheduling.priority_cooperative" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.no_timeslicing" name="threads_scheduling.wakeup_expired_timer_thread" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.no_timeslicing" name="threads_scheduling.yield_cooperative" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.no_timeslicing" name="threads_scheduling.k_thread_resume_init_null" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.no_timeslicing" name="threads_scheduling.sched_is_preempt_thread" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.no_timeslicing" name="threads_scheduling.lock_preemptible" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.no_timeslicing" name="threads_scheduling.unlock_nested_sched_lock" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.no_timeslicing" name="threads_scheduling.priority_preemptible" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.no_timeslicing" name="threads_scheduling.priority_scheduling" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.no_timeslicing" name="threads_scheduling.k_thread_priority_set_upgrade" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.no_timeslicing" name="threads_scheduling.busy_wait_cooperative" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.slice_perthread" name="threads_scheduling.sleep_wakeup_preemptible" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.slice_perthread" name="threads_scheduling.user_k_wakeup" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.slice_perthread" name="threads_scheduling_1cpu.priority_preemptible_wait_prio" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.slice_perthread" name="threads_scheduling.sleep_cooperative" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.slice_perthread" name="threads_scheduling.k_thread_priority_set_overmax" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.slice_perthread" name="threads_scheduling.bad_priorities" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.slice_perthread" name="threads_scheduling.time_slicing_preemptible" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.slice_perthread" name="threads_scheduling.slice_scheduling" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.slice_perthread" name="threads_scheduling.unlock_preemptible" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.slice_perthread" name="threads_scheduling.user_k_is_preempt" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.slice_perthread" name="threads_scheduling.k_thread_priority_get_init_null" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.slice_perthread" name="threads_scheduling.time_slicing_disable_preemptible" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.slice_perthread" name="threads_scheduling.k_thread_priority_set_init_null" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.slice_perthread" name="threads_scheduling.slice_reset" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.slice_perthread" name="threads_scheduling.pending_thread_wakeup" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.slice_perthread" name="threads_scheduling.k_thread_suspend_init_null" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.slice_perthread" name="threads_scheduling.k_wakeup_init_null" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.slice_perthread" name="threads_scheduling.slice_perthread" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.slice_perthread" name="threads_scheduling.priority_cooperative" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.slice_perthread" name="threads_scheduling.wakeup_expired_timer_thread" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.slice_perthread" name="threads_scheduling.yield_cooperative" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.slice_perthread" name="threads_scheduling.k_thread_resume_init_null" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.slice_perthread" name="threads_scheduling.sched_is_preempt_thread" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.slice_perthread" name="threads_scheduling.lock_preemptible" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.slice_perthread" name="threads_scheduling.unlock_nested_sched_lock" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.slice_perthread" name="threads_scheduling.priority_preemptible" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.slice_perthread" name="threads_scheduling.priority_scheduling" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.slice_perthread" name="threads_scheduling.k_thread_priority_set_upgrade" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.slice_perthread" name="threads_scheduling.busy_wait_cooperative" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.multiq" name="threads_scheduling.sleep_wakeup_preemptible" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.multiq" name="threads_scheduling.user_k_wakeup" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.multiq" name="threads_scheduling_1cpu.priority_preemptible_wait_prio" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.multiq" name="threads_scheduling.sleep_cooperative" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.multiq" name="threads_scheduling.k_thread_priority_set_overmax" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.multiq" name="threads_scheduling.bad_priorities" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.multiq" name="threads_scheduling.time_slicing_preemptible" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.multiq" name="threads_scheduling.slice_scheduling" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.multiq" name="threads_scheduling.unlock_preemptible" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.multiq" name="threads_scheduling.user_k_is_preempt" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.multiq" name="threads_scheduling.k_thread_priority_get_init_null" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.multiq" name="threads_scheduling.time_slicing_disable_preemptible" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.multiq" name="threads_scheduling.k_thread_priority_set_init_null" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.multiq" name="threads_scheduling.slice_reset" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.multiq" name="threads_scheduling.pending_thread_wakeup" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.multiq" name="threads_scheduling.k_thread_suspend_init_null" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.multiq" name="threads_scheduling.k_wakeup_init_null" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.multiq" name="threads_scheduling.slice_perthread" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.multiq" name="threads_scheduling.priority_cooperative" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.multiq" name="threads_scheduling.wakeup_expired_timer_thread" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.multiq" name="threads_scheduling.yield_cooperative" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.multiq" name="threads_scheduling.k_thread_resume_init_null" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.multiq" name="threads_scheduling.sched_is_preempt_thread" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.multiq" name="threads_scheduling.lock_preemptible" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.multiq" name="threads_scheduling.unlock_nested_sched_lock" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.multiq" name="threads_scheduling.priority_preemptible" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.multiq" name="threads_scheduling.priority_scheduling" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.multiq" name="threads_scheduling.k_thread_priority_set_upgrade" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.multiq" name="threads_scheduling.busy_wait_cooperative" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.multiq_no_timeslicing" name="threads_scheduling.sleep_wakeup_preemptible" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.multiq_no_timeslicing" name="threads_scheduling.user_k_wakeup" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.multiq_no_timeslicing" name="threads_scheduling_1cpu.priority_preemptible_wait_prio" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.multiq_no_timeslicing" name="threads_scheduling.sleep_cooperative" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.multiq_no_timeslicing" name="threads_scheduling.k_thread_priority_set_overmax" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.multiq_no_timeslicing" name="threads_scheduling.bad_priorities" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.multiq_no_timeslicing" name="threads_scheduling.time_slicing_preemptible" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.multiq_no_timeslicing" name="threads_scheduling.slice_scheduling" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.multiq_no_timeslicing" name="threads_scheduling.unlock_preemptible" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.multiq_no_timeslicing" name="threads_scheduling.user_k_is_preempt" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.multiq_no_timeslicing" name="threads_scheduling.k_thread_priority_get_init_null" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.multiq_no_timeslicing" name="threads_scheduling.time_slicing_disable_preemptible" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.multiq_no_timeslicing" name="threads_scheduling.k_thread_priority_set_init_null" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.multiq_no_timeslicing" name="threads_scheduling.slice_reset" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.multiq_no_timeslicing" name="threads_scheduling.pending_thread_wakeup" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.multiq_no_timeslicing" name="threads_scheduling.k_thread_suspend_init_null" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.multiq_no_timeslicing" name="threads_scheduling.k_wakeup_init_null" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.multiq_no_timeslicing" name="threads_scheduling.slice_perthread" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.multiq_no_timeslicing" name="threads_scheduling.priority_cooperative" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.multiq_no_timeslicing" name="threads_scheduling.wakeup_expired_timer_thread" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.multiq_no_timeslicing" name="threads_scheduling.yield_cooperative" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.multiq_no_timeslicing" name="threads_scheduling.k_thread_resume_init_null" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.multiq_no_timeslicing" name="threads_scheduling.sched_is_preempt_thread" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.multiq_no_timeslicing" name="threads_scheduling.lock_preemptible" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.multiq_no_timeslicing" name="threads_scheduling.unlock_nested_sched_lock" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.multiq_no_timeslicing" name="threads_scheduling.priority_preemptible" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.multiq_no_timeslicing" name="threads_scheduling.priority_scheduling" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.multiq_no_timeslicing" name="threads_scheduling.k_thread_priority_set_upgrade" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.multiq_no_timeslicing" name="threads_scheduling.busy_wait_cooperative" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.simple_timeslicing" name="threads_scheduling.sleep_wakeup_preemptible" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.simple_timeslicing" name="threads_scheduling.user_k_wakeup" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.simple_timeslicing" name="threads_scheduling_1cpu.priority_preemptible_wait_prio" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.simple_timeslicing" name="threads_scheduling.sleep_cooperative" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.simple_timeslicing" name="threads_scheduling.k_thread_priority_set_overmax" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.simple_timeslicing" name="threads_scheduling.bad_priorities" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.simple_timeslicing" name="threads_scheduling.time_slicing_preemptible" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.simple_timeslicing" name="threads_scheduling.slice_scheduling" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.simple_timeslicing" name="threads_scheduling.unlock_preemptible" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.simple_timeslicing" name="threads_scheduling.user_k_is_preempt" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.simple_timeslicing" name="threads_scheduling.k_thread_priority_get_init_null" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.simple_timeslicing" name="threads_scheduling.time_slicing_disable_preemptible" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.simple_timeslicing" name="threads_scheduling.k_thread_priority_set_init_null" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.simple_timeslicing" name="threads_scheduling.slice_reset" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.simple_timeslicing" name="threads_scheduling.pending_thread_wakeup" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.simple_timeslicing" name="threads_scheduling.k_thread_suspend_init_null" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.simple_timeslicing" name="threads_scheduling.k_wakeup_init_null" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.simple_timeslicing" name="threads_scheduling.slice_perthread" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.simple_timeslicing" name="threads_scheduling.priority_cooperative" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.simple_timeslicing" name="threads_scheduling.wakeup_expired_timer_thread" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.simple_timeslicing" name="threads_scheduling.yield_cooperative" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.simple_timeslicing" name="threads_scheduling.k_thread_resume_init_null" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.simple_timeslicing" name="threads_scheduling.sched_is_preempt_thread" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.simple_timeslicing" name="threads_scheduling.lock_preemptible" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.simple_timeslicing" name="threads_scheduling.unlock_nested_sched_lock" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.simple_timeslicing" name="threads_scheduling.priority_preemptible" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.simple_timeslicing" name="threads_scheduling.priority_scheduling" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.simple_timeslicing" name="threads_scheduling.k_thread_priority_set_upgrade" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.simple_timeslicing" name="threads_scheduling.busy_wait_cooperative" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.simple_no_timeslicing" name="threads_scheduling.sleep_wakeup_preemptible" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.simple_no_timeslicing" name="threads_scheduling.user_k_wakeup" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.simple_no_timeslicing" name="threads_scheduling_1cpu.priority_preemptible_wait_prio" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.simple_no_timeslicing" name="threads_scheduling.sleep_cooperative" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.simple_no_timeslicing" name="threads_scheduling.k_thread_priority_set_overmax" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.simple_no_timeslicing" name="threads_scheduling.bad_priorities" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.simple_no_timeslicing" name="threads_scheduling.time_slicing_preemptible" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.simple_no_timeslicing" name="threads_scheduling.slice_scheduling" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.simple_no_timeslicing" name="threads_scheduling.unlock_preemptible" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.simple_no_timeslicing" name="threads_scheduling.user_k_is_preempt" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.simple_no_timeslicing" name="threads_scheduling.k_thread_priority_get_init_null" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.simple_no_timeslicing" name="threads_scheduling.time_slicing_disable_preemptible" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.simple_no_timeslicing" name="threads_scheduling.k_thread_priority_set_init_null" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.simple_no_timeslicing" name="threads_scheduling.slice_reset" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.simple_no_timeslicing" name="threads_scheduling.pending_thread_wakeup" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.simple_no_timeslicing" name="threads_scheduling.k_thread_suspend_init_null" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.simple_no_timeslicing" name="threads_scheduling.k_wakeup_init_null" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.simple_no_timeslicing" name="threads_scheduling.slice_perthread" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.simple_no_timeslicing" name="threads_scheduling.priority_cooperative" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.simple_no_timeslicing" name="threads_scheduling.wakeup_expired_timer_thread" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.simple_no_timeslicing" name="threads_scheduling.yield_cooperative" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.simple_no_timeslicing" name="threads_scheduling.k_thread_resume_init_null" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.simple_no_timeslicing" name="threads_scheduling.sched_is_preempt_thread" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.simple_no_timeslicing" name="threads_scheduling.lock_preemptible" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.simple_no_timeslicing" name="threads_scheduling.unlock_nested_sched_lock" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.simple_no_timeslicing" name="threads_scheduling.priority_preemptible" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.simple_no_timeslicing" name="threads_scheduling.priority_scheduling" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.simple_no_timeslicing" name="threads_scheduling.k_thread_priority_set_upgrade" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.scheduler.simple_no_timeslicing" name="threads_scheduling.busy_wait_cooperative" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.threads.apis" name="threads_lifecycle.k_thread_stack_space_get_user" time="0.00" />
		<testcase classname="kernel.threads.apis" name="threads_lifecycle_1cpu.k_busy_wait_user" time="0.10" />
		<testcase classname="kernel.threads.apis" name="threads_lifecycle.k_busy_wait" time="0.00" />
		<testcase classname="kernel.threads.apis" name="threads_lifecycle.thread_runtime_stats_get" time="0.00" />
		<testcase classname="kernel.threads.apis" name="threads_lifecycle.thread_timeout_remaining_expires" time="0.03" />
		<testcase classname="kernel.threads.apis" name="threads_lifecycle.thread_join_deadlock" time="0.50" />
		<testcase classname="kernel.threads.apis" name="threads_lifecycle.thread_join_isr" time="0.05" />
		<testcase classname="kernel.threads.apis" name="threads_lifecycle.thread_join" time="0.11" />
		<testcase classname="kernel.threads.apis" name="threads_lifecycle.user_mode" time="0.03" />
		<testcase classname="kernel.threads.apis" name="threads_lifecycle_1cpu.customdata_get_set_preempt" time="0.50" />
		<testcase classname="kernel.threads.apis" name="threads_lifecycle.thread_name_user_get_set" time="0.05" />
		<testcase classname="kernel.threads.apis" name="threads_lifecycle.thread_name_get_set" time="0.00" />
		<testcase classname="kernel.threads.apis" name="threads_lifecycle_1cpu.customdata_get_set_coop" time="0.50" />
		<testcase classname="kernel.threads.apis" name="threads_lifecycle.systhreads_idle" time="0.10" />
		<testcase classname="kernel.threads.apis" name="threads_lifecycle.systhreads_main" time="0.00" />
		<testcase classname="kernel.threads.apis" name="threads_lifecycle.essential_thread_abort_self" time="0.10" />
		<testcase classname="kernel.threads.apis" name="threads_lifecycle.essential_thread_abort" time="0.14" />
		<testcase classname="kernel.threads.apis" name="threads_lifecycle.essential_thread_operation" time="0.00" />
		<testcase classname="kernel.threads.apis" name="threads_lifecycle_1cpu.k_thread_state_str" time="0.00" />
		<testcase classname="kernel.threads.apis" name="threads_lifecycle_1cpu.k_thread_foreach_unlocked_null_cb" time="0.04" />
		<testcase classname="kernel.threads.apis" name="threads_lifecycle_1cpu.k_thread_foreach_null_cb" time="0.04" />
		<testcase classname="kernel.threads.apis" name="threads_lifecycle_1cpu.k_thread_foreach_unlocked" time="0.03" />
		<testcase classname="kernel.threads.apis" name="threads_lifecycle_1cpu.k_thread_foreach" time="0.01" />
		<testcase classname="kernel.threads.apis" name="threads_lifecycle.abort_from_isr_not_self" time="0.00" />
		<testcase classname="kernel.threads.apis" name="threads_lifecycle.abort_from_isr" time="0.00" />
		<testcase classname="kernel.threads.apis" name="threads_lifecycle_1cpu.delayed_thread_abort" time="0.05" />
		<testcase classname="kernel.threads.apis" name="threads_lifecycle_1cpu.threads_abort_repeat" time="0.20" />
		<testcase classname="kernel.threads.apis" name="threads_lifecycle.threads_abort_others" time="1.15" />
		<testcase classname="kernel.threads.apis" name="threads_lifecycle.threads_abort_self" time="0.10" />
		<testcase classname="kernel.threads.apis" name="threads_lifecycle_1cpu.threads_cpu_mask" time="0.00" />
		<testcase classname="kernel.threads.apis" name="threads_lifecycle.isr_threads_priority_set_" time="0.00" />
		<testcase classname="kernel.threads.apis" name="threads_lifecycle.threads_priority_set" time="0.00" />
		<testcase classname="kernel.threads.apis" name="threads_lifecycle.thread_start_user" time="0.10" />
		<testcase classname="kernel.threads.apis" name="threads_lifecycle.thread_start" time="0.00" />
		<testcase classname="kernel.threads.apis" name="threads_lifecycle.threads_spawn_forever" time="0.00" />
		<testcase classname="kernel.threads.apis" name="threads_lifecycle.threads_spawn_delay" time="0.20" />
		<testcase classname="kernel.threads.apis" name="threads_lifecycle.threads_spawn_priority" time="0.10" />
		<testcase classname="kernel.threads.apis" name="threads_lifecycle.threads_spawn_params" time="0.10" />
		<testcase classname="kernel.threads.apis" name="threads_lifecycle.resume_unsuspend_thread" time="0.00" />
		<testcase classname="kernel.threads.apis" name="threads_lifecycle.threads_suspend_timeout" time="0.25" />
		<testcase classname="kernel.threads.apis" name="threads_lifecycle.threads_suspend" time="0.10" />
		<testcase classname="kernel.threads.apis" name="threads_lifecycle.threads_suspend_resume_preemptible" time="0.20" />
		<testcase classname="kernel.threads.apis" name="threads_lifecycle_1cpu.threads_suspend_resume_cooperative" time="0.20" />
		<testcase classname="kernel.threads.tls" name="thread_tls.tls_userspace" time="0.51" />
		<testcase classname="kernel.threads.tls" name="thread_tls.tls" time="0.51" />
		<testcase classname="kernel.threads.tls.userspace" name="thread_tls.tls_userspace" time="0.51" />
		<testcase classname="kernel.threads.tls.userspace" name="thread_tls.tls" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="kernel.threads.init" name="thread_init.kinit_coop_thread" time="2.00" />
		<testcase classname="kernel.threads.init" name="thread_init.kinit_preempt_thread" time="0.00" />
		<testcase classname="kernel.threads.init" name="thread_init.kdefine_coop_thread" time="1.99" />
		<testcase classname="kernel.threads.init" name="thread_init.kdefine_preempt_thread" time="0.00" />
		<testcase classname="kernel.threads.error.case" name="thread_error_case.thread_create_stack_overflow" time="0.04" />
		<testcase classname="kernel.threads.error.case" name="thread_error_case.thread_create_stack_null" time="0.05" />
		<testcase classname="kernel.threads.error.case" name="thread_error_case.thread_create_uninit" time="0.05" />
		<testcase classname="kernel.threads.error.case" name="thread_error_case.timeout_expires_ticks" time="0.05" />
		<testcase classname="kernel.threads.error.case" name="thread_error_case.timeout_remaining_ticks" time="0.05" />
		<testcase classname="kernel.threads.error.case" name="thread_error_case.float_disable" time="0.05" />
		<testcase classname="kernel.threads.error.case" name="thread_error_case.thread_start" time="0.05" />
		<testcase classname="kernel.threads.dynamic_thread.stack.no_pool.no_alloc.no_user" name="dynamic_thread_stack.dynamic_thread_stack_alloc" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.threads.dynamic_thread.stack.no_pool.no_alloc.no_user" name="dynamic_thread_stack.dynamic_thread_stack_pool" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.threads.dynamic_thread.stack.no_pool.no_alloc.no_user" name="dynamic_thread_stack.dynamic_thread_stack_userspace_dyn_obj" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.threads.dynamic_thread.stack.no_pool.no_alloc.no_user" name="dynamic_thread_stack.dynamic_thread_stack_permission" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.threads.dynamic_thread.stack.no_pool.no_alloc.user" name="dynamic_thread_stack.dynamic_thread_stack_alloc" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.threads.dynamic_thread.stack.no_pool.no_alloc.user" name="dynamic_thread_stack.dynamic_thread_stack_pool" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.threads.dynamic_thread.stack.no_pool.no_alloc.user" name="dynamic_thread_stack.dynamic_thread_stack_userspace_dyn_obj" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.threads.dynamic_thread.stack.no_pool.no_alloc.user" name="dynamic_thread_stack.dynamic_thread_stack_permission" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.threads.dynamic_thread.stack.no_pool.alloc.no_user" name="dynamic_thread_stack.dynamic_thread_stack_alloc" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.threads.dynamic_thread.stack.no_pool.alloc.no_user" name="dynamic_thread_stack.dynamic_thread_stack_pool" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.threads.dynamic_thread.stack.no_pool.alloc.no_user" name="dynamic_thread_stack.dynamic_thread_stack_userspace_dyn_obj" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.threads.dynamic_thread.stack.no_pool.alloc.no_user" name="dynamic_thread_stack.dynamic_thread_stack_permission" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.threads.dynamic_thread.stack.no_pool.alloc.user" name="dynamic_thread_stack.dynamic_thread_stack_alloc" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.threads.dynamic_thread.stack.no_pool.alloc.user" name="dynamic_thread_stack.dynamic_thread_stack_pool" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.threads.dynamic_thread.stack.no_pool.alloc.user" name="dynamic_thread_stack.dynamic_thread_stack_userspace_dyn_obj" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.threads.dynamic_thread.stack.no_pool.alloc.user" name="dynamic_thread_stack.dynamic_thread_stack_permission" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.threads.dynamic_thread.stack.pool.no_alloc.no_user" name="dynamic_thread_stack.dynamic_thread_stack_alloc" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.threads.dynamic_thread.stack.pool.no_alloc.no_user" name="dynamic_thread_stack.dynamic_thread_stack_pool" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.threads.dynamic_thread.stack.pool.no_alloc.no_user" name="dynamic_thread_stack.dynamic_thread_stack_userspace_dyn_obj" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.threads.dynamic_thread.stack.pool.no_alloc.no_user" name="dynamic_thread_stack.dynamic_thread_stack_permission" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.threads.dynamic_thread.stack.pool.no_alloc.user" name="dynamic_thread_stack.dynamic_thread_stack_alloc" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.threads.dynamic_thread.stack.pool.no_alloc.user" name="dynamic_thread_stack.dynamic_thread_stack_pool" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.threads.dynamic_thread.stack.pool.no_alloc.user" name="dynamic_thread_stack.dynamic_thread_stack_userspace_dyn_obj" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.threads.dynamic_thread.stack.pool.no_alloc.user" name="dynamic_thread_stack.dynamic_thread_stack_permission" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.threads.dynamic_thread.stack.pool.alloc.no_user" name="dynamic_thread_stack.dynamic_thread_stack_alloc" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.threads.dynamic_thread.stack.pool.alloc.no_user" name="dynamic_thread_stack.dynamic_thread_stack_pool" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.threads.dynamic_thread.stack.pool.alloc.no_user" name="dynamic_thread_stack.dynamic_thread_stack_userspace_dyn_obj" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.threads.dynamic_thread.stack.pool.alloc.no_user" name="dynamic_thread_stack.dynamic_thread_stack_permission" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.threads.dynamic_thread.stack.pool.alloc.user" name="dynamic_thread_stack.dynamic_thread_stack_alloc" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.threads.dynamic_thread.stack.pool.alloc.user" name="dynamic_thread_stack.dynamic_thread_stack_pool" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.threads.dynamic_thread.stack.pool.alloc.user" name="dynamic_thread_stack.dynamic_thread_stack_userspace_dyn_obj" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.threads.dynamic_thread.stack.pool.alloc.user" name="dynamic_thread_stack.dynamic_thread_stack_permission" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.threads.dynamic" name="thread_dynamic.dyn_thread_perms" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.threads.dynamic" name="thread_dynamic.kernel_create_dyn_user_thread" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.threads.dynamic" name="thread_dynamic.user_create_dyn_user_thread" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.threads.dynamic" name="thread_dynamic.thread_index_management" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.threads.thread_stack" name="userspace_thread_stack.idle_stack" time="0.01" />
		<testcase classname="kernel.threads.thread_stack" name="userspace_thread_stack.stack_buffer" time="0.50" />
		<testcase classname="arch.interrupt" name="interrupt_feature.prevent_interruption" time="0.03" />
		<testcase classname="arch.interrupt" name="interrupt_feature.isr_offload_job" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="arch.interrupt" name="interrupt_feature.isr_offload_job_identi" time="0.00" />
		<testcase classname="arch.interrupt" name="interrupt_feature.isr_offload_job_multiple" time="0.00" />
		<testcase classname="arch.interrupt" name="interrupt_feature.nested_isr" time="0.02" />
		<testcase classname="arch.interrupt" name="interrupt_feature.isr_dynamic" time="0.00" />
		<testcase classname="arch.interrupt.minimallibc" name="interrupt_feature.prevent_interruption" time="0.03" />
		<testcase classname="arch.interrupt.minimallibc" name="interrupt_feature.isr_offload_job" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="arch.interrupt.minimallibc" name="interrupt_feature.isr_offload_job_identi" time="0.00" />
		<testcase classname="arch.interrupt.minimallibc" name="interrupt_feature.isr_offload_job_multiple" time="0.00" />
		<testcase classname="arch.interrupt.minimallibc" name="interrupt_feature.nested_isr" time="0.02" />
		<testcase classname="arch.interrupt.minimallibc" name="interrupt_feature.isr_dynamic" time="0.00" />
		<testcase classname="arch.shared_interrupt" name="interrupt_feature.prevent_interruption" time="0.03" />
		<testcase classname="arch.shared_interrupt" name="interrupt_feature.isr_offload_job" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="arch.shared_interrupt" name="interrupt_feature.isr_offload_job_identi" time="0.00" />
		<testcase classname="arch.shared_interrupt" name="interrupt_feature.isr_offload_job_multiple" time="0.00" />
		<testcase classname="arch.shared_interrupt" name="interrupt_feature.nested_isr" time="0.02" />
		<testcase classname="arch.shared_interrupt" name="interrupt_feature.isr_dynamic" time="0.00" />
		<testcase classname="arch.shared_interrupt" name="shared_irq_feature.dynamic_shared_irq_disconnect_write" time="0.01" />
		<testcase classname="arch.shared_interrupt" name="shared_irq_feature.dynamic_shared_irq_write" time="0.01" />
		<testcase classname="arch.shared_interrupt" name="interrupt_feature.static_shared_irq_write" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="arch.shared_interrupt.lto" name="shared_irq_feature.dynamic_shared_irq_disconnect_write" time="0.01" />
		<testcase classname="arch.shared_interrupt.lto" name="shared_irq_feature.dynamic_shared_irq_write" time="0.01" />
		<testcase classname="arch.shared_interrupt.lto" name="interrupt_feature.static_shared_irq_write" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="arch.shared_interrupt.lto" name="interrupt_feature.isr_dynamic" time="0.00" />
		<testcase classname="arch.shared_interrupt.lto" name="interrupt_feature.nested_isr" time="0.02" />
		<testcase classname="arch.shared_interrupt.lto" name="interrupt_feature.isr_offload_job" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="arch.shared_interrupt.lto" name="interrupt_feature.isr_offload_job_identi" time="0.00" />
		<testcase classname="arch.shared_interrupt.lto" name="interrupt_feature.isr_offload_job_multiple" time="0.00" />
		<testcase classname="arch.shared_interrupt.lto" name="interrupt_feature.prevent_interruption" time="0.03" />
		<testcase classname="arch.shared_interrupt.lto.speed" name="shared_irq_feature.dynamic_shared_irq_disconnect_write" time="0.01" />
		<testcase classname="arch.shared_interrupt.lto.speed" name="shared_irq_feature.dynamic_shared_irq_write" time="0.01" />
		<testcase classname="arch.shared_interrupt.lto.speed" name="interrupt_feature.static_shared_irq_write" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="arch.shared_interrupt.lto.speed" name="interrupt_feature.isr_dynamic" time="0.00" />
		<testcase classname="arch.shared_interrupt.lto.speed" name="interrupt_feature.nested_isr" time="0.02" />
		<testcase classname="arch.shared_interrupt.lto.speed" name="interrupt_feature.isr_offload_job" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="arch.shared_interrupt.lto.speed" name="interrupt_feature.isr_offload_job_identi" time="0.00" />
		<testcase classname="arch.shared_interrupt.lto.speed" name="interrupt_feature.isr_offload_job_multiple" time="0.00" />
		<testcase classname="arch.shared_interrupt.lto.speed" name="interrupt_feature.prevent_interruption" time="0.03" />
		<testcase classname="kernel.lifo" name="lifo_contexts.lifo_isr2thread" time="0.00" />
		<testcase classname="kernel.lifo" name="lifo_contexts.lifo_thread2isr" time="0.00" />
		<testcase classname="kernel.lifo" name="lifo_contexts_1cpu.lifo_thread2thread" time="0.00" />
		<testcase classname="kernel.lifo" name="lifo_fail.lifo_get_fail" time="0.10" />
		<testcase classname="kernel.lifo" name="lifo_loop.lifo_loop" time="0.38" />
		<testcase classname="kernel.lifo.usage" name="lifo_usage_1cpu.timeout_threads_pend_on_lifo" time="0.41" />
		<testcase classname="kernel.lifo.usage" name="lifo_usage_1cpu.timeout_lifo_thread" time="0.01" />
		<testcase classname="kernel.lifo.usage" name="lifo_usage.timeout_non_empty_lifo" time="0.00" />
		<testcase classname="kernel.lifo.usage" name="lifo_usage_1cpu.timeout_empty_lifo" time="0.10" />
		<testcase classname="kernel.lifo.usage" name="lifo_usage_1cpu.lifo_wait" time="0.00" />
		<testcase classname="kernel.lifo.usage" name="lifo_usage.lifo_nowait" time="0.00" />
		<testcase classname="kernel.memory_protection.syscalls.timeslicing" name="syscalls.syscall_context" time="0.00" />
		<testcase classname="kernel.memory_protection.syscalls.timeslicing" name="syscalls_extended.syscall_switch_stress" time="15.01" />
		<testcase classname="kernel.memory_protection.syscalls.timeslicing" name="syscalls.more_args" time="0.00" />
		<testcase classname="kernel.memory_protection.syscalls.timeslicing" name="syscalls.arg64" time="0.00" />
		<testcase classname="kernel.memory_protection.syscalls.timeslicing" name="syscalls.to_copy" time="0.01" />
		<testcase classname="kernel.memory_protection.syscalls.timeslicing" name="syscalls.user_string_copy" time="0.01" />
		<testcase classname="kernel.memory_protection.syscalls.timeslicing" name="syscalls.user_string_alloc_copy" time="0.01" />
		<testcase classname="kernel.memory_protection.syscalls.timeslicing" name="syscalls.string_nlen" time="0.01" />
		<testcase classname="kernel.memory_protection.syscalls.kyield" name="syscalls.syscall_context" time="0.00" />
		<testcase classname="kernel.memory_protection.syscalls.kyield" name="syscalls_extended.syscall_switch_stress" time="15.01" />
		<testcase classname="kernel.memory_protection.syscalls.kyield" name="syscalls.more_args" time="0.00" />
		<testcase classname="kernel.memory_protection.syscalls.kyield" name="syscalls.arg64" time="0.00" />
		<testcase classname="kernel.memory_protection.syscalls.kyield" name="syscalls.to_copy" time="0.01" />
		<testcase classname="kernel.memory_protection.syscalls.kyield" name="syscalls.user_string_copy" time="0.01" />
		<testcase classname="kernel.memory_protection.syscalls.kyield" name="syscalls.user_string_alloc_copy" time="0.01" />
		<testcase classname="kernel.memory_protection.syscalls.kyield" name="syscalls.string_nlen" time="0.01" />
		<testcase classname="kernel.memory_protection.protection" name="protection.exec_heap" time="0.04" />
		<testcase classname="kernel.memory_protection.protection" name="protection.exec_stack" time="0.04" />
		<testcase classname="kernel.memory_protection.protection" name="protection.exec_data" time="0.04" />
		<testcase classname="kernel.memory_protection.protection" name="protection.write_text" time="0.04" />
		<testcase classname="kernel.memory_protection.protection" name="protection.write_ro" time="0.04" />
		<testcase classname="kernel.memory_protection.sys_sem" name="sys_sem_1cpu.sem_multiple_threads_wait" time="0.00" />
		<testcase classname="kernel.memory_protection.sys_sem" name="sys_sem.sem_give_limit" time="0.00" />
		<testcase classname="kernel.memory_protection.sys_sem" name="sys_sem.sem_give_take_from_isr" time="0.00" />
		<testcase classname="kernel.memory_protection.sys_sem" name="sys_sem_1cpu.sem_take_multiple" time="0.00" />
		<testcase classname="kernel.memory_protection.sys_sem" name="sys_sem_1cpu.sem_take_timeout_isr" time="0.00" />
		<testcase classname="kernel.memory_protection.sys_sem" name="sys_sem_1cpu.sem_take_timeout_forever" time="0.10" />
		<testcase classname="kernel.memory_protection.sys_sem" name="sys_sem.sem_take_timeout" time="0.00" />
		<testcase classname="kernel.memory_protection.sys_sem" name="sys_sem_1cpu.sem_take_timeout_fails" time="0.50" />
		<testcase classname="kernel.memory_protection.sys_sem" name="sys_sem.sem_take_no_wait_fails" time="0.00" />
		<testcase classname="kernel.memory_protection.sys_sem" name="sys_sem.sem_take_no_wait" time="0.00" />
		<testcase classname="kernel.memory_protection.sys_sem" name="sys_sem.simple_sem_from_task" time="0.00" />
		<testcase classname="kernel.memory_protection.sys_sem" name="sys_sem.simple_sem_from_isr" time="0.00" />
		<testcase classname="kernel.memory_protection.sys_sem" name="sys_sem.basic_sem_test" time="0.10" />
		<testcase classname="kernel.memory_protection.sys_sem.nouser" name="sys_sem_1cpu.sem_multiple_threads_wait" time="0.00" />
		<testcase classname="kernel.memory_protection.sys_sem.nouser" name="sys_sem.sem_give_limit" time="0.00" />
		<testcase classname="kernel.memory_protection.sys_sem.nouser" name="sys_sem.sem_give_take_from_isr" time="0.00" />
		<testcase classname="kernel.memory_protection.sys_sem.nouser" name="sys_sem_1cpu.sem_take_multiple" time="0.00" />
		<testcase classname="kernel.memory_protection.sys_sem.nouser" name="sys_sem_1cpu.sem_take_timeout_isr" time="0.00" />
		<testcase classname="kernel.memory_protection.sys_sem.nouser" name="sys_sem_1cpu.sem_take_timeout_forever" time="0.10" />
		<testcase classname="kernel.memory_protection.sys_sem.nouser" name="sys_sem.sem_take_timeout" time="0.00" />
		<testcase classname="kernel.memory_protection.sys_sem.nouser" name="sys_sem_1cpu.sem_take_timeout_fails" time="0.50" />
		<testcase classname="kernel.memory_protection.sys_sem.nouser" name="sys_sem.sem_take_no_wait_fails" time="0.00" />
		<testcase classname="kernel.memory_protection.sys_sem.nouser" name="sys_sem.sem_take_no_wait" time="0.00" />
		<testcase classname="kernel.memory_protection.sys_sem.nouser" name="sys_sem.simple_sem_from_task" time="0.00" />
		<testcase classname="kernel.memory_protection.sys_sem.nouser" name="sys_sem.simple_sem_from_isr" time="0.00" />
		<testcase classname="kernel.memory_protection.stackprot" name="stackprot.canary_value" time="0.10" />
		<testcase classname="kernel.memory_protection.stackprot" name="stackprot.create_alt_thread" time="0.10" />
		<testcase classname="kernel.memory_protection.stackprot" name="stackprot.stackprot" time="0.02" />
		<testcase classname="kernel.memory_protection.stackprot" name="stackprot_mapped_stack.guard_page_rear_user" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="kernel.memory_protection.stackprot" name="stackprot_mapped_stack.guard_page_front_user" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="kernel.memory_protection.stackprot" name="stackprot_mapped_stack.guard_page_rear" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="kernel.memory_protection.stackprot" name="stackprot_mapped_stack.guard_page_front" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="kernel.memory_protection" name="mem_protect_kobj.create_new_essential_thread_from_user" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.memory_protection" name="mem_protect_kobj.alloc_kobjects" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.memory_protection" name="mem_protect_kobj.create_new_thread_from_user" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.memory_protection" name="mem_protect_domain.mem_domain_no_writes_to_ro" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.memory_protection" name="mem_protect_kobj.access_kobject_without_init_with_access" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.memory_protection" name="mem_protect_part.mem_part_auto_determ_size" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.memory_protection" name="mem_protect_kobj.kobject_access_invalid_kobject" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.memory_protection" name="mem_protect_part.mem_part_assign_bss_vars_zero" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.memory_protection" name="mem_protect_kobj.kobject_init_error" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.memory_protection" name="mem_protect.permission_inheritance" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.memory_protection" name="mem_protect_domain.mem_part_assert_add_overmax" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.memory_protection" name="mem_protect_kobj.kobject_revoke_access" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.memory_protection" name="mem_protect_kobj.kobject_invalid" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.memory_protection" name="mem_protect_kobj.mark_thread_exit_uninitialized" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.memory_protection" name="mem_protect_domain.mem_part_error_wraparound" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.memory_protection" name="mem_protect_domain.mem_part_remove_error_zerosize" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.memory_protection" name="mem_protect_domain.mem_domain_remove_part_fail" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.memory_protection" name="mem_protect_kobj.kobject_reinitialize_thread_kobj" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.memory_protection" name="mem_protect_domain.mem_domain_valid_access" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.memory_protection" name="mem_protect_kobj.kobject_grant_access_kobj" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.memory_protection" name="mem_protect_kobj.kobject_grant_access_kobj_invalid" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.memory_protection" name="mem_protect.inherit_resource_pool" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.memory_protection" name="mem_protect_kobj.kobject_access_grant" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.memory_protection" name="mem_protect_kobj.create_new_higher_prio_thread_from_user" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.memory_protection" name="mem_protect_kobj.all_kobjects_str" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.memory_protection" name="mem_protect_kobj.create_new_thread_from_user_huge_stacksize" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.memory_protection" name="mem_protect_kobj.kobject_access_grant_error_user" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.memory_protection" name="mem_protect_kobj.syscall_invalid_kobject" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.memory_protection" name="mem_protect_domain.mem_domain_remove_add_partition" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.memory_protection" name="mem_protect_kobj.thread_has_residual_permissions" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.memory_protection" name="mem_protect_domain.mem_part_add_error_zerosize" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.memory_protection" name="mem_protect_kobj.access_kobject_without_init_access" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.memory_protection" name="mem_protect_kobj.create_new_thread_from_user_invalid_stacksize" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.memory_protection" name="mem_protect_domain.mem_domain_init_fail" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.memory_protection" name="mem_protect_domain.mem_part_add_error_null" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.memory_protection" name="mem_protect_domain.mem_domain_migration" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.memory_protection" name="mem_protect_kobj.thread_without_kobject_permission" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.memory_protection" name="mem_protect_kobj.kobject_access_grant_to_invalid_thread" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.memory_protection" name="mem_protect_kobj.thread_alloc_out_of_idx" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.memory_protection" name="mem_protect_kobj.kobject_perm_error" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.memory_protection" name="mem_protect_kobj.create_new_thread_from_user_no_access_stack" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.memory_protection" name="mem_protect_kobj.kobject_access_grant_error" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.memory_protection" name="mem_protect_domain.mem_part_overlap" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.memory_protection" name="mem_protect_kobj.kobject_access_grant_error_user_null" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.memory_protection" name="mem_protect_kobj.kobject_free_error" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.memory_protection" name="mem_protect_kobj.kobject_access_all_grant" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.memory_protection" name="mem_protect_domain.mem_domain_invalid_access" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.memory_protection" name="mem_protect_kobj.kobj_create_out_of_memory" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.memory_protection" name="mem_protect_domain.mem_domain_boot_threads" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.memory_protection" name="mem_protect_kobj.kobject_access_all_grant_error" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.memory_protection" name="mem_protect_kobj.new_user_thread_with_in_use_stack_obj" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.memory_protection" name="mem_protect_kobj.create_new_supervisor_thread_from_user" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.memory_protection" name="mem_protect_kobj.create_new_invalid_prio_thread_from_user" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.memory_protection" name="mem_protect_kobj.kobject_release_from_user" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.memory_protection" name="mem_protect_domain.mem_domain_api_supervisor_only" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="kernel.memory_protection.stack_random" name="stack_pointer_randomness.stack_pt_randomization" time="6.67" />
		<testcase classname="kernel.memory_protection.userspace" name="userspace.kernel_only_thread" time="0.50" />
		<testcase classname="kernel.memory_protection.userspace" name="userspace.tls_pointer" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="kernel.memory_protection.userspace" name="userspace.tls_leakage" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="kernel.memory_protection.userspace" name="userspace.syscall_context" time="0.00" />
		<testcase classname="kernel.memory_protection.userspace" name="userspace.oops_stackcheck" time="0.03" />
		<testcase classname="kernel.memory_protection.userspace" name="userspace.oops_maxint" time="0.03" />
		<testcase classname="kernel.memory_protection.userspace" name="userspace.oops_exception" time="0.03" />
		<testcase classname="kernel.memory_protection.userspace" name="userspace.oops_oops" time="0.03" />
		<testcase classname="kernel.memory_protection.userspace" name="userspace.oops_panic" time="0.03" />
		<testcase classname="kernel.memory_protection.userspace" name="userspace.object_recycle" time="0.00" />
		<testcase classname="kernel.memory_protection.userspace" name="userspace.bad_syscall" time="0.04" />
		<testcase classname="kernel.memory_protection.userspace" name="userspace.unimplemented_syscall" time="0.04" />
		<testcase classname="kernel.memory_protection.userspace" name="userspace_domain_ctx.domain_remove_part_context_switch" time="0.04" />
		<testcase classname="kernel.memory_protection.userspace" name="userspace_domain_ctx.domain_add_part_context_switch" time="0.00" />
		<testcase classname="kernel.memory_protection.userspace" name="userspace_domain_ctx.domain_add_thread_context_switch" time="0.00" />
		<testcase classname="kernel.memory_protection.userspace" name="userspace_domain.domain_remove_part_drop_to_user" time="0.04" />
		<testcase classname="kernel.memory_protection.userspace" name="userspace_domain.domain_add_part_drop_to_user" time="0.00" />
		<testcase classname="kernel.memory_protection.userspace" name="userspace_domain.domain_add_thread_drop_to_user" time="0.00" />
		<testcase classname="kernel.memory_protection.userspace" name="userspace_domain.1st_init_and_access_other_memdomain" time="0.04" />
		<testcase classname="kernel.memory_protection.userspace" name="userspace.read_kobject_user_pipe" time="0.04" />
		<testcase classname="kernel.memory_protection.userspace" name="userspace.write_kobject_user_pipe" time="0.04" />
		<testcase classname="kernel.memory_protection.userspace" name="userspace.user_mode_enter" time="0.00" />
		<testcase classname="kernel.memory_protection.userspace" name="userspace.access_after_revoke" time="0.05" />
		<testcase classname="kernel.memory_protection.userspace" name="userspace.revoke_noperms_object" time="0.05" />
		<testcase classname="kernel.memory_protection.userspace" name="userspace.write_other_stack" time="0.04" />
		<testcase classname="kernel.memory_protection.userspace" name="userspace.read_other_stack" time="0.04" />
		<testcase classname="kernel.memory_protection.userspace" name="userspace.start_kernel_thread" time="0.04" />
		<testcase classname="kernel.memory_protection.userspace" name="userspace.pass_noperms_object" time="0.05" />
		<testcase classname="kernel.memory_protection.userspace" name="userspace.pass_user_object" time="0.04" />
		<testcase classname="kernel.memory_protection.userspace" name="userspace.write_priv_stack" time="0.04" />
		<testcase classname="kernel.memory_protection.userspace" name="userspace.read_priv_stack" time="0.04" />
		<testcase classname="kernel.memory_protection.userspace" name="userspace.write_kernel_data" time="0.04" />
		<testcase classname="kernel.memory_protection.userspace" name="userspace.read_kernel_data" time="0.04" />
		<testcase classname="kernel.memory_protection.userspace" name="userspace.write_kerntext" time="0.04" />
		<testcase classname="kernel.memory_protection.userspace" name="userspace.write_kernro" time="0.04" />
		<testcase classname="kernel.memory_protection.userspace" name="userspace.write_kernram" time="0.04" />
		<testcase classname="kernel.memory_protection.userspace" name="userspace.read_kernram" time="0.04" />
		<testcase classname="kernel.memory_protection.userspace" name="userspace.disable_mmu_mpu" time="0.04" />
		<testcase classname="kernel.memory_protection.userspace" name="userspace.write_control" time="0.00" />
		<testcase classname="kernel.memory_protection.userspace" name="userspace.is_usermode" time="0.00" />
		<testcase classname="kernel.memory_protection.obj_validation" name="object_validation.no_ref_dyn_kobj_release_mem" time="0.00" />
		<testcase classname="kernel.memory_protection.obj_validation" name="object_validation.kobj_assign_perms_on_alloc_obj" time="0.00" />
		<testcase classname="kernel.memory_protection.obj_validation" name="object_validation.generic_object" time="0.00" />
		<testcase classname="kernel.futex" name="futex.futex_locate_access" time="0.00" />
		<testcase classname="kernel.futex" name="futex.user_futex_bad" time="0.02" />
		<testcase classname="kernel.futex" name="futex.multiple_futex_wait_wake" time="0.00" />
		<testcase classname="kernel.futex" name="futex.futex_multiple_threads_wait_wake" time="0.00" />
		<testcase classname="kernel.futex" name="futex.futex_wait_forever_wake_from_isr" time="0.00" />
		<testcase classname="kernel.futex" name="futex.futex_wait_nowait_wake" time="0.10" />
		<testcase classname="kernel.futex" name="futex.futex_wait_timeout_wake" time="0.00" />
		<testcase classname="kernel.futex" name="futex.futex_wait_forever_wake" time="0.00" />
		<testcase classname="kernel.futex" name="futex.futex_wait_nowait" time="0.10" />
		<testcase classname="kernel.futex" name="futex.futex_wait_timeout" time="0.10" />
		<testcase classname="kernel.futex" name="futex.futex_wait_forever" time="0.00" />
		<testcase classname="kernel.mailbox.usage" name="mbox_usage_1cpu.multi_thread_send_get" time="0.00" />
		<testcase classname="kernel.mailbox.usage" name="mbox_usage.msg_receiver_unlimited" time="0.00" />
		<testcase classname="kernel.mailbox.usage" name="mbox_usage.msg_receiver" time="0.00" />
		<testcase classname="kernel.mailbox.api" name="mbox_api.mbox_multiple_waiting_get" time="0.00" />
		<testcase classname="kernel.mailbox.api" name="mbox_api.mbox_async_multiple_put" time="0.00" />
		<testcase classname="kernel.mailbox.api" name="mbox_api.mbox_get_waiting_put_incorrect_tid" time="0.10" />
		<testcase classname="kernel.mailbox.api" name="mbox_api.mbox_async_put_to_waiting_get" time="0.00" />
		<testcase classname="kernel.mailbox.api" name="mbox_api.mbox_dispose_size_0_msg" time="0.00" />
		<testcase classname="kernel.mailbox.api" name="mbox_api.mbox_msg_tid_mismatch" time="0.10" />
		<testcase classname="kernel.mailbox.api" name="mbox_api.mbox_timed_out_mbox_get" time="0.10" />
		<testcase classname="kernel.mailbox.api" name="mbox_api.mbox_incorrect_transmit_tid" time="0.00" />
		<testcase classname="kernel.mailbox.api" name="mbox_api.mbox_incorrect_receiver_tid" time="0.00" />
		<testcase classname="kernel.mailbox.api" name="mbox_api.mbox_target_source_thread_buffer" time="0.00" />
		<testcase classname="kernel.mailbox.api" name="mbox_api.mbox_async_put_get_block" time="0.00" />
		<testcase classname="kernel.mailbox.api" name="mbox_api.mbox_async_put_get_buffer" time="0.00" />
		<testcase classname="kernel.mailbox.api" name="mbox_api.mbox_put_get_buffer" time="0.00" />
		<testcase classname="kernel.mailbox.api" name="mbox_api.mbox_put_get_null" time="0.00" />
		<testcase classname="kernel.mailbox.api" name="mbox_api.define_multi_mbox" time="0.00" />
		<testcase classname="kernel.mailbox.api" name="mbox_api.mbox_enhanced_capabilities" time="0.00" />
		<testcase classname="kernel.mailbox.api" name="mbox_api.mbox_kdefine" time="0.00" />
		<testcase classname="kernel.mailbox.api" name="mbox_api.mbox_kinit" time="0.00" />
		<testcase classname="kernel.pipe.api" name="k_pipe_basic.close" time="0.00" />
		<testcase classname="kernel.pipe.api" name="k_pipe_basic.reset" time="0.00" />
		<testcase classname="kernel.pipe.api" name="k_pipe_basic.read_write_wrapp_around" time="0.00" />
		<testcase classname="kernel.pipe.api" name="k_pipe_basic.read_write_full" time="0.00" />
		<testcase classname="kernel.pipe.api" name="k_pipe_basic.read_empty" time="1.00" />
		<testcase classname="kernel.pipe.api" name="k_pipe_basic.write_full" time="1.00" />
		<testcase classname="kernel.pipe.api" name="k_pipe_basic.write_read_multiple" time="0.00" />
		<testcase classname="kernel.pipe.api" name="k_pipe_basic.write_read_one" time="0.00" />
		<testcase classname="kernel.pipe.api" name="k_pipe_basic.init" time="0.00" />
		<testcase classname="kernel.pipe.api" name="k_pipe_stress.read" time="0.02" />
		<testcase classname="kernel.pipe.api" name="k_pipe_stress.write" time="0.00" />
		<testcase classname="kernel.pipe.api" name="k_pipe_concurrency.partial_write" time="1.00" />
		<testcase classname="kernel.pipe.api" name="k_pipe_concurrency.partial_read" time="0.50" />
		<testcase classname="kernel.pipe.api" name="k_pipe_concurrency.reset_on_write" time="0.10" />
		<testcase classname="kernel.pipe.api" name="k_pipe_concurrency.reset_on_read" time="0.10" />
		<testcase classname="kernel.pipe.api" name="k_pipe_concurrency.close_on_write" time="0.10" />
		<testcase classname="kernel.pipe.api" name="k_pipe_concurrency.close_on_read" time="0.10" />
		<testcase classname="kernel.deprecated.pipe.api" name="pipe_api.pipe_avail_r_eq_w_full" time="0.00" />
		<testcase classname="kernel.deprecated.pipe.api" name="pipe_api.pipe_avail_r_eq_w_empty" time="0.00" />
		<testcase classname="kernel.deprecated.pipe.api" name="pipe_api.pipe_avail_w_lt_r" time="0.00" />
		<testcase classname="kernel.deprecated.pipe.api" name="pipe_api.pipe_avail_r_lt_w" time="0.00" />
		<testcase classname="kernel.deprecated.pipe.api" name="pipe_api.pipe_avail_no_buffer" time="0.00" />
		<testcase classname="kernel.deprecated.pipe.api" name="pipe_api.pipe_reader_wait" time="0.00" />
		<testcase classname="kernel.deprecated.pipe.api" name="pipe_api.pipe_get_large" time="0.10" />
		<testcase classname="kernel.deprecated.pipe.api" name="pipe_api.pipe_get_put" time="0.10" />
		<testcase classname="kernel.deprecated.pipe.api" name="pipe_api.half_pipe_put_get" time="0.10" />
		<testcase classname="kernel.deprecated.pipe.api" name="pipe_api.resource_pool_auto_free" time="0.00" />
		<testcase classname="kernel.deprecated.pipe.api" name="pipe_api_1cpu.pipe_user_thread2thread" time="0.00" />
		<testcase classname="kernel.deprecated.pipe.api" name="pipe_api_1cpu.pipe_thread2thread" time="0.00" />
		<testcase classname="kernel.deprecated.pipe.api" name="pipe_api.pipe_cleanup" time="0.10" />
		<testcase classname="kernel.deprecated.pipe.api" name="pipe_api_1cpu.pipe_alloc" time="0.00" />
		<testcase classname="kernel.deprecated.pipe.api" name="pipe_api.pipe_write_avail_null" time="0.05" />
		<testcase classname="kernel.deprecated.pipe.api" name="pipe_api.pipe_read_avail_null" time="0.05" />
		<testcase classname="kernel.deprecated.pipe.api" name="pipe_api.pipe_put_unreach_size" time="0.04" />
		<testcase classname="kernel.deprecated.pipe.api" name="pipe_api.pipe_put_unreach_data" time="0.04" />
		<testcase classname="kernel.deprecated.pipe.api" name="pipe_api.pipe_put_null" time="0.04" />
		<testcase classname="kernel.deprecated.pipe.api" name="pipe_api.pipe_get_unreach_size" time="0.04" />
		<testcase classname="kernel.deprecated.pipe.api" name="pipe_api.pipe_get_unreach_data" time="0.04" />
		<testcase classname="kernel.deprecated.pipe.api" name="pipe_api.pipe_get_null" time="0.04" />
		<testcase classname="kernel.deprecated.pipe.api" name="pipe_api.pipe_alloc_not_init" time="0.05" />
		<testcase classname="kernel.deprecated.pipe.api" name="pipe_api.pipe_user_get_fail" time="0.20" />
		<testcase classname="kernel.deprecated.pipe.api" name="pipe_api.pipe_get_fail" time="0.20" />
		<testcase classname="kernel.deprecated.pipe.api" name="pipe_api_1cpu.pipe_user_put_fail" time="0.10" />
		<testcase classname="kernel.deprecated.pipe.api" name="pipe_api_1cpu.pipe_put_fail" time="0.10" />
		<testcase classname="kernel.deprecated.pipe" name="pipe.pipe_flush" time="0.30" />
		<testcase classname="kernel.deprecated.pipe" name="pipe.pipe_define_at_runtime" time="0.02" />
		<testcase classname="kernel.deprecated.pipe" name="pipe.pipe_put_min_xfer" time="0.00" />
		<testcase classname="kernel.deprecated.pipe" name="pipe.pipe_get_min_xfer" time="0.00" />
		<testcase classname="kernel.deprecated.pipe" name="pipe.pipe_get_invalid_size" time="0.00" />
		<testcase classname="kernel.deprecated.pipe" name="pipe.pipe_get_timeout" time="1.60" />
		<testcase classname="kernel.deprecated.pipe" name="pipe.pipe_forever_timeout" time="0.00" />
		<testcase classname="kernel.deprecated.pipe" name="pipe.pipe_get_on_empty_pipe" time="0.00" />
		<testcase classname="kernel.deprecated.pipe" name="pipe.pipe_timeout" time="0.02" />
		<testcase classname="kernel.deprecated.pipe" name="pipe.pipe_forever_wait" time="0.00" />
		<testcase classname="kernel.deprecated.pipe" name="pipe.pipe_on_multiple_elements" time="0.00" />
		<testcase classname="kernel.deprecated.pipe" name="pipe.pipe_on_single_elements" time="0.01" />
		<testcase classname="kernel.condvar" name="condvar_tests.condvar_usecase_broadcast" time="0.51" />
		<testcase classname="kernel.condvar" name="condvar_tests.condvar_usecase_signal" time="0.51" />
		<testcase classname="kernel.condvar" name="condvar_tests.condvar_wait_null" time="0.05" />
		<testcase classname="kernel.condvar" name="condvar_tests.condvar_broadcast_null" time="0.05" />
		<testcase classname="kernel.condvar" name="condvar_tests.condvar_signal_null" time="0.05" />
		<testcase classname="kernel.condvar" name="condvar_tests.condvar_init_null" time="0.05" />
		<testcase classname="kernel.condvar" name="condvar_tests.multiple_condvar_wait_wake" time="0.01" />
		<testcase classname="kernel.condvar" name="condvar_tests.condvar_multiple_threads_wait_wake" time="0.00" />
		<testcase classname="kernel.condvar" name="condvar_tests.condvar_wait_forever_wake_from_isr" time="0.00" />
		<testcase classname="kernel.condvar" name="condvar_tests.condvar_wait_nowait_wake" time="0.10" />
		<testcase classname="kernel.condvar" name="condvar_tests.condvar_wait_nowait" time="0.10" />
		<testcase classname="kernel.condvar" name="condvar_tests.condvar_wait_forever" time="0.00" />
		<testcase classname="kernel.condvar" name="condvar_tests.condvar_wait_timeout" time="0.10" />
		<testcase classname="kernel.condvar" name="condvar_tests.condvar_wait_timeout_wake" time="0.00" />
		<testcase classname="kernel.condvar" name="condvar_tests.condvar_wait_forever_wake" time="0.00" />
		<testcase classname="kernel.events" name="events_api.event_receive" time="0.40" />
		<testcase classname="kernel.events" name="events_api.event_deliver" time="0.00" />
		<testcase classname="kernel.events" name="events_api.k_event_init" time="0.00" />
		<testcase classname="kernel.events.usage" name="sys_events.event_receive" time="0.40" />
		<testcase classname="kernel.events.usage" name="sys_events.event_deliver" time="0.00" />
		<testcase classname="kernel.events.usage" name="sys_events.k_event_init" time="0.00" />
		<testcase classname="kernel.common.profiling" name="profiling_api_1cpu.call_stacks_analyze_workq" time="0.05" />
		<testcase classname="kernel.common.profiling" name="profiling_api_1cpu.call_stacks_analyze_idle" time="0.10" />
		<testcase classname="kernel.common.profiling" name="profiling_api.call_stacks_analyze_main" time="0.03" />
		<testcase classname="kernel.obj_core.stats" name="obj_core_stats_mem_slab.obj_core_stats_mem_slab" time="0.00" />
		<testcase classname="kernel.obj_core.stats" name="obj_core_stats_mem_slab.mem_slab_disable" time="0.00" />
		<testcase classname="kernel.obj_core.stats" name="obj_core_stats_mem_slab.mem_slab_enable" time="0.00" />
		<testcase classname="kernel.obj_core.stats" name="obj_core_stats_mem_block.obj_core_stats_mem_block" time="0.00" />
		<testcase classname="kernel.obj_core.stats" name="obj_core_stats_mem_block.sys_mem_block_disable" time="0.00" />
		<testcase classname="kernel.obj_core.stats" name="obj_core_stats_mem_block.sys_mem_block_enable" time="0.00" />
		<testcase classname="kernel.obj_core.stats" name="obj_core_stats_thread.obj_core_stats_thread_test" time="0.08" />
		<testcase classname="kernel.obj_core.stats" name="obj_core_stats_system.obj_core_stats_kernel_enable" time="0.00" />
		<testcase classname="kernel.obj_core.stats" name="obj_core_stats_system.obj_core_stats_kernel_disable" time="0.00" />
		<testcase classname="kernel.obj_core.stats" name="obj_core_stats_system.obj_core_stats_kernel_reset" time="0.00" />
		<testcase classname="kernel.obj_core.stats" name="obj_core_stats_system.obj_core_stats_cpu_enable" time="0.00" />
		<testcase classname="kernel.obj_core.stats" name="obj_core_stats_system.obj_core_stats_cpu_disable" time="0.00" />
		<testcase classname="kernel.obj_core.stats" name="obj_core_stats_system.obj_core_stats_cpu_reset" time="0.00" />
		<testcase classname="kernel.obj_core.stats" name="obj_core_stats_system.obj_core_stats_system" time="0.00" />
		<testcase classname="kernel.obj_core" name="obj_core.obj_core_sem" time="0.00" />
		<testcase classname="kernel.obj_core" name="obj_core.obj_core_mutex" time="0.00" />
		<testcase classname="kernel.obj_core" name="obj_core.obj_core_event" time="0.00" />
		<testcase classname="kernel.obj_core" name="obj_core.obj_core_condvar" time="0.00" />
		<testcase classname="kernel.obj_core" name="obj_core.obj_core_mbox" time="0.00" />
		<testcase classname="kernel.obj_core" name="obj_core.obj_core_msgq" time="0.00" />
		<testcase classname="kernel.obj_core" name="obj_core.obj_core_pipe" time="0.00" />
		<testcase classname="kernel.obj_core" name="obj_core.obj_core_lifo" time="0.00" />
		<testcase classname="kernel.obj_core" name="obj_core.obj_core_fifo" time="0.00" />
		<testcase classname="kernel.obj_core" name="obj_core.obj_core_stack" time="0.00" />
		<testcase classname="kernel.obj_core" name="obj_core.obj_core_timer" time="0.00" />
		<testcase classname="kernel.obj_core" name="obj_core.obj_core_mem_slab" time="0.00" />
		<testcase classname="kernel.obj_core" name="obj_core.obj_core_sys_mem_block" time="0.00" />
		<testcase classname="kernel.obj_core" name="obj_core.obj_core_system" time="0.00" />
		<testcase classname="kernel.obj_core" name="obj_core.obj_core_thread" time="0.00" />
		<testcase classname="kernel.obj_core.stats.api" name="obj_core_stats_api.obj_core_stats_register" time="0.00" />
		<testcase classname="kernel.obj_core.stats.api" name="obj_core_stats_api.obj_core_stats_dereg" time="0.00" />
		<testcase classname="kernel.obj_core.stats.api" name="obj_core_stats_api.obj_core_stats_raw" time="0.00" />
		<testcase classname="kernel.obj_core.stats.api" name="obj_core_stats_api.obj_core_stats_query" time="0.00" />
		<testcase classname="kernel.obj_core.stats.api" name="obj_core_stats_api.obj_core_stats_reset" time="0.00" />
		<testcase classname="kernel.obj_core.stats.api" name="obj_core_stats_api.obj_core_stats_disable" time="0.00" />
		<testcase classname="kernel.obj_core.stats.api" name="obj_core_stats_api.obj_core_stats_enable" time="0.00" />
		<testcase classname="kernel.workqueue.user" name="workqueue_api.workq_user_mode" time="5.24" />
		<testcase classname="kernel.workqueue" name="workqueue_triggered.triggered_cancel" time="0.00" />
		<testcase classname="kernel.workqueue" name="workqueue_triggered.delayed_work_define" time="0.00" />
		<testcase classname="kernel.workqueue" name="workqueue_triggered.triggered_from_msgq" time="0.00" />
		<testcase classname="kernel.workqueue" name="workqueue_triggered.triggered_wait_expired" time="0.15" />
		<testcase classname="kernel.workqueue" name="workqueue_triggered.triggered_wait" time="0.05" />
		<testcase classname="kernel.workqueue" name="workqueue_triggered.triggered_no_wait_expired" time="0.10" />
		<testcase classname="kernel.workqueue" name="workqueue_triggered.triggered_no_wait" time="0.10" />
		<testcase classname="kernel.workqueue" name="workqueue_triggered.triggered_resubmit" time="0.60" />
		<testcase classname="kernel.workqueue" name="workqueue_triggered.already_triggered" time="0.10" />
		<testcase classname="kernel.workqueue" name="workqueue_triggered.triggered" time="0.10" />
		<testcase classname="kernel.workqueue" name="workqueue_delayed.delayed" time="0.70" />
		<testcase classname="kernel.workqueue" name="workqueue_delayed.delayed_pending" time="0.10" />
		<testcase classname="kernel.workqueue" name="workqueue_delayed.delayed_cancel" time="0.10" />
		<testcase classname="kernel.workqueue" name="workqueue_triggered.resubmit" time="0.70" />
		<testcase classname="kernel.workqueue" name="workqueue_api.k_work_queue_run_stop" time="2.20" />
		<testcase classname="kernel.workqueue" name="workqueue_api.k_work_queue_start_stop" time="1.10" />
		<testcase classname="kernel.workqueue" name="workqueue_work_timeout.work" time="0.50" />
		<testcase classname="kernel.workqueue.work_timeout" name="workqueue_triggered.triggered_cancel" time="0.00" />
		<testcase classname="kernel.workqueue.work_timeout" name="workqueue_triggered.delayed_work_define" time="0.00" />
		<testcase classname="kernel.workqueue.work_timeout" name="workqueue_triggered.triggered_from_msgq" time="0.00" />
		<testcase classname="kernel.workqueue.work_timeout" name="workqueue_triggered.triggered_wait_expired" time="0.15" />
		<testcase classname="kernel.workqueue.work_timeout" name="workqueue_triggered.triggered_wait" time="0.05" />
		<testcase classname="kernel.workqueue.work_timeout" name="workqueue_triggered.triggered_no_wait_expired" time="0.10" />
		<testcase classname="kernel.workqueue.work_timeout" name="workqueue_triggered.triggered_no_wait" time="0.10" />
		<testcase classname="kernel.workqueue.work_timeout" name="workqueue_triggered.triggered_resubmit" time="0.60" />
		<testcase classname="kernel.workqueue.work_timeout" name="workqueue_triggered.already_triggered" time="0.10" />
		<testcase classname="kernel.workqueue.work_timeout" name="workqueue_triggered.triggered" time="0.10" />
		<testcase classname="kernel.workqueue.work_timeout" name="workqueue_delayed.delayed" time="0.70" />
		<testcase classname="kernel.workqueue.work_timeout" name="workqueue_delayed.delayed_pending" time="0.10" />
		<testcase classname="kernel.workqueue.work_timeout" name="workqueue_delayed.delayed_cancel" time="0.10" />
		<testcase classname="kernel.workqueue.work_timeout" name="workqueue_triggered.resubmit" time="0.70" />
		<testcase classname="kernel.workqueue.work_timeout" name="workqueue_api.k_work_queue_run_stop" time="2.20" />
		<testcase classname="kernel.workqueue.work_timeout" name="workqueue_api.k_work_queue_start_stop" time="1.10" />
		<testcase classname="kernel.workqueue.work_timeout" name="workqueue_work_timeout.work" time="0.41" />
		<testcase classname="kernel.workqueue.critical" name="kernel_offload_wq.offload_workqueue" time="4.01" />
		<testcase classname="kernel.workqueue.api" name="work.nop" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="kernel.workqueue.api" name="work_1cpu.1cpu_system_reschedule" time="0.10" />
		<testcase classname="kernel.workqueue.api" name="work_1cpu.1cpu_system_schedule" time="0.10" />
		<testcase classname="kernel.workqueue.api" name="work_1cpu.1cpu_system_queue" time="0.00" />
		<testcase classname="kernel.workqueue.api" name="work_1cpu.1cpu_queue_no_yield" time="0.01" />
		<testcase classname="kernel.workqueue.api" name="work_1cpu.1cpu_immed_reschedule" time="0.40" />
		<testcase classname="kernel.workqueue.api" name="work_1cpu.1cpu_basic_reschedule" time="0.10" />
		<testcase classname="kernel.workqueue.api" name="work_1cpu.1cpu_immed_schedule" time="0.00" />
		<testcase classname="kernel.workqueue.api" name="work_1cpu.1cpu_basic_schedule_running" time="0.20" />
		<testcase classname="kernel.workqueue.api" name="work_1cpu.1cpu_basic_schedule" time="0.10" />
		<testcase classname="kernel.workqueue.api" name="work_1cpu.1cpu_plugged_drain" time="0.10" />
		<testcase classname="kernel.workqueue.api" name="work_1cpu.1cpu_drain_wait" time="0.20" />
		<testcase classname="kernel.workqueue.api" name="work.drain_empty" time="0.00" />
		<testcase classname="kernel.workqueue.api" name="work.smp_running_cancel" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="kernel.workqueue.api" name="work_1cpu.1cpu_running_cancel_sync" time="0.02" />
		<testcase classname="kernel.workqueue.api" name="work_1cpu.1cpu_running_cancel" time="0.01" />
		<testcase classname="kernel.workqueue.api" name="work_1cpu.1cpu_delayed_cancel_sync_wait" time="0.00" />
		<testcase classname="kernel.workqueue.api" name="work_1cpu.1cpu_delayed_cancel_sync" time="0.00" />
		<testcase classname="kernel.workqueue.api" name="work_1cpu.1cpu_delayed_cancel" time="0.00" />
		<testcase classname="kernel.workqueue.api" name="work_1cpu.1cpu_queued_cancel_sync" time="0.00" />
		<testcase classname="kernel.workqueue.api" name="work_1cpu.1cpu_queued_cancel" time="0.00" />
		<testcase classname="kernel.workqueue.api" name="work_1cpu.1cpu_delayed_flush" time="0.00" />
		<testcase classname="kernel.workqueue.api" name="work_1cpu.1cpu_running_flush" time="0.10" />
		<testcase classname="kernel.workqueue.api" name="work_1cpu.1cpu_queued_flush" time="0.20" />
		<testcase classname="kernel.workqueue.api" name="work_1cpu.1cpu_reentrant_queue" time="0.00" />
		<testcase classname="kernel.workqueue.api" name="work_1cpu.1cpu_sync_queue" time="0.00" />
		<testcase classname="kernel.workqueue.api" name="work.smp_simple_queue" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="kernel.workqueue.api" name="work_1cpu.1cpu_simple_queue" time="0.00" />
		<testcase classname="kernel.workqueue.api" name="work.null_queue" time="0.00" />
		<testcase classname="kernel.workqueue.api" name="work.unstarted" time="0.00" />
		<testcase classname="kernel.context" name="context_one_cpu.thread" time="0.00" />
		<testcase classname="kernel.context" name="context_one_cpu.k_yield" time="0.00" />
		<testcase classname="kernel.context" name="context_one_cpu.k_sleep" time="5.33" />
		<testcase classname="kernel.context" name="context_one_cpu.busy_wait" time="0.04" />
		<testcase classname="kernel.context" name="context.ctx_thread" time="0.01" />
		<testcase classname="kernel.context" name="context_one_cpu.timer_interrupts" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="kernel.context" name="context.interrupts" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="kernel.context" name="context_cpu_idle.cpu_idle" time="0.05" />
		<testcase classname="kernel.context" name="context_cpu_idle.cpu_idle_atomic" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="kernel.context.minimallibc" name="context_one_cpu.thread" time="0.00" />
		<testcase classname="kernel.context.minimallibc" name="context_one_cpu.k_yield" time="0.00" />
		<testcase classname="kernel.context.minimallibc" name="context_one_cpu.k_sleep" time="5.33" />
		<testcase classname="kernel.context.minimallibc" name="context_one_cpu.busy_wait" time="0.04" />
		<testcase classname="kernel.context.minimallibc" name="context.ctx_thread" time="0.01" />
		<testcase classname="kernel.context.minimallibc" name="context_one_cpu.timer_interrupts" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="kernel.context.minimallibc" name="context.interrupts" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="kernel.context.minimallibc" name="context_cpu_idle.cpu_idle" time="0.05" />
		<testcase classname="kernel.context.minimallibc" name="context_cpu_idle.cpu_idle_atomic" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="kernel.common" name="byteorder.sys_put_le16" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="byteorder.sys_get_le16" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="clock.clock_uptime" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="bitarray.bitarray_region_set_clear" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="byteorder.sys_get_le64" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="byteorder.sys_put_le" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="byteorder.sys_put_le48" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="byteorder.sys_put_be16" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="bitfield.bitfield" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="bitarray.bitarray_declare" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="byteorder.sys_get_be40" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="byteorder.sys_get_be32" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="common_1cpu.timeout_order" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="byteorder.sys_get_be16" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="byteorder.sys_uint64_to_array" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="common.bounds_check_mitigation" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="multilib.multilib" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="clock.clock_cycle_32" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="atomic.threads_access_atomic" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="byteorder.sys_put_be48" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="byteorder.sys_put_le64" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="byteorder.sys_get_le" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="byteorder.sys_get_le40" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="constructor.constructor" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="byteorder.sys_put_be40" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="irq_offload.irq_offload" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="byteorder.sys_put_be64" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="byteorder.byteorder_mem_swap" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="byteorder.sys_uint32_to_array" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="bitarray.bitarray_popcount_region" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="bitarray.ffs" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="byteorder.sys_get_le32" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="common_errno.errno" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="byteorder.sys_put_le24" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="bitarray.bitarray_find_nth_set" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="byteorder.sys_get_be" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="byteorder.sys_cpu_to_le" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="byteorder.sys_cpu_to_be" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="byteorder.sys_get_le24" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="common.version" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="atomic.atomic" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="byteorder.sys_get_be48" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="byteorder.sys_get_le48" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="bitarray.bitarray_set_clear" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="byteorder.sys_put_le32" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="byteorder.sys_get_be24" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="byteorder.sys_le_to_cpu" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="atomic.atomic_overflow" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="byteorder.sys_put_be24" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="bitarray.bitarray_alloc_free" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="clock.clock_cycle_64" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="clock.ms_time_duration" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="byteorder.sys_be_to_cpu" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="common_1cpu.nested_irq_offload" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="common_errno.thread_context" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="byteorder.sys_put_le40" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="byteorder.byteorder_memcpy_swap" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="byteorder.sys_uint16_to_array" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="printk.printk" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="boot_delay.bootdelay" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="pow2.pow2_ceil" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="bitarray.bitarray_xor" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="byteorder.sys_put_be" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="byteorder.sys_put_be32" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common" name="byteorder.sys_get_be64" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="byteorder.sys_put_le16" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="byteorder.sys_get_le16" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="clock.clock_uptime" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="bitarray.bitarray_region_set_clear" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="byteorder.sys_get_le64" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="byteorder.sys_put_le" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="byteorder.sys_put_le48" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="byteorder.sys_put_be16" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="bitfield.bitfield" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="bitarray.bitarray_declare" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="byteorder.sys_get_be40" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="byteorder.sys_get_be32" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="common_1cpu.timeout_order" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="byteorder.sys_get_be16" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="byteorder.sys_uint64_to_array" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="common.bounds_check_mitigation" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="multilib.multilib" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="clock.clock_cycle_32" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="atomic.threads_access_atomic" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="byteorder.sys_put_be48" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="byteorder.sys_put_le64" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="byteorder.sys_get_le" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="byteorder.sys_get_le40" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="constructor.constructor" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="byteorder.sys_put_be40" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="irq_offload.irq_offload" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="byteorder.sys_put_be64" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="byteorder.byteorder_mem_swap" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="byteorder.sys_uint32_to_array" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="bitarray.bitarray_popcount_region" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="bitarray.ffs" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="byteorder.sys_get_le32" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="common_errno.errno" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="byteorder.sys_put_le24" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="bitarray.bitarray_find_nth_set" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="byteorder.sys_get_be" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="byteorder.sys_cpu_to_le" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="byteorder.sys_cpu_to_be" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="byteorder.sys_get_le24" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="common.version" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="atomic.atomic" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="byteorder.sys_get_be48" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="byteorder.sys_get_le48" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="bitarray.bitarray_set_clear" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="byteorder.sys_put_le32" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="byteorder.sys_get_be24" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="byteorder.sys_le_to_cpu" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="atomic.atomic_overflow" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="byteorder.sys_put_be24" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="bitarray.bitarray_alloc_free" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="clock.clock_cycle_64" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="clock.ms_time_duration" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="byteorder.sys_be_to_cpu" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="common_1cpu.nested_irq_offload" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="common_errno.thread_context" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="byteorder.sys_put_le40" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="byteorder.byteorder_memcpy_swap" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="byteorder.sys_uint16_to_array" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="printk.printk" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="boot_delay.bootdelay" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="pow2.pow2_ceil" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="bitarray.bitarray_xor" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="byteorder.sys_put_be" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="byteorder.sys_put_be32" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.common.tls" name="byteorder.sys_get_be64" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="kernel.stack.usage" name="stack_usage.stack_pop_can_wait" time="0.00" />
		<testcase classname="kernel.stack.usage" name="stack_usage_1cpu.isr_stack_play" time="0.00" />
		<testcase classname="kernel.stack.usage" name="stack_usage_1cpu.dual_stack_play" time="0.00" />
		<testcase classname="kernel.stack.usage" name="stack_usage.single_stack_play" time="0.00" />
		<testcase classname="kernel.stack.usage" name="stack_contexts.stack_alloc_null" time="0.00" />
		<testcase classname="kernel.stack.usage" name="stack_contexts.stack_multithread_competition" time="0.06" />
		<testcase classname="kernel.stack.usage" name="stack_contexts.stack_alloc_thread2thread" time="0.00" />
		<testcase classname="kernel.stack.usage" name="stack_contexts.stack_thread2isr" time="0.00" />
		<testcase classname="kernel.stack.usage" name="stack_contexts.stack_user_thread2thread" time="0.00" />
		<testcase classname="kernel.stack.usage" name="stack_contexts.stack_thread2thread" time="0.00" />
		<testcase classname="kernel.stack.usage" name="stack_fail.stack_user_pop_permission" time="0.04" />
		<testcase classname="kernel.stack.usage" name="stack_fail.stack_user_pop_null" time="0.05" />
		<testcase classname="kernel.stack.usage" name="stack_fail.stack_user_push_null" time="0.05" />
		<testcase classname="kernel.stack.usage" name="stack_fail.stack_user_init_invalid_value" time="0.04" />
		<testcase classname="kernel.stack.usage" name="stack_fail.stack_user_init_null" time="0.05" />
		<testcase classname="kernel.stack.usage" name="stack_fail.stack_user_pop_fail" time="0.10" />
		<testcase classname="kernel.stack.usage" name="stack_fail.stack_push_full" time="0.00" />
		<testcase classname="kernel.stack.usage" name="stack_fail.stack_cleanup_error" time="0.50" />
		<testcase classname="kernel.stack.usage" name="stack_fail.stack_pop_fail" time="0.10" />
		<testcase classname="kernel.objects.tracking" name="obj_tracking.obj_tracking_coherence" time="6.74" />
		<testcase classname="kernel.objects.tracking.minimallibc" name="obj_tracking.obj_tracking_coherence" time="6.06" />
		<testcase classname="kernel.usage" name="usage_api.thread_stats_usage" time="0.01" />
		<testcase classname="kernel.usage" name="usage_api.sys_stats_enable_disable" time="0.00" />
		<testcase classname="kernel.usage" name="usage_api.thread_stats_enable_disable" time="0.00" />
		<testcase classname="kernel.usage" name="usage_api.all_stats_usage" time="0.00" />
		<testcase classname="kernel.logging.message_capture" name="kernel.logging.message_capture" time="11.28" />
		<testcase classname="kernel.common.stack_sentinel" name="fatal_exception.fatal" time="5.45" />
		<testcase classname="kernel.k_heap_api" name="k_heap_api.k_heap_realloc_fail" time="0.00" />
		<testcase classname="kernel.k_heap_api" name="k_heap_api.k_heap_realloc_zero" time="0.00" />
		<testcase classname="kernel.k_heap_api" name="k_heap_api.k_heap_realloc_null" time="0.00" />
		<testcase classname="kernel.k_heap_api" name="k_heap_api.k_heap_realloc" time="0.01" />
		<testcase classname="kernel.k_heap_api" name="k_heap_api.k_heap_array_get" time="0.00" />
		<testcase classname="kernel.k_heap_api" name="k_heap_api.k_heap_calloc" time="0.00" />
		<testcase classname="kernel.k_heap_api" name="k_heap_api.k_heap_alloc_pending_null" time="0.20" />
		<testcase classname="kernel.k_heap_api" name="k_heap_api.k_heap_alloc_pending" time="0.01" />
		<testcase classname="kernel.k_heap_api" name="k_heap_api.kheap_alloc_in_isr_nowait" time="0.00" />
		<testcase classname="kernel.k_heap_api" name="k_heap_api.k_heap_free" time="0.00" />
		<testcase classname="kernel.k_heap_api" name="k_heap_api.k_heap_alloc_fail" time="0.00" />
		<testcase classname="kernel.k_heap_api" name="k_heap_api.k_heap_alloc" time="0.00" />
		<testcase classname="kernel.k_heap_api" name="k_heap_api.k_heap_min_size" time="0.00" />
		<testcase classname="kernel.common.sleep" name="earlysleep.early_sleep" time="6.81" />
		<testcase classname="kernel.common.sleep.minimallibc" name="earlysleep.early_sleep" time="7.80" />
		<testcase classname="kernel.semaphore.usage" name="kernel_sys_sem.multi_thread_sem_limit" time="0.10" />
		<testcase classname="kernel.semaphore.usage" name="kernel_sys_sem.multiple_thread_sem_usage" time="0.10" />
		<testcase classname="kernel.semaphore" name="semaphore_null_case.sem_count_get_null" time="0.04" />
		<testcase classname="kernel.semaphore" name="semaphore_null_case.sem_reset_null" time="0.04" />
		<testcase classname="kernel.semaphore" name="semaphore_null_case.sem_take_null" time="0.04" />
		<testcase classname="kernel.semaphore" name="semaphore_null_case.sem_init_null" time="0.04" />
		<testcase classname="kernel.semaphore" name="semaphore_null_case.sem_give_null" time="0.04" />
		<testcase classname="kernel.semaphore" name="semaphore_1cpu.sem_queue_mutual_exclusion" time="0.19" />
		<testcase classname="kernel.semaphore" name="semaphore.sem_multi_take_timeout_diff_sem" time="5.00" />
		<testcase classname="kernel.semaphore" name="semaphore_1cpu.sem_multiple_take_and_timeouts" time="1.25" />
		<testcase classname="kernel.semaphore" name="semaphore.sem_measure_timeout_from_thread" time="0.00" />
		<testcase classname="kernel.semaphore" name="semaphore.sem_measure_timeouts" time="1.00" />
		<testcase classname="kernel.semaphore" name="semaphore.sem_multiple_threads_wait" time="2.00" />
		<testcase classname="kernel.semaphore" name="semaphore.sem_give_take_from_isr" time="0.00" />
		<testcase classname="kernel.semaphore" name="semaphore.k_sem_correct_count_limit" time="0.00" />
		<testcase classname="kernel.semaphore" name="semaphore.sem_take_multiple" time="0.94" />
		<testcase classname="kernel.semaphore" name="semaphore_1cpu.sem_take_timeout_isr" time="0.00" />
		<testcase classname="kernel.semaphore" name="semaphore.sem_take_timeout_forever" time="0.10" />
		<testcase classname="kernel.semaphore" name="semaphore.sem_take_timeout" time="0.00" />
		<testcase classname="kernel.semaphore" name="semaphore.sem_take_timeout_fails" time="0.50" />
		<testcase classname="kernel.semaphore" name="semaphore.sem_take_no_wait_fails" time="0.00" />
		<testcase classname="kernel.semaphore" name="semaphore.sem_take_no_wait" time="0.00" />
		<testcase classname="kernel.semaphore" name="semaphore.sem_give_from_thread" time="0.00" />
		<testcase classname="kernel.semaphore" name="semaphore.sem_give_from_isr" time="0.00" />
		<testcase classname="kernel.semaphore" name="semaphore.sem_count_get" time="0.00" />
		<testcase classname="kernel.semaphore" name="semaphore.sem_reset_waiting" time="0.00" />
		<testcase classname="kernel.semaphore" name="semaphore.sem_reset" time="0.10" />
		<testcase classname="kernel.semaphore" name="semaphore.k_sem_init" time="0.00" />
		<testcase classname="kernel.semaphore" name="semaphore.sem_thread2isr" time="0.00" />
		<testcase classname="kernel.semaphore" name="semaphore.sem_thread2thread" time="0.00" />
		<testcase classname="kernel.semaphore" name="semaphore.k_sem_define" time="0.00" />
		<testcase classname="kernel.message_queue.usage" name="msgq_usage.msgq_usage" time="5.76" />
		<testcase classname="kernel.message_queue" name="msgq_api.msgq_user_attrs_get" time="0.00" />
		<testcase classname="kernel.message_queue" name="msgq_api.msgq_attrs_get" time="0.00" />
		<testcase classname="kernel.message_queue" name="msgq_api_1cpu.msgq_full" time="0.10" />
		<testcase classname="kernel.message_queue" name="msgq_api_1cpu.msgq_empty" time="0.10" />
		<testcase classname="kernel.message_queue" name="msgq_api.msgq_alloc" time="0.00" />
		<testcase classname="kernel.message_queue" name="msgq_api_1cpu.msgq_pend_thread" time="0.00" />
		<testcase classname="kernel.message_queue" name="msgq_api.msgq_isr" time="0.00" />
		<testcase classname="kernel.message_queue" name="msgq_api.msgq_user_thread_overflow" time="0.00" />
		<testcase classname="kernel.message_queue" name="msgq_api.msgq_user_thread" time="0.00" />
		<testcase classname="kernel.message_queue" name="msgq_api.msgq_thread_overflow" time="0.00" />
		<testcase classname="kernel.message_queue" name="msgq_api_1cpu.msgq_thread" time="0.00" />
		<testcase classname="kernel.message_queue" name="msgq_api.msgq_user_get_fail" time="0.10" />
		<testcase classname="kernel.message_queue" name="msgq_api_1cpu.msgq_get_fail" time="0.10" />
		<testcase classname="kernel.message_queue" name="msgq_api.msgq_user_put_fail" time="0.10" />
		<testcase classname="kernel.message_queue" name="msgq_api_1cpu.msgq_put_fail" time="0.10" />
		<testcase classname="kernel.message_queue" name="msgq_api.msgq_user_purge_when_put" time="0.05" />
		<testcase classname="kernel.message_queue" name="msgq_api_1cpu.msgq_purge_when_put" time="0.05" />
		<testcase classname="kernel.pending" name="pending.pending_timer" time="2.00" />
		<testcase classname="kernel.pending" name="pending.pending_lifo" time="2.01" />
		<testcase classname="kernel.pending" name="pending.pending_fifo" time="2.01" />
		<testcase classname="kernel.pending.minimallibc" name="pending.pending_timer" time="2.00" />
		<testcase classname="kernel.pending.minimallibc" name="pending.pending_lifo" time="2.01" />
		<testcase classname="kernel.pending.minimallibc" name="pending.pending_fifo" time="2.01" />
		<testcase classname="kernel.memory_slabs.stats" name="lib_mem_slab_stats_test.mem_slab_runtime_stats" time="0.00" />
		<testcase classname="kernel.memory_slabs.stats" name="lib_mem_slab_stats_test.mem_slab_stats_invalid_params" time="0.00" />
		<testcase classname="kernel.memory_slabs.concept" name="mslab_concept.mslab_alloc_wait_prio" time="7.05" />
		<testcase classname="kernel.memory_slabs.api" name="mslab_api.mslab_pending" time="0.02" />
		<testcase classname="kernel.memory_slabs.api" name="mslab_api.mslab_used_get" time="4.00" />
		<testcase classname="kernel.memory_slabs.api" name="mslab_api.mslab_alloc_timeout" time="2.00" />
		<testcase classname="kernel.memory_slabs.api" name="mslab_api.mslab_alloc_align" time="0.00" />
		<testcase classname="kernel.memory_slabs.api" name="mslab_api.mslab_alloc_free_thread" time="0.00" />
		<testcase classname="kernel.memory_slabs.api" name="mslab_api.mslab_kdefine" time="0.00" />
		<testcase classname="kernel.memory_slabs.api" name="mslab_api.mslab_kinit" time="0.00" />
		<testcase classname="kernel.memory_slabs.api" name="mslab_api.mslab_kdefine_extern" time="0.00" />
		<testcase classname="kernel.memory_slabs.threadsafe" name="mslab_threadsafe.mslab_threadsafe" time="7.21" />
		<testcase classname="kernel.memory_slabs" name="memory_slab_1cpu.mslab" time="6.53" />
		<testcase classname="kernel.device" name="device.deinit_success_and_redeinit" time="0.00" />
		<testcase classname="kernel.device" name="device.deinit_not_supported" time="0.00" />
		<testcase classname="kernel.device" name="device.deferred_init_user" time="0.00" />
		<testcase classname="kernel.device" name="device.device_api" time="0.00" />
		<testcase classname="kernel.device" name="device.deferred_init" time="0.00" />
		<testcase classname="kernel.device" name="device.abstraction_driver_common" time="0.00" />
		<testcase classname="kernel.device" name="device.device_init_sub_priority" time="0.00" />
		<testcase classname="kernel.device" name="device.device_init_priority" time="0.00" />
		<testcase classname="kernel.device" name="device.device_init_level" time="0.00" />
		<testcase classname="kernel.device" name="device.sys_init_multiple" time="0.00" />
		<testcase classname="kernel.device" name="device.device_list" time="0.00" />
		<testcase classname="kernel.device" name="device.pre_kernel_detection" time="0.00" />
		<testcase classname="kernel.device" name="device.null_dynamic_name" time="0.00" />
		<testcase classname="kernel.device" name="device.bogus_dynamic_name" time="0.00" />
		<testcase classname="kernel.device" name="device.dynamic_name" time="0.00" />
		<testcase classname="kernel.device" name="device.dummy_device" time="0.00" />
		<testcase classname="kernel.device" name="device.mmio_device_map" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="kernel.device" name="device.mmio_toplevel" time="0.00" />
		<testcase classname="kernel.device" name="device.mmio_multiple" time="0.00" />
		<testcase classname="kernel.device" name="device.mmio_single" time="0.00" />
		<testcase classname="kernel.device" name="device.mmio_multireg" time="0.00" />
		<testcase classname="kernel.device.minimallibc" name="device.deinit_success_and_redeinit" time="0.00" />
		<testcase classname="kernel.device.minimallibc" name="device.deinit_not_supported" time="0.00" />
		<testcase classname="kernel.device.minimallibc" name="device.deferred_init_user" time="0.00" />
		<testcase classname="kernel.device.minimallibc" name="device.device_api" time="0.00" />
		<testcase classname="kernel.device.minimallibc" name="device.deferred_init" time="0.00" />
		<testcase classname="kernel.device.minimallibc" name="device.abstraction_driver_common" time="0.00" />
		<testcase classname="kernel.device.minimallibc" name="device.device_init_sub_priority" time="0.00" />
		<testcase classname="kernel.device.minimallibc" name="device.device_init_priority" time="0.00" />
		<testcase classname="kernel.device.minimallibc" name="device.device_init_level" time="0.00" />
		<testcase classname="kernel.device.minimallibc" name="device.sys_init_multiple" time="0.00" />
		<testcase classname="kernel.device.minimallibc" name="device.device_list" time="0.00" />
		<testcase classname="kernel.device.minimallibc" name="device.pre_kernel_detection" time="0.00" />
		<testcase classname="kernel.device.minimallibc" name="device.null_dynamic_name" time="0.00" />
		<testcase classname="kernel.device.minimallibc" name="device.bogus_dynamic_name" time="0.00" />
		<testcase classname="kernel.device.minimallibc" name="device.dynamic_name" time="0.00" />
		<testcase classname="kernel.device.minimallibc" name="device.dummy_device" time="0.00" />
		<testcase classname="kernel.device.minimallibc" name="device.mmio_device_map" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="kernel.device.minimallibc" name="device.mmio_toplevel" time="0.00" />
		<testcase classname="kernel.device.minimallibc" name="device.mmio_multiple" time="0.00" />
		<testcase classname="kernel.device.minimallibc" name="device.mmio_single" time="0.00" />
		<testcase classname="kernel.device.minimallibc" name="device.mmio_multireg" time="0.00" />
		<testcase classname="kernel.device.pm" name="device.deinit_success_and_redeinit" time="0.00" />
		<testcase classname="kernel.device.pm" name="device.deinit_not_supported" time="0.00" />
		<testcase classname="kernel.device.pm" name="device.deferred_init_user" time="0.00" />
		<testcase classname="kernel.device.pm" name="device.device_api" time="0.00" />
		<testcase classname="kernel.device.pm" name="device.deferred_init" time="0.00" />
		<testcase classname="kernel.device.pm" name="device.abstraction_driver_common" time="0.00" />
		<testcase classname="kernel.device.pm" name="device.device_init_sub_priority" time="0.00" />
		<testcase classname="kernel.device.pm" name="device.device_init_priority" time="0.00" />
		<testcase classname="kernel.device.pm" name="device.device_init_level" time="0.00" />
		<testcase classname="kernel.device.pm" name="device.sys_init_multiple" time="0.00" />
		<testcase classname="kernel.device.pm" name="device.device_list" time="0.00" />
		<testcase classname="kernel.device.pm" name="device.pre_kernel_detection" time="0.00" />
		<testcase classname="kernel.device.pm" name="device.null_dynamic_name" time="0.00" />
		<testcase classname="kernel.device.pm" name="device.bogus_dynamic_name" time="0.00" />
		<testcase classname="kernel.device.pm" name="device.dynamic_name" time="0.00" />
		<testcase classname="kernel.device.pm" name="device.dummy_device" time="0.00" />
		<testcase classname="kernel.device.pm" name="device.mmio_device_map" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="kernel.device.pm" name="device.mmio_toplevel" time="0.00" />
		<testcase classname="kernel.device.pm" name="device.mmio_multiple" time="0.00" />
		<testcase classname="kernel.device.pm" name="device.mmio_single" time="0.00" />
		<testcase classname="kernel.device.pm" name="device.mmio_multireg" time="0.00" />
		<testcase classname="kernel.mutex.system" name="mutex_complex.user_access" time="0.02" />
		<testcase classname="kernel.mutex.system" name="mutex_complex.supervisor_access" time="0.00" />
		<testcase classname="kernel.mutex.system" name="mutex_complex.mutex" time="7.53" />
		<testcase classname="kernel.mutex.system.nouser" name="mutex_complex.user_access" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="kernel.mutex.system.nouser" name="mutex_complex.supervisor_access" time="0.00" />
		<testcase classname="kernel.mutex.system.nouser" name="mutex_complex.mutex" time="7.52" />
		<testcase classname="kernel.mutex.system.nouser" name="mutex_complex.mutex_multithread_competition" time="0.04" />
		<testcase classname="kernel.mutex.error" name="mutex_api_error.mutex_unlock_invalid_obj" time="0.05" />
		<testcase classname="kernel.mutex.error" name="mutex_api_error.mutex_unlock_null" time="0.05" />
		<testcase classname="kernel.mutex.error" name="mutex_api_error.mutex_lock_invalid_obj" time="0.05" />
		<testcase classname="kernel.mutex.error" name="mutex_api_error.mutex_lock_null" time="0.05" />
		<testcase classname="kernel.mutex.error" name="mutex_api_error.mutex_init_invalid_obj" time="0.05" />
		<testcase classname="kernel.mutex.error" name="mutex_api_error.mutex_init_null" time="0.05" />
		<testcase classname="kernel.mutex" name="mutex_api.complex_inversion" time="0.20" />
		<testcase classname="kernel.mutex" name="mutex_api_1cpu.mutex_timeout_race_during_priority_inversion" time="0.01" />
		<testcase classname="kernel.mutex" name="mutex_api_1cpu.mutex_priority_inheritance" time="6.00" />
		<testcase classname="kernel.mutex" name="mutex_api.mutex_recursive" time="0.00" />
		<testcase classname="kernel.mutex" name="mutex_api_1cpu.mutex_lock_unlock" time="0.00" />
		<testcase classname="kernel.mutex" name="mutex_api_1cpu.mutex_reent_lock_timeout_pass" time="2.01" />
		<testcase classname="kernel.mutex" name="mutex_api.mutex_reent_lock_timeout_fail" time="2.01" />
		<testcase classname="kernel.mutex" name="mutex_api.mutex_reent_lock_no_wait" time="1.01" />
		<testcase classname="kernel.mutex" name="mutex_api_1cpu.mutex_reent_lock_forever" time="1.01" />
		<testcase classname="kernel.mutex.scalable" name="mutex_api.complex_inversion" time="0.20" />
		<testcase classname="kernel.mutex.scalable" name="mutex_api_1cpu.mutex_timeout_race_during_priority_inversion" time="0.01" />
		<testcase classname="kernel.mutex.scalable" name="mutex_api_1cpu.mutex_priority_inheritance" time="6.00" />
		<testcase classname="kernel.mutex.scalable" name="mutex_api.mutex_recursive" time="0.00" />
		<testcase classname="kernel.mutex.scalable" name="mutex_api_1cpu.mutex_lock_unlock" time="0.00" />
		<testcase classname="kernel.mutex.scalable" name="mutex_api_1cpu.mutex_reent_lock_timeout_pass" time="2.01" />
		<testcase classname="kernel.mutex.scalable" name="mutex_api.mutex_reent_lock_timeout_fail" time="2.01" />
		<testcase classname="kernel.mutex.scalable" name="mutex_api.mutex_reent_lock_no_wait" time="1.01" />
		<testcase classname="kernel.mutex.scalable" name="mutex_api_1cpu.mutex_reent_lock_forever" time="1.01" />
		<testcase classname="linker.iterable_sections" name="iterable_sections.rom" time="0.00" />
		<testcase classname="linker.iterable_sections" name="iterable_sections.ram" time="0.00" />
		<testcase classname="printk.format" name="printk.format" time="6.52" />
		<testcase classname="printk.format_newlib" name="printk.format_newlib" time="6.00" />
		<testcase classname="printk.format.picolibc" name="printk.format.picolibc" time="5.35" />
		<testcase classname="kconfig.functions" name="test_kconfig_functions.dt_num_compat_enabled" time="0.00" />
		<testcase classname="kconfig.functions" name="test_kconfig_functions.min_max" time="0.00" />
		<testcase classname="kconfig.functions" name="test_kconfig_functions.arithmetic" time="0.00" />
		<testcase classname="kconfig.configdefault" name="test_configdefault.expectedvalues" time="7.64" />
		<testcase classname="integration.kernel" name="kernel.mutex_usage" time="0.21" />
		<testcase classname="integration.kernel" name="kernel.stack_usage" time="0.00" />
		<testcase classname="integration.kernel" name="kernel.lifo_usage" time="0.00" />
		<testcase classname="integration.kernel" name="kernel.fifo_usage" time="0.00" />
		<testcase classname="net.mqtt_sn.packet" name="mqtt_sn_packet.mqtt_packet_encode" time="0.24" />
		<testcase classname="net.mqtt_sn.packet" name="mqtt_sn_packet.mqtt_packet_decode" time="0.16" />
		<testcase classname="net.socket.can" name="socket_can.can_filter_to_socketcan_filter" time="0.00" />
		<testcase classname="net.socket.can" name="socket_can.socketcan_filter_to_can_filter" time="0.00" />
		<testcase classname="net.socket.can" name="socket_can.can_frame_to_socketcan_frame" time="0.00" />
		<testcase classname="net.socket.can" name="socket_can.socketcan_frame_to_can_frame" time="0.00" />
		<testcase classname="libraries.libc.minimal.mem_alloc" name="c_lib_dynamic_memalloc.memalloc_max" time="0.00" />
		<testcase classname="libraries.libc.minimal.mem_alloc" name="c_lib_dynamic_memalloc.memalloc_all" time="0.00" />
		<testcase classname="libraries.libc.minimal.mem_alloc" name="c_lib_dynamic_memalloc.reallocarray" time="0.00" />
		<testcase classname="libraries.libc.minimal.mem_alloc" name="c_lib_dynamic_memalloc.calloc" time="0.00" />
		<testcase classname="libraries.libc.minimal.mem_alloc" name="c_lib_dynamic_memalloc.realloc" time="0.00" />
		<testcase classname="libraries.libc.minimal.mem_alloc" name="c_lib_dynamic_memalloc.free" time="0.00" />
		<testcase classname="libraries.libc.minimal.mem_alloc" name="c_lib_dynamic_memalloc.malloc" time="0.00" />
		<testcase classname="libraries.libc.minimal.mem_alloc" name="c_lib_dynamic_memalloc.malloc_align" time="0.14" />
		<testcase classname="libraries.libc.minimal.mem_alloc_negative_testing" name="c_lib_dynamic_memalloc.no_mem_realloc" time="0.01" />
		<testcase classname="libraries.libc.minimal.mem_alloc_negative_testing" name="c_lib_dynamic_memalloc.no_mem_malloc" time="0.01" />
		<testcase classname="libraries.libc.newlib.mem_alloc" name="c_lib_dynamic_memalloc.memalloc_max" time="0">
			<skipped type="skipped" message="Quarantine: NA" />
		</testcase>
		<testcase classname="libraries.libc.newlib.mem_alloc" name="c_lib_dynamic_memalloc.malloc" time="0">
			<skipped type="skipped" message="Quarantine: NA" />
		</testcase>
		<testcase classname="libraries.libc.newlib.mem_alloc" name="c_lib_dynamic_memalloc.realloc" time="0">
			<skipped type="skipped" message="Quarantine: NA" />
		</testcase>
		<testcase classname="libraries.libc.newlib.mem_alloc" name="c_lib_dynamic_memalloc.malloc_align" time="0">
			<skipped type="skipped" message="Quarantine: NA" />
		</testcase>
		<testcase classname="libraries.libc.newlib.mem_alloc" name="c_lib_dynamic_memalloc.reallocarray" time="0">
			<skipped type="skipped" message="Quarantine: NA" />
		</testcase>
		<testcase classname="libraries.libc.newlib.mem_alloc" name="c_lib_dynamic_memalloc.free" time="0">
			<skipped type="skipped" message="Quarantine: NA" />
		</testcase>
		<testcase classname="libraries.libc.newlib.mem_alloc" name="c_lib_dynamic_memalloc.memalloc_all" time="0">
			<skipped type="skipped" message="Quarantine: NA" />
		</testcase>
		<testcase classname="libraries.libc.newlib.mem_alloc" name="c_lib_dynamic_memalloc.no_mem_realloc" time="0">
			<skipped type="skipped" message="Quarantine: NA" />
		</testcase>
		<testcase classname="libraries.libc.newlib.mem_alloc" name="c_lib_dynamic_memalloc.no_mem_malloc" time="0">
			<skipped type="skipped" message="Quarantine: NA" />
		</testcase>
		<testcase classname="libraries.libc.newlib.mem_alloc" name="c_lib_dynamic_memalloc.calloc" time="0">
			<skipped type="skipped" message="Quarantine: NA" />
		</testcase>
		<testcase classname="libraries.libc.newlib_nano.mem_alloc" name="c_lib_dynamic_memalloc.memalloc_max" time="0.00" />
		<testcase classname="libraries.libc.newlib_nano.mem_alloc" name="c_lib_dynamic_memalloc.memalloc_all" time="0.00" />
		<testcase classname="libraries.libc.newlib_nano.mem_alloc" name="c_lib_dynamic_memalloc.calloc" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="libraries.libc.newlib_nano.mem_alloc" name="c_lib_dynamic_memalloc.reallocarray" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="libraries.libc.newlib_nano.mem_alloc" name="c_lib_dynamic_memalloc.realloc" time="0.00" />
		<testcase classname="libraries.libc.newlib_nano.mem_alloc" name="c_lib_dynamic_memalloc.free" time="0.00" />
		<testcase classname="libraries.libc.newlib_nano.mem_alloc" name="c_lib_dynamic_memalloc.malloc" time="0.00" />
		<testcase classname="libraries.libc.newlib_nano.mem_alloc" name="c_lib_dynamic_memalloc.malloc_align" time="0.09" />
		<testcase classname="libraries.libc.picolibc.mem_alloc" name="c_lib_dynamic_memalloc.memalloc_max" time="0">
			<skipped type="skipped" message="Quarantine: NA" />
		</testcase>
		<testcase classname="libraries.libc.picolibc.mem_alloc" name="c_lib_dynamic_memalloc.malloc" time="0">
			<skipped type="skipped" message="Quarantine: NA" />
		</testcase>
		<testcase classname="libraries.libc.picolibc.mem_alloc" name="c_lib_dynamic_memalloc.realloc" time="0">
			<skipped type="skipped" message="Quarantine: NA" />
		</testcase>
		<testcase classname="libraries.libc.picolibc.mem_alloc" name="c_lib_dynamic_memalloc.malloc_align" time="0">
			<skipped type="skipped" message="Quarantine: NA" />
		</testcase>
		<testcase classname="libraries.libc.picolibc.mem_alloc" name="c_lib_dynamic_memalloc.reallocarray" time="0">
			<skipped type="skipped" message="Quarantine: NA" />
		</testcase>
		<testcase classname="libraries.libc.picolibc.mem_alloc" name="c_lib_dynamic_memalloc.free" time="0">
			<skipped type="skipped" message="Quarantine: NA" />
		</testcase>
		<testcase classname="libraries.libc.picolibc.mem_alloc" name="c_lib_dynamic_memalloc.memalloc_all" time="0">
			<skipped type="skipped" message="Quarantine: NA" />
		</testcase>
		<testcase classname="libraries.libc.picolibc.mem_alloc" name="c_lib_dynamic_memalloc.no_mem_realloc" time="0">
			<skipped type="skipped" message="Quarantine: NA" />
		</testcase>
		<testcase classname="libraries.libc.picolibc.mem_alloc" name="c_lib_dynamic_memalloc.no_mem_malloc" time="0">
			<skipped type="skipped" message="Quarantine: NA" />
		</testcase>
		<testcase classname="libraries.libc.picolibc.mem_alloc" name="c_lib_dynamic_memalloc.calloc" time="0">
			<skipped type="skipped" message="Quarantine: NA" />
		</testcase>
		<testcase classname="libraries.p4wq" name="lib_p4wq_1cpu.p4wq_simple" time="0.01" />
		<testcase classname="libraries.p4wq" name="lib_p4wq.resubmit" time="0.10" />
		<testcase classname="libraries.p4wq" name="lib_p4wq.fill_queue" time="0.00" />
		<testcase classname="libraries.p4wq" name="lib_p4wq.stress" time="0.11" />
		<testcase classname="libraries.linear_range" name="linear_range.linear_range_get_win_index" time="0.00" />
		<testcase classname="libraries.linear_range" name="linear_range.linear_range_get_index" time="0.00" />
		<testcase classname="libraries.linear_range" name="linear_range.linear_range_get_value" time="0.00" />
		<testcase classname="libraries.linear_range" name="linear_range.linear_range_get_max_value" time="0.00" />
		<testcase classname="libraries.linear_range" name="linear_range.linear_range_values_count" time="0.00" />
		<testcase classname="libraries.linear_range" name="linear_range.linear_range_init" time="0.00" />
		<testcase classname="libraries.hash_map.separate_chaining.djb2" name="hash_map.clear_callback" time="0.00" />
		<testcase classname="libraries.hash_map.separate_chaining.djb2" name="hash_map.clear_no_callback" time="0.00" />
		<testcase classname="libraries.hash_map.separate_chaining.djb2" name="hash_map.empty" time="0.00" />
		<testcase classname="libraries.hash_map.separate_chaining.djb2" name="hash_map.foreach" time="0.00" />
		<testcase classname="libraries.hash_map.separate_chaining.djb2" name="hash_map.get_false" time="0.00" />
		<testcase classname="libraries.hash_map.separate_chaining.djb2" name="hash_map.get_true" time="0.00" />
		<testcase classname="libraries.hash_map.separate_chaining.djb2" name="hash_map.insert_many" time="0.00" />
		<testcase classname="libraries.hash_map.separate_chaining.djb2" name="hash_map.insert_replacement" time="0.00" />
		<testcase classname="libraries.hash_map.separate_chaining.djb2" name="hash_map.insert_no_replacement" time="0.00" />
		<testcase classname="libraries.hash_map.separate_chaining.djb2" name="hash_map.load_factor_custom" time="0.01" />
		<testcase classname="libraries.hash_map.separate_chaining.djb2" name="hash_map.load_factor_default" time="0.01" />
		<testcase classname="libraries.hash_map.separate_chaining.djb2" name="hash_map.remove_false" time="0.00" />
		<testcase classname="libraries.hash_map.separate_chaining.djb2" name="hash_map.remove_true" time="0.01" />
		<testcase classname="libraries.hash_map.separate_chaining.djb2" name="hash_map.size" time="0.00" />
		<testcase classname="libraries.hash_map.open_addressing.djb2" name="hash_map.clear_callback" time="0.00" />
		<testcase classname="libraries.hash_map.open_addressing.djb2" name="hash_map.clear_no_callback" time="0.00" />
		<testcase classname="libraries.hash_map.open_addressing.djb2" name="hash_map.empty" time="0.00" />
		<testcase classname="libraries.hash_map.open_addressing.djb2" name="hash_map.foreach" time="0.00" />
		<testcase classname="libraries.hash_map.open_addressing.djb2" name="hash_map.get_false" time="0.00" />
		<testcase classname="libraries.hash_map.open_addressing.djb2" name="hash_map.get_true" time="0.00" />
		<testcase classname="libraries.hash_map.open_addressing.djb2" name="hash_map.insert_many" time="0.00" />
		<testcase classname="libraries.hash_map.open_addressing.djb2" name="hash_map.insert_replacement" time="0.00" />
		<testcase classname="libraries.hash_map.open_addressing.djb2" name="hash_map.insert_no_replacement" time="0.00" />
		<testcase classname="libraries.hash_map.open_addressing.djb2" name="hash_map.load_factor_custom" time="0.00" />
		<testcase classname="libraries.hash_map.open_addressing.djb2" name="hash_map.load_factor_default" time="0.00" />
		<testcase classname="libraries.hash_map.open_addressing.djb2" name="hash_map.remove_false" time="0.00" />
		<testcase classname="libraries.hash_map.open_addressing.djb2" name="hash_map.remove_true" time="0.00" />
		<testcase classname="libraries.hash_map.open_addressing.djb2" name="hash_map.size" time="0.00" />
		<testcase classname="libraries.hash_map.cxx.djb2" name="hash_map.clear_callback" time="0.00" />
		<testcase classname="libraries.hash_map.cxx.djb2" name="hash_map.clear_no_callback" time="0.00" />
		<testcase classname="libraries.hash_map.cxx.djb2" name="hash_map.empty" time="0.00" />
		<testcase classname="libraries.hash_map.cxx.djb2" name="hash_map.foreach" time="0.00" />
		<testcase classname="libraries.hash_map.cxx.djb2" name="hash_map.get_false" time="0.00" />
		<testcase classname="libraries.hash_map.cxx.djb2" name="hash_map.get_true" time="0.00" />
		<testcase classname="libraries.hash_map.cxx.djb2" name="hash_map.insert_many" time="0.00" />
		<testcase classname="libraries.hash_map.cxx.djb2" name="hash_map.insert_replacement" time="0.00" />
		<testcase classname="libraries.hash_map.cxx.djb2" name="hash_map.insert_no_replacement" time="0.00" />
		<testcase classname="libraries.hash_map.cxx.djb2" name="hash_map.load_factor_custom" time="0.00" />
		<testcase classname="libraries.hash_map.cxx.djb2" name="hash_map.load_factor_default" time="0.00" />
		<testcase classname="libraries.hash_map.cxx.djb2" name="hash_map.remove_false" time="0.00" />
		<testcase classname="libraries.hash_map.cxx.djb2" name="hash_map.remove_true" time="0.00" />
		<testcase classname="libraries.hash_map.cxx.djb2" name="hash_map.size" time="0.00" />
		<testcase classname="libraries.lockfree" name="spsc.spsc_throughput" time="0.47" />
		<testcase classname="libraries.lockfree" name="spsc.spsc_threaded" time="0.00" />
		<testcase classname="libraries.lockfree" name="spsc.int_wrap_around" time="0.00" />
		<testcase classname="libraries.lockfree" name="spsc.produce_consume_wrap_around" time="0.00" />
		<testcase classname="libraries.lockfree" name="spsc.produce_consume_size1" time="0.00" />
		<testcase classname="libraries.lockfree" name="mpsc.mpsc_throughput" time="0.15" />
		<testcase classname="libraries.lockfree" name="mpsc.mpsc_threaded" time="5.42" />
		<testcase classname="libraries.lockfree" name="mpsc.push_pop" time="0.00" />
		<testcase classname="libraries.smf.flat" name="smf_tests.smf_flat" time="4.75" />
		<testcase classname="libraries.smf.hierarchical" name="smf_tests.smf_hierarchical" time="0.00" />
		<testcase classname="libraries.smf.hierarchical" name="smf_tests.smf_hierarchical_5_ancestors" time="0.00" />
		<testcase classname="libraries.smf.initial_transition" name="smf_tests.smf_self_transition" time="6.15" />
		<testcase classname="cpp.main.minimal" name="cxx_tests.new_delete" time="0.00" />
		<testcase classname="cpp.main.minimal" name="cxx_tests.global_static_ctor_dynmem" time="0.00" />
		<testcase classname="cpp.main.minimal" name="cxx_tests.global_static_ctor" time="0.00" />
		<testcase classname="cpp.main.newlib" name="cxx_tests.new_delete" time="0.00" />
		<testcase classname="cpp.main.newlib" name="cxx_tests.global_static_ctor_dynmem" time="0.00" />
		<testcase classname="cpp.main.newlib" name="cxx_tests.global_static_ctor" time="0.00" />
		<testcase classname="cpp.main.newlib_nano" name="cxx_tests.new_delete" time="0.00" />
		<testcase classname="cpp.main.newlib_nano" name="cxx_tests.global_static_ctor_dynmem" time="0.00" />
		<testcase classname="cpp.main.newlib_nano" name="cxx_tests.global_static_ctor" time="0.00" />
		<testcase classname="cpp.main.picolibc" name="cxx_tests.new_delete" time="0.00" />
		<testcase classname="cpp.main.picolibc" name="cxx_tests.global_static_ctor_dynmem" time="0.00" />
		<testcase classname="cpp.main.picolibc" name="cxx_tests.global_static_ctor" time="0.00" />
		<testcase classname="cpp.libcxx.glibcxx.newlib" name="libcxx_tests.vector" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="cpp.libcxx.glibcxx.newlib" name="libcxx_tests.exception" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="cpp.libcxx.glibcxx.newlib" name="libcxx_tests.new_aligned" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="cpp.libcxx.glibcxx.newlib" name="libcxx_tests.make_unique" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="cpp.libcxx.glibcxx.newlib" name="libcxx_tests.array" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="cpp.libcxx.glibcxx.newlib_nano" name="libcxx_tests.vector" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="cpp.libcxx.glibcxx.newlib_nano" name="libcxx_tests.exception" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="cpp.libcxx.glibcxx.newlib_nano" name="libcxx_tests.new_aligned" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="cpp.libcxx.glibcxx.newlib_nano" name="libcxx_tests.make_unique" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="cpp.libcxx.glibcxx.newlib_nano" name="libcxx_tests.array" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="cpp.libcxx.glibcxx.picolibc" name="libcxx_tests.vector" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="cpp.libcxx.glibcxx.picolibc" name="libcxx_tests.exception" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="cpp.libcxx.glibcxx.picolibc" name="libcxx_tests.new_aligned" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="cpp.libcxx.glibcxx.picolibc" name="libcxx_tests.make_unique" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="cpp.libcxx.glibcxx.picolibc" name="libcxx_tests.array" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="libraries.heap_align" name="lib_heap_align.aligned_alloc" time="10.63" />
		<testcase classname="libraries.libc.strerror.minimal.strerror_table" name="libc_strerror.strerror" time="9.34" />
		<testcase classname="libraries.libc.strerror.minimal.no_strerror_table" name="libc_strerror.strerror" time="5.62" />
		<testcase classname="libraries.libc.strerror.newlib" name="libc_strerror.strerror" time="5.46" />
		<testcase classname="libraries.libc.strerror.newlib_nano" name="libc_strerror.strerror" time="5.98" />
		<testcase classname="libraries.libc.strerror.picolibc" name="libc_strerror.strerror" time="5.97" />
		<testcase classname="libraries.libc.strerror.picolibc.module" name="libc_strerror.strerror" time="7.68" />
		<testcase classname="libraries.libc.strerror.picolibc.notls" name="libc_strerror.strerror" time="6.74" />
		<testcase classname="libraries.libc.time" name="libc_time.time_param" time="10.00" />
		<testcase classname="libraries.libc.time" name="libc_time.time_passing" time="10.98" />
		<testcase classname="libraries.libc.common" name="libc_common.exit" time="0.01" />
		<testcase classname="libraries.libc.common" name="libc_common.abort" time="0.03" />
		<testcase classname="libraries.libc.common" name="libc_common.rand_reproducibility" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="libraries.libc.common" name="libc_common.srand" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="libraries.libc.common" name="libc_common.rand" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="libraries.libc.common" name="libc_common.time_ctime" time="0.00" />
		<testcase classname="libraries.libc.common" name="libc_common.time_localtime" time="0.00" />
		<testcase classname="libraries.libc.common" name="libc_common.time_asctime" time="0.00" />
		<testcase classname="libraries.libc.common" name="libc_common.time_gmtime" time="0.00" />
		<testcase classname="libraries.libc.common" name="libc_common.strtok_r" time="0.00" />
		<testcase classname="libraries.libc.common" name="libc_common.tolower_toupper" time="0.00" />
		<testcase classname="libraries.libc.common" name="libc_common.strtoul" time="0.00" />
		<testcase classname="libraries.libc.common" name="libc_common.strtol" time="0.00" />
		<testcase classname="libraries.libc.common" name="libc_common.str_operate" time="0.00" />
		<testcase classname="libraries.libc.common" name="libc_common.memmove" time="0.00" />
		<testcase classname="libraries.libc.common" name="libc_common.memcpy" time="0.00" />
		<testcase classname="libraries.libc.common" name="libc_common.memchr" time="0.00" />
		<testcase classname="libraries.libc.common" name="libc_common.checktype" time="0.00" />
		<testcase classname="libraries.libc.common" name="libc_common.atoi" time="0.00" />
		<testcase classname="libraries.libc.common" name="libc_common.abs" time="0.00" />
		<testcase classname="libraries.libc.common" name="libc_common.bsearch" time="0.00" />
		<testcase classname="libraries.libc.common" name="libc_common.memcmp" time="0.00" />
		<testcase classname="libraries.libc.common" name="libc_common.strxspn" time="0.00" />
		<testcase classname="libraries.libc.common" name="libc_common.strchr" time="0.00" />
		<testcase classname="libraries.libc.common" name="libc_common.strncpy" time="0.00" />
		<testcase classname="libraries.libc.common" name="libc_common.strcpy" time="0.00" />
		<testcase classname="libraries.libc.common" name="libc_common.strncmp" time="0.00" />
		<testcase classname="libraries.libc.common" name="libc_common.strcmp" time="0.00" />
		<testcase classname="libraries.libc.common" name="libc_common.strlen" time="0.00" />
		<testcase classname="libraries.libc.common" name="libc_common.memset" time="0.00" />
		<testcase classname="libraries.libc.common" name="libc_common.time_t" time="0.00" />
		<testcase classname="libraries.libc.common" name="libc_common.stdint" time="0.00" />
		<testcase classname="libraries.libc.common" name="libc_common.stddef" time="0.00" />
		<testcase classname="libraries.libc.common" name="libc_common.stdbool" time="0.00" />
		<testcase classname="libraries.libc.common" name="libc_common.ssize_t" time="0.00" />
		<testcase classname="libraries.libc.common" name="libc_common.limits" time="0.00" />
		<testcase classname="libraries.libc.common" name="libc_common.qsort_r" time="0.00" />
		<testcase classname="libraries.libc.common" name="libc_common.qsort" time="0.00" />
		<testcase classname="libraries.libc.common" name="libc_common.sqrt" time="0.02" />
		<testcase classname="libraries.libc.common" name="libc_common.sqrtf" time="0.01" />
		<testcase classname="libraries.libc.common.minimal" name="libc_common.exit" time="0.01" />
		<testcase classname="libraries.libc.common.minimal" name="libc_common.abort" time="0.03" />
		<testcase classname="libraries.libc.common.minimal" name="libc_common.rand_reproducibility" time="0.00" />
		<testcase classname="libraries.libc.common.minimal" name="libc_common.srand" time="0.00" />
		<testcase classname="libraries.libc.common.minimal" name="libc_common.rand" time="0.00" />
		<testcase classname="libraries.libc.common.minimal" name="libc_common.time_ctime" time="0.00" />
		<testcase classname="libraries.libc.common.minimal" name="libc_common.time_localtime" time="0.00" />
		<testcase classname="libraries.libc.common.minimal" name="libc_common.time_asctime" time="0.00" />
		<testcase classname="libraries.libc.common.minimal" name="libc_common.time_gmtime" time="0.00" />
		<testcase classname="libraries.libc.common.minimal" name="libc_common.strtok_r" time="0.00" />
		<testcase classname="libraries.libc.common.minimal" name="libc_common.tolower_toupper" time="0.00" />
		<testcase classname="libraries.libc.common.minimal" name="libc_common.strtoul" time="0.00" />
		<testcase classname="libraries.libc.common.minimal" name="libc_common.strtol" time="0.00" />
		<testcase classname="libraries.libc.common.minimal" name="libc_common.str_operate" time="0.00" />
		<testcase classname="libraries.libc.common.minimal" name="libc_common.memmove" time="0.00" />
		<testcase classname="libraries.libc.common.minimal" name="libc_common.memcpy" time="0.00" />
		<testcase classname="libraries.libc.common.minimal" name="libc_common.memchr" time="0.00" />
		<testcase classname="libraries.libc.common.minimal" name="libc_common.checktype" time="0.00" />
		<testcase classname="libraries.libc.common.minimal" name="libc_common.atoi" time="0.00" />
		<testcase classname="libraries.libc.common.minimal" name="libc_common.abs" time="0.00" />
		<testcase classname="libraries.libc.common.minimal" name="libc_common.bsearch" time="0.00" />
		<testcase classname="libraries.libc.common.minimal" name="libc_common.memcmp" time="0.00" />
		<testcase classname="libraries.libc.common.minimal" name="libc_common.strxspn" time="0.00" />
		<testcase classname="libraries.libc.common.minimal" name="libc_common.strchr" time="0.00" />
		<testcase classname="libraries.libc.common.minimal" name="libc_common.strncpy" time="0.00" />
		<testcase classname="libraries.libc.common.minimal" name="libc_common.strcpy" time="0.00" />
		<testcase classname="libraries.libc.common.minimal" name="libc_common.strncmp" time="0.00" />
		<testcase classname="libraries.libc.common.minimal" name="libc_common.strcmp" time="0.00" />
		<testcase classname="libraries.libc.common.minimal" name="libc_common.strlen" time="0.00" />
		<testcase classname="libraries.libc.common.minimal" name="libc_common.memset" time="0.00" />
		<testcase classname="libraries.libc.common.minimal" name="libc_common.time_t" time="0.00" />
		<testcase classname="libraries.libc.common.minimal" name="libc_common.stdint" time="0.00" />
		<testcase classname="libraries.libc.common.minimal" name="libc_common.stddef" time="0.00" />
		<testcase classname="libraries.libc.common.minimal" name="libc_common.stdbool" time="0.00" />
		<testcase classname="libraries.libc.common.minimal" name="libc_common.ssize_t" time="0.00" />
		<testcase classname="libraries.libc.common.minimal" name="libc_common.limits" time="0.00" />
		<testcase classname="libraries.libc.common.minimal" name="libc_common.qsort_r" time="0.00" />
		<testcase classname="libraries.libc.common.minimal" name="libc_common.qsort" time="0.00" />
		<testcase classname="libraries.libc.common.minimal" name="libc_common.sqrt" time="0.06" />
		<testcase classname="libraries.libc.common.minimal" name="libc_common.sqrtf" time="0.03" />
		<testcase classname="libraries.libc.common.newlib" name="libc_common.checktype" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="libraries.libc.common.newlib" name="libc_common.sqrtf" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="libraries.libc.common.newlib" name="libc_common.memset" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="libraries.libc.common.newlib" name="libc_common.time_ctime" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="libraries.libc.common.newlib" name="libc_common.memmove" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="libraries.libc.common.newlib" name="libc_common.srand" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="libraries.libc.common.newlib" name="libc_common.tolower_toupper" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="libraries.libc.common.newlib" name="libc_common.exit" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="libraries.libc.common.newlib" name="libc_common.qsort" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="libraries.libc.common.newlib" name="libc_common.stdint" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="libraries.libc.common.newlib" name="libc_common.rand" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="libraries.libc.common.newlib" name="libc_common.bsearch" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="libraries.libc.common.newlib" name="libc_common.atoi" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="libraries.libc.common.newlib" name="libc_common.strchr" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="libraries.libc.common.newlib" name="libc_common.strxspn" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="libraries.libc.common.newlib" name="libc_common.ssize_t" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="libraries.libc.common.newlib" name="libc_common.strtoul" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="libraries.libc.common.newlib" name="libc_common.memchr" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="libraries.libc.common.newlib" name="libc_common.strncpy" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="libraries.libc.common.newlib" name="libc_common.qsort_r" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="libraries.libc.common.newlib" name="libc_common.stdbool" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="libraries.libc.common.newlib" name="libc_common.stddef" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="libraries.libc.common.newlib" name="libc_common.sqrt" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="libraries.libc.common.newlib" name="libc_common.memcmp" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="libraries.libc.common.newlib" name="libc_common.time_asctime" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="libraries.libc.common.newlib" name="libc_common.limits" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="libraries.libc.common.newlib" name="libc_common.time_t" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="libraries.libc.common.newlib" name="libc_common.strncmp" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="libraries.libc.common.newlib" name="libc_common.abort" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="libraries.libc.common.newlib" name="libc_common.strcmp" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="libraries.libc.common.newlib" name="libc_common.strlen" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="libraries.libc.common.newlib" name="libc_common.str_operate" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="libraries.libc.common.newlib" name="libc_common.time_gmtime" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="libraries.libc.common.newlib" name="libc_common.abs" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="libraries.libc.common.newlib" name="libc_common.time_localtime" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="libraries.libc.common.newlib" name="libc_common.strcpy" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="libraries.libc.common.newlib" name="libc_common.memcpy" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="libraries.libc.common.newlib" name="libc_common.rand_reproducibility" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="libraries.libc.common.newlib" name="libc_common.strtol" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="libraries.libc.common.newlib" name="libc_common.strtok_r" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="libraries.libc.common.newlib_nano" name="libc_common.exit" time="0.01" />
		<testcase classname="libraries.libc.common.newlib_nano" name="libc_common.abort" time="0.03" />
		<testcase classname="libraries.libc.common.newlib_nano" name="libc_common.rand_reproducibility" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="libraries.libc.common.newlib_nano" name="libc_common.srand" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="libraries.libc.common.newlib_nano" name="libc_common.rand" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="libraries.libc.common.newlib_nano" name="libc_common.time_ctime" time="0.00" />
		<testcase classname="libraries.libc.common.newlib_nano" name="libc_common.time_localtime" time="0.00" />
		<testcase classname="libraries.libc.common.newlib_nano" name="libc_common.time_asctime" time="0.00" />
		<testcase classname="libraries.libc.common.newlib_nano" name="libc_common.time_gmtime" time="0.00" />
		<testcase classname="libraries.libc.common.newlib_nano" name="libc_common.strtok_r" time="0.00" />
		<testcase classname="libraries.libc.common.newlib_nano" name="libc_common.tolower_toupper" time="0.00" />
		<testcase classname="libraries.libc.common.newlib_nano" name="libc_common.strtoul" time="0.00" />
		<testcase classname="libraries.libc.common.newlib_nano" name="libc_common.strtol" time="0.00" />
		<testcase classname="libraries.libc.common.newlib_nano" name="libc_common.str_operate" time="0.00" />
		<testcase classname="libraries.libc.common.newlib_nano" name="libc_common.memmove" time="0.00" />
		<testcase classname="libraries.libc.common.newlib_nano" name="libc_common.memcpy" time="0.00" />
		<testcase classname="libraries.libc.common.newlib_nano" name="libc_common.memchr" time="0.00" />
		<testcase classname="libraries.libc.common.newlib_nano" name="libc_common.checktype" time="0.00" />
		<testcase classname="libraries.libc.common.newlib_nano" name="libc_common.atoi" time="0.00" />
		<testcase classname="libraries.libc.common.newlib_nano" name="libc_common.abs" time="0.00" />
		<testcase classname="libraries.libc.common.newlib_nano" name="libc_common.bsearch" time="0.00" />
		<testcase classname="libraries.libc.common.newlib_nano" name="libc_common.memcmp" time="0.00" />
		<testcase classname="libraries.libc.common.newlib_nano" name="libc_common.strxspn" time="0.00" />
		<testcase classname="libraries.libc.common.newlib_nano" name="libc_common.strchr" time="0.00" />
		<testcase classname="libraries.libc.common.newlib_nano" name="libc_common.strncpy" time="0.00" />
		<testcase classname="libraries.libc.common.newlib_nano" name="libc_common.strcpy" time="0.00" />
		<testcase classname="libraries.libc.common.newlib_nano" name="libc_common.strncmp" time="0.00" />
		<testcase classname="libraries.libc.common.newlib_nano" name="libc_common.strcmp" time="0.00" />
		<testcase classname="libraries.libc.common.newlib_nano" name="libc_common.strlen" time="0.00" />
		<testcase classname="libraries.libc.common.newlib_nano" name="libc_common.memset" time="0.00" />
		<testcase classname="libraries.libc.common.newlib_nano" name="libc_common.time_t" time="0.00" />
		<testcase classname="libraries.libc.common.newlib_nano" name="libc_common.stdint" time="0.00" />
		<testcase classname="libraries.libc.common.newlib_nano" name="libc_common.stddef" time="0.00" />
		<testcase classname="libraries.libc.common.newlib_nano" name="libc_common.stdbool" time="0.00" />
		<testcase classname="libraries.libc.common.newlib_nano" name="libc_common.ssize_t" time="0.00" />
		<testcase classname="libraries.libc.common.newlib_nano" name="libc_common.limits" time="0.00" />
		<testcase classname="libraries.libc.common.newlib_nano" name="libc_common.qsort_r" time="0.00" />
		<testcase classname="libraries.libc.common.newlib_nano" name="libc_common.qsort" time="0.00" />
		<testcase classname="libraries.libc.common.newlib_nano" name="libc_common.sqrt" time="0.02" />
		<testcase classname="libraries.libc.common.newlib_nano" name="libc_common.sqrtf" time="0.01" />
		<testcase classname="libraries.libc.common.picolibc" name="libc_common.exit" time="0.01" />
		<testcase classname="libraries.libc.common.picolibc" name="libc_common.abort" time="0.03" />
		<testcase classname="libraries.libc.common.picolibc" name="libc_common.rand_reproducibility" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="libraries.libc.common.picolibc" name="libc_common.srand" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="libraries.libc.common.picolibc" name="libc_common.rand" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="libraries.libc.common.picolibc" name="libc_common.time_ctime" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc" name="libc_common.time_localtime" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc" name="libc_common.time_asctime" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc" name="libc_common.time_gmtime" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc" name="libc_common.strtok_r" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc" name="libc_common.tolower_toupper" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc" name="libc_common.strtoul" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc" name="libc_common.strtol" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc" name="libc_common.str_operate" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc" name="libc_common.memmove" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc" name="libc_common.memcpy" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc" name="libc_common.memchr" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc" name="libc_common.checktype" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc" name="libc_common.atoi" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc" name="libc_common.abs" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc" name="libc_common.bsearch" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc" name="libc_common.memcmp" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc" name="libc_common.strxspn" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc" name="libc_common.strchr" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc" name="libc_common.strncpy" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc" name="libc_common.strcpy" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc" name="libc_common.strncmp" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc" name="libc_common.strcmp" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc" name="libc_common.strlen" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc" name="libc_common.memset" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc" name="libc_common.time_t" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc" name="libc_common.stdint" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc" name="libc_common.stddef" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc" name="libc_common.stdbool" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc" name="libc_common.ssize_t" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc" name="libc_common.limits" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc" name="libc_common.qsort_r" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc" name="libc_common.qsort" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc" name="libc_common.sqrt" time="0.02" />
		<testcase classname="libraries.libc.common.picolibc" name="libc_common.sqrtf" time="0.01" />
		<testcase classname="libraries.libc.common.picolibc.module" name="libc_common.exit" time="0.01" />
		<testcase classname="libraries.libc.common.picolibc.module" name="libc_common.abort" time="0.03" />
		<testcase classname="libraries.libc.common.picolibc.module" name="libc_common.rand_reproducibility" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="libraries.libc.common.picolibc.module" name="libc_common.srand" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="libraries.libc.common.picolibc.module" name="libc_common.rand" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="libraries.libc.common.picolibc.module" name="libc_common.time_ctime" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.module" name="libc_common.time_localtime" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.module" name="libc_common.time_asctime" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.module" name="libc_common.time_gmtime" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.module" name="libc_common.strtok_r" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.module" name="libc_common.tolower_toupper" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.module" name="libc_common.strtoul" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.module" name="libc_common.strtol" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.module" name="libc_common.str_operate" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.module" name="libc_common.memmove" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.module" name="libc_common.memcpy" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.module" name="libc_common.memchr" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.module" name="libc_common.checktype" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.module" name="libc_common.atoi" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.module" name="libc_common.abs" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.module" name="libc_common.bsearch" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.module" name="libc_common.memcmp" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.module" name="libc_common.strxspn" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.module" name="libc_common.strchr" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.module" name="libc_common.strncpy" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.module" name="libc_common.strcpy" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.module" name="libc_common.strncmp" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.module" name="libc_common.strcmp" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.module" name="libc_common.strlen" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.module" name="libc_common.memset" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.module" name="libc_common.time_t" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.module" name="libc_common.stdint" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.module" name="libc_common.stddef" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.module" name="libc_common.stdbool" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.module" name="libc_common.ssize_t" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.module" name="libc_common.limits" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.module" name="libc_common.qsort_r" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.module" name="libc_common.qsort" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.module" name="libc_common.sqrt" time="0.02" />
		<testcase classname="libraries.libc.common.picolibc.module" name="libc_common.sqrtf" time="0.01" />
		<testcase classname="libraries.libc.common.picolibc.notls" name="libc_common.exit" time="0.01" />
		<testcase classname="libraries.libc.common.picolibc.notls" name="libc_common.abort" time="0.03" />
		<testcase classname="libraries.libc.common.picolibc.notls" name="libc_common.rand_reproducibility" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="libraries.libc.common.picolibc.notls" name="libc_common.srand" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="libraries.libc.common.picolibc.notls" name="libc_common.rand" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="libraries.libc.common.picolibc.notls" name="libc_common.time_ctime" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.notls" name="libc_common.time_localtime" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.notls" name="libc_common.time_asctime" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.notls" name="libc_common.time_gmtime" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.notls" name="libc_common.strtok_r" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.notls" name="libc_common.tolower_toupper" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.notls" name="libc_common.strtoul" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.notls" name="libc_common.strtol" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.notls" name="libc_common.str_operate" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.notls" name="libc_common.memmove" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.notls" name="libc_common.memcpy" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.notls" name="libc_common.memchr" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.notls" name="libc_common.checktype" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.notls" name="libc_common.atoi" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.notls" name="libc_common.abs" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.notls" name="libc_common.bsearch" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.notls" name="libc_common.memcmp" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.notls" name="libc_common.strxspn" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.notls" name="libc_common.strchr" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.notls" name="libc_common.strncpy" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.notls" name="libc_common.strcpy" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.notls" name="libc_common.strncmp" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.notls" name="libc_common.strcmp" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.notls" name="libc_common.strlen" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.notls" name="libc_common.memset" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.notls" name="libc_common.time_t" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.notls" name="libc_common.stdint" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.notls" name="libc_common.stddef" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.notls" name="libc_common.stdbool" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.notls" name="libc_common.ssize_t" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.notls" name="libc_common.limits" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.notls" name="libc_common.qsort_r" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.notls" name="libc_common.qsort" time="0.00" />
		<testcase classname="libraries.libc.common.picolibc.notls" name="libc_common.sqrt" time="0.02" />
		<testcase classname="libraries.libc.common.picolibc.notls" name="libc_common.sqrtf" time="0.01" />
		<testcase classname="libraries.encoding.json" name="lib_json_test.json_string_nullptr" time="0.00" />
		<testcase classname="libraries.encoding.json" name="lib_json_test.json_enums" time="0.00" />
		<testcase classname="libraries.encoding.json" name="lib_json_test.json_invalid_int" time="0.00" />
		<testcase classname="libraries.encoding.json" name="lib_json_test.json_array_alignment_bool" time="0.00" />
		<testcase classname="libraries.encoding.json" name="lib_json_test.json_array_alignment" time="0.00" />
		<testcase classname="libraries.encoding.json" name="lib_json_test.json_encoded_object_tok_encoding" time="0.00" />
		<testcase classname="libraries.encoding.json" name="lib_json_test.large_descriptor" time="0.00" />
		<testcase classname="libraries.encoding.json" name="lib_json_test.json_encode_bounds_check" time="0.00" />
		<testcase classname="libraries.encoding.json" name="lib_json_test.json_escape_bounds_check" time="0.00" />
		<testcase classname="libraries.encoding.json" name="lib_json_test.json_escape_no_op" time="0.00" />
		<testcase classname="libraries.encoding.json" name="lib_json_test.json_escape_empty" time="0.00" />
		<testcase classname="libraries.encoding.json" name="lib_json_test.json_escape_one" time="0.00" />
		<testcase classname="libraries.encoding.json" name="lib_json_test.json_escape" time="0.00" />
		<testcase classname="libraries.encoding.json" name="lib_json_test.json_key_not_in_descr" time="0.00" />
		<testcase classname="libraries.encoding.json" name="lib_json_test.json_item_wrong_type" time="0.00" />
		<testcase classname="libraries.encoding.json" name="lib_json_test.json_wrong_token" time="0.00" />
		<testcase classname="libraries.encoding.json" name="lib_json_test.json_missing_quote" time="0.00" />
		<testcase classname="libraries.encoding.json" name="lib_json_test.json_invalid_number" time="0.00" />
		<testcase classname="libraries.encoding.json" name="lib_json_test.json_invalid_null" time="0.00" />
		<testcase classname="libraries.encoding.json" name="lib_json_test.json_invalid_bool" time="0.00" />
		<testcase classname="libraries.encoding.json" name="lib_json_test.json_invalid_string" time="0.00" />
		<testcase classname="libraries.encoding.json" name="lib_json_test.json_string_array_max" time="0.00" />
		<testcase classname="libraries.encoding.json" name="lib_json_test.json_string_array_empty" time="0.00" />
		<testcase classname="libraries.encoding.json" name="lib_json_test.json_string_array_size" time="0.00" />
		<testcase classname="libraries.encoding.json" name="lib_json_test.json_2dim_obj_arr_decoding" time="0.00" />
		<testcase classname="libraries.encoding.json" name="lib_json_test.json_2dim_arr_extra_named_obj_encoding" time="0.00" />
		<testcase classname="libraries.encoding.json" name="lib_json_test.json_2dim_arr_extra_obj_encoding" time="0.00" />
		<testcase classname="libraries.encoding.json" name="lib_json_test.json_2dim_arr_obj_encoding" time="0.00" />
		<testcase classname="libraries.encoding.json" name="lib_json_test.json_obj_arr_decoding" time="0.00" />
		<testcase classname="libraries.encoding.json" name="lib_json_test.json_arr_obj_encoding" time="0.00" />
		<testcase classname="libraries.encoding.json" name="lib_json_test.json_arr_obj_decoding" time="0.00" />
		<testcase classname="libraries.encoding.json" name="lib_json_test.json_obj_arr_encoding" time="0.00" />
		<testcase classname="libraries.encoding.json" name="lib_json_test.json_decoding_array_array" time="0.00" />
		<testcase classname="libraries.encoding.json" name="lib_json_test.json_encoding_array_array" time="0.00" />
		<testcase classname="libraries.encoding.json" name="lib_json_test.json_doubles_limits" time="0.00" />
		<testcase classname="libraries.encoding.json" name="lib_json_test.json_double_infinity" time="0.00" />
		<testcase classname="libraries.encoding.json" name="lib_json_test.json_double_nan" time="0.00" />
		<testcase classname="libraries.encoding.json" name="lib_json_test.json_double_format" time="0.00" />
		<testcase classname="libraries.encoding.json" name="lib_json_test.json_double" time="0.00" />
		<testcase classname="libraries.encoding.json" name="lib_json_test.json_float_limits" time="0.00" />
		<testcase classname="libraries.encoding.json" name="lib_json_test.json_float_infinity" time="0.00" />
		<testcase classname="libraries.encoding.json" name="lib_json_test.json_float_nan" time="0.00" />
		<testcase classname="libraries.encoding.json" name="lib_json_test.json_float_format" time="0.00" />
		<testcase classname="libraries.encoding.json" name="lib_json_test.json_float" time="0.00" />
		<testcase classname="libraries.encoding.json" name="lib_json_test.json_limits" time="0.01" />
		<testcase classname="libraries.encoding.json" name="lib_json_test.json_decoding" time="0.00" />
		<testcase classname="libraries.encoding.json" name="lib_json_test.json_encoding" time="0.01" />
		<testcase classname="libraries.devicetree.api_ext" name="devicetree_api_ext.mbox_dt_spec" time="0.00" />
		<testcase classname="libraries.devicetree.api_ext" name="devicetree_api_ext.adc_dt_spec" time="0.00" />
		<testcase classname="libraries.devicetree.api_ext" name="devicetree_api_ext.linker_regions" time="0.00" />
		<testcase classname="libraries.mem_blocks" name="lib_mem_block.multi_mem_block_invalid_params" time="0.00" />
		<testcase classname="libraries.mem_blocks" name="lib_mem_block.multi_mem_block_invalid_params_panic_4" time="0.04" />
		<testcase classname="libraries.mem_blocks" name="lib_mem_block.multi_mem_block_invalid_params_panic_3" time="0.04" />
		<testcase classname="libraries.mem_blocks" name="lib_mem_block.multi_mem_block_invalid_params_panic_2" time="0.04" />
		<testcase classname="libraries.mem_blocks" name="lib_mem_block.multi_mem_block_invalid_params_panic_1" time="0.04" />
		<testcase classname="libraries.mem_blocks" name="lib_mem_block.mem_block_invalid_params" time="0.00" />
		<testcase classname="libraries.mem_blocks" name="lib_mem_block.mem_block_invalid_params_panic_4" time="0.04" />
		<testcase classname="libraries.mem_blocks" name="lib_mem_block.mem_block_invalid_params_panic_3" time="0.04" />
		<testcase classname="libraries.mem_blocks" name="lib_mem_block.mem_block_invalid_params_panic_2" time="0.04" />
		<testcase classname="libraries.mem_blocks" name="lib_mem_block.mem_block_invalid_params_panic_1" time="0.04" />
		<testcase classname="libraries.mem_blocks" name="lib_mem_block.multi_mem_block_alloc_free" time="0.00" />
		<testcase classname="libraries.mem_blocks" name="lib_mem_block.mem_block_alloc_free_contiguous" time="0.00" />
		<testcase classname="libraries.mem_blocks" name="lib_mem_block.mem_block_get" time="0.00" />
		<testcase classname="libraries.mem_blocks" name="lib_mem_block.mem_block_multi_alloc_free_alt_buf" time="0.00" />
		<testcase classname="libraries.mem_blocks" name="lib_mem_block.mem_block_multi_alloc_free" time="0.00" />
		<testcase classname="libraries.mem_blocks" name="lib_mem_block.mem_block_alloc_free_alt_buf" time="0.00" />
		<testcase classname="libraries.mem_blocks" name="lib_mem_block.mem_block_alloc_free" time="0.00" />
		<testcase classname="libraries.libc.sprintf" name="sprintf.fwrite" time="0.00" />
		<testcase classname="libraries.libc.sprintf" name="sprintf.put" time="0.00" />
		<testcase classname="libraries.libc.sprintf" name="sprintf.vprintf" time="0.00" />
		<testcase classname="libraries.libc.sprintf" name="sprintf.vfprintf" time="0.00" />
		<testcase classname="libraries.libc.sprintf" name="sprintf.fprintf" time="0.00" />
		<testcase classname="libraries.libc.sprintf" name="sprintf.print" time="0.00" />
		<testcase classname="libraries.libc.sprintf" name="sprintf.sprintf_string" time="0.00" />
		<testcase classname="libraries.libc.sprintf" name="sprintf.sprintf_integer" time="0.00" />
		<testcase classname="libraries.libc.sprintf" name="sprintf.sprintf_misc" time="0.00" />
		<testcase classname="libraries.libc.sprintf" name="sprintf.snprintf" time="0.00" />
		<testcase classname="libraries.libc.sprintf" name="sprintf.vsprintf" time="0.00" />
		<testcase classname="libraries.libc.sprintf" name="sprintf.vsnprintf" time="0.00" />
		<testcase classname="libraries.libc.sprintf" name="sprintf.sprintf_double" time="0.01" />
		<testcase classname="libraries.libc.sprintf_new" name="sprintf.EOF" time="4.80" />
		<testcase classname="libraries.libc.picolibc.sprintf" name="sprintf.fwrite" time="0.00" />
		<testcase classname="libraries.libc.picolibc.sprintf" name="sprintf.put" time="0.00" />
		<testcase classname="libraries.libc.picolibc.sprintf" name="sprintf.vprintf" time="0.00" />
		<testcase classname="libraries.libc.picolibc.sprintf" name="sprintf.vfprintf" time="0.00" />
		<testcase classname="libraries.libc.picolibc.sprintf" name="sprintf.fprintf" time="0.00" />
		<testcase classname="libraries.libc.picolibc.sprintf" name="sprintf.print" time="0.00" />
		<testcase classname="libraries.libc.picolibc.sprintf" name="sprintf.sprintf_string" time="0.00" />
		<testcase classname="libraries.libc.picolibc.sprintf" name="sprintf.sprintf_integer" time="0.00" />
		<testcase classname="libraries.libc.picolibc.sprintf" name="sprintf.sprintf_misc" time="0.00" />
		<testcase classname="libraries.libc.picolibc.sprintf" name="sprintf.snprintf" time="0.00" />
		<testcase classname="libraries.libc.picolibc.sprintf" name="sprintf.vsprintf" time="0.00" />
		<testcase classname="libraries.libc.picolibc.sprintf" name="sprintf.vsnprintf" time="0.00" />
		<testcase classname="libraries.libc.picolibc.sprintf" name="sprintf.sprintf_double" time="0.01" />
		<testcase classname="libraries.libc.picolibc.sprintf_new" name="sprintf.EOF" time="6.70" />
		<testcase classname="libraries.libc.picolibc.sprintf_inexact" name="sprintf.EOF" time="5.89" />
		<testcase classname="libraries.spsc_pbuf" name="test_spsc_pbuf.stress_0cpy" time="30.07" />
		<testcase classname="libraries.spsc_pbuf" name="test_spsc_pbuf.stress" time="13.19" />
		<testcase classname="libraries.spsc_pbuf" name="test_spsc_pbuf.utilization" time="0.00" />
		<testcase classname="libraries.spsc_pbuf" name="test_spsc_pbuf.largest_alloc" time="0.00" />
		<testcase classname="libraries.spsc_pbuf" name="test_spsc_pbuf.0cpy_corner2" time="0.00" />
		<testcase classname="libraries.spsc_pbuf" name="test_spsc_pbuf.0cpy_corner1" time="0.00" />
		<testcase classname="libraries.spsc_pbuf" name="test_spsc_pbuf.0cpy_discard" time="0.00" />
		<testcase classname="libraries.spsc_pbuf" name="test_spsc_pbuf.0cpy_smaller" time="0.00" />
		<testcase classname="libraries.spsc_pbuf" name="test_spsc_pbuf.0cpy" time="0.00" />
		<testcase classname="libraries.spsc_pbuf" name="test_spsc_pbuf.spsc_pbuf_ut_cache" time="0.00" />
		<testcase classname="libraries.spsc_pbuf" name="test_spsc_pbuf.spsc_pbuf_ut" time="0.00" />
		<testcase classname="libraries.spsc_pbuf.nocache." name="test_spsc_pbuf.stress_0cpy" time="30.07" />
		<testcase classname="libraries.spsc_pbuf.nocache." name="test_spsc_pbuf.stress" time="14.98" />
		<testcase classname="libraries.spsc_pbuf.nocache." name="test_spsc_pbuf.utilization" time="0.00" />
		<testcase classname="libraries.spsc_pbuf.nocache." name="test_spsc_pbuf.largest_alloc" time="0.00" />
		<testcase classname="libraries.spsc_pbuf.nocache." name="test_spsc_pbuf.0cpy_corner2" time="0.00" />
		<testcase classname="libraries.spsc_pbuf.nocache." name="test_spsc_pbuf.0cpy_corner1" time="0.00" />
		<testcase classname="libraries.spsc_pbuf.nocache." name="test_spsc_pbuf.0cpy_discard" time="0.00" />
		<testcase classname="libraries.spsc_pbuf.nocache." name="test_spsc_pbuf.0cpy_smaller" time="0.00" />
		<testcase classname="libraries.spsc_pbuf.nocache." name="test_spsc_pbuf.0cpy" time="0.00" />
		<testcase classname="libraries.spsc_pbuf.nocache." name="test_spsc_pbuf.spsc_pbuf_ut_cache" time="0.00" />
		<testcase classname="libraries.spsc_pbuf.nocache." name="test_spsc_pbuf.spsc_pbuf_ut" time="0.00" />
		<testcase classname="libraries.spsc_pbuf.utilization" name="test_spsc_pbuf.stress_0cpy" time="30.06" />
		<testcase classname="libraries.spsc_pbuf.utilization" name="test_spsc_pbuf.stress" time="13.84" />
		<testcase classname="libraries.spsc_pbuf.utilization" name="test_spsc_pbuf.utilization" time="0.00" />
		<testcase classname="libraries.spsc_pbuf.utilization" name="test_spsc_pbuf.largest_alloc" time="0.00" />
		<testcase classname="libraries.spsc_pbuf.utilization" name="test_spsc_pbuf.0cpy_corner2" time="0.00" />
		<testcase classname="libraries.spsc_pbuf.utilization" name="test_spsc_pbuf.0cpy_corner1" time="0.00" />
		<testcase classname="libraries.spsc_pbuf.utilization" name="test_spsc_pbuf.0cpy_discard" time="0.00" />
		<testcase classname="libraries.spsc_pbuf.utilization" name="test_spsc_pbuf.0cpy_smaller" time="0.00" />
		<testcase classname="libraries.spsc_pbuf.utilization" name="test_spsc_pbuf.0cpy" time="0.00" />
		<testcase classname="libraries.spsc_pbuf.utilization" name="test_spsc_pbuf.spsc_pbuf_ut_cache" time="0.00" />
		<testcase classname="libraries.spsc_pbuf.utilization" name="test_spsc_pbuf.spsc_pbuf_ut" time="0.00" />
		<testcase classname="libraries.cbprintf.fp.printk" name="libraries.cbprintf.fp.printk" time="5.69" />
		<testcase classname="libraries.cbprintf.fp.printf" name="libraries.cbprintf.fp.printf" time="5.83" />
		<testcase classname="libraries.cbprintf.fp.printf_nl" name="libraries.cbprintf.fp.printf_nl" time="5.88" />
		<testcase classname="libraries.cbprintf.fp.printfcb" name="libraries.cbprintf.fp.printfcb" time="7.36" />
		<testcase classname="libraries.cbprintf.fp.printfcb_nl" name="libraries.cbprintf.fp.printfcb_nl" time="8.23" />
		<testcase classname="libraries.cbprintf.fp.fprintf" name="libraries.cbprintf.fp.fprintf" time="8.31" />
		<testcase classname="libraries.cbprintf.fp.fprintfcb" name="libraries.cbprintf.fp.fprintfcb" time="6.01" />
		<testcase classname="libraries.cbprintf.fp.printf.picolibc" name="libraries.cbprintf.fp.printf.picolibc" time="5.37" />
		<testcase classname="libraries.cbprintf.fp.printfcb.picolibc" name="libraries.cbprintf.fp.printfcb.picolibc" time="7.51" />
		<testcase classname="libraries.data_structures" name="sys_notify_api.callback" time="0.00" />
		<testcase classname="libraries.data_structures" name="sys_notify_api.signal" time="0.00" />
		<testcase classname="libraries.data_structures" name="sys_notify_api.spinwait" time="0.00" />
		<testcase classname="libraries.data_structures" name="sys_notify_api.validate" time="0.00" />
		<testcase classname="libraries.cmsis_dsp.bayes" name="bayes_f32.gaussian_naive_bayes_predict_f32" time="0.06" />
		<testcase classname="libraries.cmsis_dsp.bayes" name="bayes_f16.gaussian_naive_bayes_predict_f16" time="0.09" />
		<testcase classname="utilities.math.interpolation" name="interpolation.interpolation_piecewise" time="0.01" />
		<testcase classname="utilities.math.interpolation" name="interpolation.interpolation_negative_xy" time="0.05" />
		<testcase classname="utilities.math.interpolation" name="interpolation.interpolation_negative_x" time="0.04" />
		<testcase classname="utilities.math.interpolation" name="interpolation.interpolation_negative_y" time="0.05" />
		<testcase classname="utilities.math.interpolation" name="interpolation.interpolation_simple" time="0.01" />
		<testcase classname="utilities.math.interpolation" name="interpolation.interpolation_rounding" time="0.00" />
		<testcase classname="utilities.math.interpolation" name="interpolation.interpolation_on_boundary" time="0.00" />
		<testcase classname="utilities.math.interpolation" name="interpolation.interpolation_oob" time="0.00" />
		<testcase classname="libraries.min_heap" name="min_heap_api.find_and_remove" time="0.00" />
		<testcase classname="libraries.min_heap" name="min_heap_api.peek_and_pop" time="0.00" />
		<testcase classname="libraries.min_heap" name="min_heap_api.insert" time="0.00" />
		<testcase classname="libraries.sys_util" name="sys_util.NUM_VA_ARGS_LESS_1" time="0.00" />
		<testcase classname="libraries.sys_util" name="sys_util.NUM_VA_ARGS" time="0.00" />
		<testcase classname="libraries.sys_util" name="sys_util.wait_for" time="0.00" />
		<testcase classname="libraries.uuid.base" name="uuid.uuid_to_base64url" time="0.00" />
		<testcase classname="libraries.uuid.base" name="uuid.uuid_to_base64" time="0.00" />
		<testcase classname="libraries.uuid.base" name="uuid.uuid_to_string" time="0.00" />
		<testcase classname="libraries.uuid.base" name="uuid.uuid_to_buffer" time="0.00" />
		<testcase classname="libraries.uuid.base" name="uuid.uuid_from_string_errors" time="0.00" />
		<testcase classname="libraries.uuid.base" name="uuid.uuid_from_string" time="0.00" />
		<testcase classname="libraries.uuid.base" name="uuid.uuid_from_buffer" time="0.00" />
		<testcase classname="libraries.uuid.base" name="uuid.uuid_copy" time="0.00" />
		<testcase classname="libraries.uuid.base" name="uuid.uuid_v5" time="0.00" />
		<testcase classname="libraries.uuid.base" name="uuid.uuid_v4" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="libraries.libc.newlib.heap_listener" name="newlib_libc_heap_listener.alloc_and_trim" time="4.94" />
		<testcase classname="libraries.fdtable" name="fdtable.z_fd_multiple_access" time="0.00" />
		<testcase classname="libraries.fdtable" name="fdtable.zvfs_free_fd" time="0.00" />
		<testcase classname="libraries.fdtable" name="fdtable.zvfs_alloc_fd" time="0.00" />
		<testcase classname="libraries.fdtable" name="fdtable.zvfs_finalize_fd" time="0.00" />
		<testcase classname="libraries.fdtable" name="fdtable.zvfs_get_fd_obj" time="0.00" />
		<testcase classname="libraries.fdtable" name="fdtable.zvfs_get_fd_obj_and_vtable" time="0.00" />
		<testcase classname="libraries.fdtable" name="fdtable.zvfs_reserve_fd" time="0.00" />
		<testcase classname="libraries.heap" name="lib_heap.heap_listeners" time="0.02" />
		<testcase classname="libraries.heap" name="lib_heap.realloc" time="0.00" />
		<testcase classname="libraries.heap" name="lib_heap.solo_free_header" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="libraries.heap" name="lib_heap.big_heap" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="libraries.heap" name="lib_heap.fragmentation" time="3.07" />
		<testcase classname="libraries.heap" name="lib_heap.small_heap" time="1.66" />
		<testcase classname="libraries.mem_blocks.stats" name="lib_mem_blocks_stats_test.mem_blocks_runtime_stats" time="0.00" />
		<testcase classname="libraries.mem_blocks.stats" name="lib_mem_blocks_stats_test.mem_blocks_stats_invalid" time="0.00" />
		<testcase classname="libraries.hash_function.identity" name="hash_function.sys_hash32" time="10.09" />
		<testcase classname="libraries.hash_function.djb2" name="hash_function.sys_hash32" time="5.35" />
		<testcase classname="libraries.multi_heap" name="mheap_api.multi_heap" time="0.00" />
		<testcase classname="libraries.multi_heap" name="mheap_api.malloc_in_thread" time="0.00" />
		<testcase classname="libraries.multi_heap" name="mheap_api.malloc_in_isr" time="0.00" />
		<testcase classname="libraries.multi_heap" name="mheap_api.sys_heap_mem_pool_assign" time="0.00" />
		<testcase classname="libraries.multi_heap" name="mheap_api.k_aligned_alloc" time="0.00" />
		<testcase classname="libraries.multi_heap" name="mheap_api.mheap_calloc" time="0.00" />
		<testcase classname="libraries.multi_heap" name="mheap_api.mheap_realloc" time="0.00" />
		<testcase classname="libraries.multi_heap" name="mheap_api.mheap_malloc_free" time="0.00" />
		<testcase classname="libraries.multi_heap" name="mheap_api.mheap_threadsafe" time="0.00" />
		<testcase classname="libraries.multi_heap" name="mheap_api.mheap_malloc_align4" time="0.00" />
		<testcase classname="libraries.encoding.cobs" name="cobs_tests.cobs_invalid_overrun" time="0.00" />
		<testcase classname="libraries.encoding.cobs" name="cobs_tests.cobs_consecutive_delims" time="0.00" />
		<testcase classname="libraries.encoding.cobs" name="cobs_tests.cobs_invalid_delim_pos" time="0.00" />
		<testcase classname="libraries.encoding.cobs" name="cobs_tests.decode_trailing_delimiter" time="0.00" />
		<testcase classname="libraries.encoding.cobs" name="cobs_tests.encode_trailing_delimiter" time="0.01" />
		<testcase classname="libraries.encoding.cobs" name="cobs_tests.decode" time="0.00" />
		<testcase classname="libraries.encoding.cobs" name="cobs_tests.encode" time="0.01" />
		<testcase classname="libraries.net_buf.buf" name="net_buf_tests.net_buf_var_pool_aligned" time="0.00" />
		<testcase classname="libraries.net_buf.buf" name="net_buf_tests.net_buf_linearize" time="0.00" />
		<testcase classname="libraries.net_buf.buf" name="net_buf_tests.net_buf_fixed_append" time="0.00" />
		<testcase classname="libraries.net_buf.buf" name="net_buf_tests.net_buf_comparison" time="0.00" />
		<testcase classname="libraries.net_buf.buf" name="net_buf_tests.net_buf_user_data_copy" time="0.00" />
		<testcase classname="libraries.net_buf.buf" name="net_buf_tests.net_buf_user_data" time="0.00" />
		<testcase classname="libraries.net_buf.buf" name="net_buf_tests.net_buf_byte_order" time="0.00" />
		<testcase classname="libraries.net_buf.buf" name="net_buf_tests.net_buf_var_pool" time="0.00" />
		<testcase classname="libraries.net_buf.buf" name="net_buf_tests.net_buf_fixed_pool" time="0.00" />
		<testcase classname="libraries.net_buf.buf" name="net_buf_tests.net_buf_clone_user_data" time="0.00" />
		<testcase classname="libraries.net_buf.buf" name="net_buf_tests.net_buf_clone_reference_counted_zero_sized_buffer" time="0.00" />
		<testcase classname="libraries.net_buf.buf" name="net_buf_tests.net_buf_clone_no_ref_count" time="0.00" />
		<testcase classname="libraries.net_buf.buf" name="net_buf_tests.net_buf_clone_ref_count" time="0.00" />
		<testcase classname="libraries.net_buf.buf" name="net_buf_tests.net_buf_multi_frags" time="0.00" />
		<testcase classname="libraries.net_buf.buf" name="net_buf_tests.net_buf_big_buf" time="0.00" />
		<testcase classname="libraries.net_buf.buf" name="net_buf_tests.net_buf_4" time="0.00" />
		<testcase classname="libraries.net_buf.buf" name="net_buf_tests.net_buf_3" time="0.00" />
		<testcase classname="libraries.net_buf.buf" name="net_buf_tests.net_buf_2" time="0.00" />
		<testcase classname="libraries.net_buf.buf" name="net_buf_tests.net_buf_1" time="0.00" />
		<testcase classname="libraries.onoff" name="onoff_api.sync_error" time="0.00" />
		<testcase classname="libraries.onoff" name="onoff_api.sync_basic" time="0.00" />
		<testcase classname="libraries.onoff" name="onoff_api.cancel_or_release" time="0.01" />
		<testcase classname="libraries.onoff" name="onoff_api.cancel_delayed_req" time="0.01" />
		<testcase classname="libraries.onoff" name="onoff_api.cancel_req" time="0.01" />
		<testcase classname="libraries.onoff" name="onoff_api.error" time="0.00" />
		<testcase classname="libraries.onoff" name="onoff_api.multi_reset" time="0.01" />
		<testcase classname="libraries.onoff" name="onoff_api.rel_in_req_cb" time="0.00" />
		<testcase classname="libraries.onoff" name="onoff_api.recheck_stop" time="0.01" />
		<testcase classname="libraries.onoff" name="onoff_api.recheck_start" time="0.01" />
		<testcase classname="libraries.onoff" name="onoff_api.delayed_req" time="0.01" />
		<testcase classname="libraries.onoff" name="onoff_api.indep_req" time="0.00" />
		<testcase classname="libraries.onoff" name="onoff_api.multi_start" time="0.00" />
		<testcase classname="libraries.onoff" name="onoff_api.basic_reset" time="0.00" />
		<testcase classname="libraries.onoff" name="onoff_api.reset" time="0.00" />
		<testcase classname="libraries.onoff" name="onoff_api.basic_async" time="0.01" />
		<testcase classname="libraries.onoff" name="onoff_api.basic_sync" time="0.00" />
		<testcase classname="libraries.onoff" name="onoff_api.request" time="0.00" />
		<testcase classname="libraries.onoff" name="onoff_api.mon_unreg" time="0.00" />
		<testcase classname="libraries.onoff" name="onoff_api.mon_reg" time="0.00" />
		<testcase classname="libraries.onoff" name="onoff_api.manager_init" time="0.00" />
		<testcase classname="libraries.ring_buffer" name="ringbuffer_api.ringbuffer_item_stress" time="20.07" />
		<testcase classname="libraries.ring_buffer" name="ringbuffer_api.ringbuffer_cpy_stress" time="20.07" />
		<testcase classname="libraries.ring_buffer" name="ringbuffer_api.ringbuffer_zerocpy_stress" time="20.07" />
		<testcase classname="libraries.ring_buffer" name="ringbuffer_api.ringbuffer_concurrent" time="0.28" />
		<testcase classname="libraries.ring_buffer" name="ringbuffer_api.ringbuffer_performance" time="0.05" />
		<testcase classname="libraries.ring_buffer" name="ringbuffer_api.ringbuffer_equal_bufs" time="0.00" />
		<testcase classname="libraries.ring_buffer" name="ringbuffer_api.ringbuffer_partial_getting" time="0.00" />
		<testcase classname="libraries.ring_buffer" name="ringbuffer_api.ringbuffer_partial_putting" time="0.00" />
		<testcase classname="libraries.ring_buffer" name="ringbuffer_api.ringbuffer_array_perf" time="0.00" />
		<testcase classname="libraries.ring_buffer" name="ringbuffer_api.reset" time="0.00" />
		<testcase classname="libraries.ring_buffer" name="ringbuffer_api.peek" time="0.00" />
		<testcase classname="libraries.ring_buffer" name="ringbuffer_api.size" time="0.00" />
		<testcase classname="libraries.ring_buffer" name="ringbuffer_api.capacity" time="0.00" />
		<testcase classname="libraries.ring_buffer" name="ringbuffer_api.byte_put_free" time="0.00" />
		<testcase classname="libraries.ring_buffer" name="ringbuffer_api.ringbuffer_alloc_put" time="0.00" />
		<testcase classname="libraries.ring_buffer" name="ringbuffer_api.ringbuffer_raw" time="0.00" />
		<testcase classname="libraries.ring_buffer" name="ringbuffer_api.ringbuffer_size_put_get_thread_isr" time="0.00" />
		<testcase classname="libraries.ring_buffer" name="ringbuffer_api.ringbuffer_pow2_put_get_thread_isr" time="0.00" />
		<testcase classname="libraries.ring_buffer" name="ringbuffer_api.ringbuffer_put_get_discard" time="0.00" />
		<testcase classname="libraries.ring_buffer" name="ringbuffer_api.ringbuffer_put_get_thread_isr" time="0.00" />
		<testcase classname="libraries.ring_buffer" name="ringbuffer_api.ringbuffer_put_get_isr" time="0.00" />
		<testcase classname="libraries.ring_buffer" name="ringbuffer_api.ringbuffer_put_get_thread" time="0.06" />
		<testcase classname="libraries.ring_buffer" name="ringbuffer_api.ringbuffer_declare_size" time="0.00" />
		<testcase classname="libraries.ring_buffer" name="ringbuffer_api.ringbuffer_declare_pow2" time="0.00" />
		<testcase classname="libraries.ring_buffer" name="ringbuffer_api.ringbuffer_init" time="0.00" />
		<testcase classname="libraries.ring_buffer" name="ringbuffer_api.ring_buffer_main" time="0.00" />
		<testcase classname="libraries.cmsis_nn" name="cmsis_nn.svdf" time="0.00" />
		<testcase classname="libraries.cmsis_nn" name="cmsis_nn.softmax" time="0.00" />
		<testcase classname="libraries.cmsis_nn" name="cmsis_nn.max_pool" time="0.00" />
		<testcase classname="libraries.cmsis_nn" name="cmsis_nn.fully_connected" time="0.00" />
		<testcase classname="libraries.cmsis_nn" name="cmsis_nn.depthwise_convolve" time="0.00" />
		<testcase classname="libraries.cmsis_nn" name="cmsis_nn.convolve" time="0.00" />
		<testcase classname="libraries.cmsis_nn" name="cmsis_nn.avgpool" time="0.00" />
		<testcase classname="libraries.nanopb" name="nanopb_tests.nanopb_lib" time="0.00" />
		<testcase classname="libraries.nanopb" name="nanopb_tests.nanopb_nested" time="0.00" />
		<testcase classname="libraries.nanopb" name="nanopb_tests.nanopb_simple" time="0.00" />
		<testcase classname="arch.arm.interrupt" name="arm_interrupt.arm_null_pointer_exception" time="0.03" />
		<testcase classname="arch.arm.interrupt" name="arm_interrupt.arm_user_interrupt" time="0.00" />
		<testcase classname="arch.arm.interrupt" name="arm_interrupt.arm_interrupt" time="0.14" />
		<testcase classname="arch.arm.interrupt" name="arm_interrupt.arm_esf_collection" time="0.03" />
		<testcase classname="arch.arm.interrupt.no_optimizations" name="arm_interrupt.arm_interrupt" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="arch.arm.interrupt.no_optimizations" name="arm_interrupt.arm_esf_collection" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="arch.arm.interrupt.no_optimizations" name="arm_interrupt.arm_user_interrupt" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="arch.arm.interrupt.no_optimizations" name="arm_interrupt.arm_null_pointer_exception" time="0">
			<skipped type="skipped" message="FLASH overflow" />
		</testcase>
		<testcase classname="arch.arm.interrupt.extra_exception_info" name="arm_interrupt.arm_null_pointer_exception" time="0.05" />
		<testcase classname="arch.arm.interrupt.extra_exception_info" name="arm_interrupt.arm_user_interrupt" time="0.00" />
		<testcase classname="arch.arm.interrupt.extra_exception_info" name="arm_interrupt.arm_interrupt" time="0.20" />
		<testcase classname="arch.arm.interrupt.extra_exception_info" name="arm_interrupt.arm_esf_collection" time="0.05" />
		<testcase classname="arch.arm.interrupt.nmi" name="arm_runtime_nmi_fn.arm_runtime_nmi" time="8.86" />
		<testcase classname="arch.arm.sw_vector_relay" name="arm_sw_vector_relay.arm_sw_vector_relay" time="5.50" />
		<testcase classname="arch.arm.sw_vector_relay.sram_vector_table" name="arm_sw_vector_relay.arm_sw_vector_relay" time="4.71" />
		<testcase classname="arch.arm.irq_zero_latency_levels" name="arm_irq_zero_latency_levels.arm_zero_latency_levels" time="8.92" />
		<testcase classname="arch.arm.swap.common" name="arm_thread_swap.syscall_cpu_scrubs_regs" time="0.01" />
		<testcase classname="arch.arm.swap.common" name="arm_thread_swap.arm_syscalls" time="0.00" />
		<testcase classname="arch.arm.swap.common" name="arm_thread_swap.arm_thread_swap" time="0.00" />
		<testcase classname="arch.arm.irq_vector_table" name="vector_table.arm_irq_vector_table" time="4.62" />
		<testcase classname="arch.arm.custom_interrupt" name="arm_custom_interrupt.arm_custom_interrupt" time="4.82" />
		<testcase classname="arch.arm.irq_advanced_features" name="arm_irq_advanced_features.arm_dynamic_direct_interrupts" time="0.00" />
		<testcase classname="arch.arm.irq_advanced_features" name="arm_irq_advanced_features.arm_irq_target_state" time="0.01" />
		<testcase classname="arch.arm.irq_advanced_features" name="arm_irq_advanced_features.arm_zero_latency_irqs" time="0.00" />
		<testcase classname="arch.arm.tz_wrap_func" name="tz_wrap_func.tz_wrap_func" time="5.25" />
		<testcase classname="arch.common.ramfunc" name="ramfunc.ramfunc" time="5.75" />
		<testcase classname="buildsystem.app_version" name="app_version.basic_strings" time="0.00" />
		<testcase classname="buildsystem.app_version" name="app_version.appversion" time="0.00" />
		<testcase classname="buildsystem.app_version" name="app_version.basic_ints" time="0.00" />
		<testcase classname="drivers.hwinfo.api" name="hwinfo_device_id_api.get_supported_reset_cause" time="0.00" />
		<testcase classname="drivers.hwinfo.api" name="hwinfo_device_id_api.clear_reset_cause" time="0.00" />
		<testcase classname="drivers.hwinfo.api" name="hwinfo_device_id_api.get_reset_cause" time="0.00" />
		<testcase classname="drivers.hwinfo.api" name="hwinfo_device_id_api.device_id_get" time="0.00" />
		<testcase classname="drivers.dma.loop_transfer" name="dma_m2m_loop." time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="drivers.dma.chan_blen_transfer" name="dma_m2m.tst_dma0_m2m_chan1_burst16" time="2.01" />
		<testcase classname="drivers.dma.chan_blen_transfer" name="dma_m2m.tst_dma0_m2m_chan0_burst16" time="2.01" />
		<testcase classname="drivers.dma.chan_blen_transfer" name="dma_m2m.tst_dma0_m2m_chan1_burst8" time="2.01" />
		<testcase classname="drivers.dma.chan_blen_transfer" name="dma_m2m.tst_dma0_m2m_chan0_burst8" time="2.01" />
		<testcase classname="drivers.ipc.mailbox" name="drivers.ipc.mailbox" time="8.93" />
		<testcase classname="drivers.watchdog" name="wdt_basic_test_suite.wdt" time="0">
			<skipped type="skipped" message="Quarantine: NA" />
		</testcase>
		<testcase classname="drivers.watchdog.stm32wwdg" name="wdt_basic_test_suite.wdt" time="0">
			<skipped type="skipped" message="Quarantine: instable behaviour on watchdog tests" />
		</testcase>
		<testcase classname="drivers.watchdog.stm32wwdg_h7" name="wdt_basic_test_suite.wdt" time="0">
			<skipped type="skipped" message="Quarantine: instable behaviour on watchdog tests" />
		</testcase>
		<testcase classname="drivers.watchdog.stm32iwdg" name="wdt_basic_test_suite.wdt" time="0">
			<skipped type="skipped" message="Quarantine: instable behaviour on watchdog tests" />
		</testcase>
		<testcase classname="drivers.console.uart" name="drivers.console.uart" time="4.68" />
		<testcase classname="debug.coredump.drivers.api" name="debug.coredump.drivers.api" time="4.07" />
		<testcase classname="drivers.dac.api" name="dac.task_write_value" time="5.46" />
		<testcase classname="drivers.dac.loopback" name="dac_loopback.dac_loopback" time="6.06" />
		<testcase classname="drivers.adc" name="adc_basic.adc_invalid_request" time="0.01" />
		<testcase classname="drivers.adc" name="adc_basic.adc_repeated_samplings" time="0.08" />
		<testcase classname="drivers.adc" name="adc_basic.adc_sample_with_interval" time="0.41" />
		<testcase classname="drivers.adc" name="adc_basic.adc_asynchronous_call" time="0.01" />
		<testcase classname="drivers.adc" name="adc_basic.adc_sample_two_channels" time="0.01" />
		<testcase classname="drivers.adc" name="adc_basic.adc_sample_one_channel" time="0.01" />
		<testcase classname="drivers.adc.dma_st_stm32" name="adc_basic.adc_invalid_request" time="0.01" />
		<testcase classname="drivers.adc.dma_st_stm32" name="adc_basic.adc_repeated_samplings" time="0.08" />
		<testcase classname="drivers.adc.dma_st_stm32" name="adc_basic.adc_sample_with_interval" time="0.41" />
		<testcase classname="drivers.adc.dma_st_stm32" name="adc_basic.adc_asynchronous_call" time="0.01" />
		<testcase classname="drivers.adc.dma_st_stm32" name="adc_basic.adc_sample_two_channels" time="0.01" />
		<testcase classname="drivers.adc.dma_st_stm32" name="adc_basic.adc_sample_one_channel" time="0.01" />
		<testcase classname="drivers.uart.async_rx" name="uart_async_rx.rx_ztress_with_chunks" time="5.03" />
		<testcase classname="drivers.uart.async_rx" name="uart_async_rx.rx_ztress_no_chunks" time="5.03" />
		<testcase classname="drivers.uart.async_rx" name="uart_async_rx.rx_late_consume" time="0.00" />
		<testcase classname="drivers.uart.async_rx" name="uart_async_rx.rx" time="0.00" />
		<testcase classname="drivers.uart.async_api" name="uart_async_var_buf_length.var_buf_length" time="1.02" />
		<testcase classname="drivers.uart.async_api" name="uart_async_long_buf.long_buffers" time="0.17" />
		<testcase classname="drivers.uart.async_api" name="uart_async_chain_write.chained_write" time="0.00" />
		<testcase classname="drivers.uart.async_api" name="uart_async_timeout.forever_timeout" time="3.00" />
		<testcase classname="drivers.uart.async_api" name="uart_async_write_abort.write_abort" time="0.13" />
		<testcase classname="drivers.uart.async_api" name="uart_async_read_abort.read_abort" time="1.07" />
		<testcase classname="drivers.uart.async_api" name="uart_async_double_buf.double_buffer" time="1.74" />
		<testcase classname="drivers.uart.async_api" name="uart_async_chain_read.chained_read" time="0.43" />
		<testcase classname="drivers.uart.async_api" name="uart_async_multi_rx.multiple_rx_enable" time="0.70" />
		<testcase classname="drivers.uart.async_api" name="uart_async_single_read.single_read" time="0.35" />
		<testcase classname="drivers.sensor.generic" name="sensor_api.sensor_unit_conversion" time="0.00" />
		<testcase classname="drivers.sensor.generic" name="sensor_api.sensor_handle_triggers" time="0.00" />
		<testcase classname="drivers.sensor.generic" name="sensor_api.sensor_get_channels" time="0.00" />
		<testcase classname="drivers.sensor.generic.fpu" name="sensor_api.sensor_unit_conversion" time="0.00" />
		<testcase classname="drivers.sensor.generic.fpu" name="sensor_api.sensor_handle_triggers" time="0.00" />
		<testcase classname="drivers.sensor.generic.fpu" name="sensor_api.sensor_get_channels" time="0.00" />
		<testcase classname="drivers.spi.dt_spec" name="spi_dt_spec.dt_spec" time="6.38" />
		<testcase classname="drivers.i2c.target_api.dual_role" name="i2c_eeprom_target.eeprom_target" time="0.49" />
		<testcase classname="drivers.i2c.target_api.dual_role" name="i2c_eeprom_target.deinit" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="drivers.eeprom.shell" name="eeprom_shell.eeprom_fill" time="0.00" />
		<testcase classname="drivers.eeprom.shell" name="eeprom_shell.eeprom_size" time="0.00" />
		<testcase classname="drivers.eeprom.shell" name="eeprom_shell.eeprom_read" time="0.00" />
		<testcase classname="drivers.eeprom.shell" name="eeprom_shell.eeprom_write_failed_verification" time="0.00" />
		<testcase classname="drivers.eeprom.shell" name="eeprom_shell.eeprom_write" time="0.00" />
		<testcase classname="drivers.gpio.1pin" name="gpio_api_1pin_conf.gpio_pin_configure_single_ended" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="drivers.gpio.1pin" name="gpio_api_1pin_conf.gpio_pin_configure_push_pull" time="0.01" />
		<testcase classname="drivers.gpio.1pin" name="gpio_api_1pin_pin.gpio_pin_set_get_active_low" time="0.02" />
		<testcase classname="drivers.gpio.1pin" name="gpio_api_1pin_pin.gpio_pin_set_get_active_high" time="0.02" />
		<testcase classname="drivers.gpio.1pin" name="gpio_api_1pin_pin.gpio_pin_set_get" time="0.01" />
		<testcase classname="drivers.gpio.1pin" name="gpio_api_1pin_pin.gpio_pin_set_get_raw" time="0.01" />
		<testcase classname="drivers.gpio.1pin" name="gpio_api_1pin_pin.gpio_pin_toggle_visual" time="6.01" />
		<testcase classname="drivers.gpio.1pin" name="gpio_api_1pin_pin.gpio_pin_toggle" time="0.01" />
		<testcase classname="drivers.gpio.1pin" name="gpio_api_1pin_int.gpio_int_level_inactive" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="drivers.gpio.1pin" name="gpio_api_1pin_int.gpio_int_level_active" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="drivers.gpio.1pin" name="gpio_api_1pin_int.gpio_int_level_low_interrupt_count_5" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="drivers.gpio.1pin" name="gpio_api_1pin_int.gpio_int_level_low_interrupt_count_1" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="drivers.gpio.1pin" name="gpio_api_1pin_int.gpio_int_level_high_interrupt_count_5" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="drivers.gpio.1pin" name="gpio_api_1pin_int.gpio_int_level_high_interrupt_count_1" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="drivers.gpio.1pin" name="gpio_api_1pin_int.gpio_int_edge_to_inactive" time="0.03" />
		<testcase classname="drivers.gpio.1pin" name="gpio_api_1pin_int.gpio_int_edge_to_active" time="0.03" />
		<testcase classname="drivers.gpio.1pin" name="gpio_api_1pin_int.gpio_int_edge_both" time="0.01" />
		<testcase classname="drivers.gpio.1pin" name="gpio_api_1pin_int.gpio_int_edge_falling" time="0.01" />
		<testcase classname="drivers.gpio.1pin" name="gpio_api_1pin_int.gpio_int_edge_rising" time="0.01" />
		<testcase classname="drivers.gpio.1pin" name="gpio_api_1pin_port.gpio_port_set_clr_bits" time="0.01" />
		<testcase classname="drivers.gpio.1pin" name="gpio_api_1pin_port.gpio_port_set_clr_bits_raw" time="0.01" />
		<testcase classname="drivers.gpio.1pin" name="gpio_api_1pin_port.gpio_port_set_bits_clear_bits" time="0.01" />
		<testcase classname="drivers.gpio.1pin" name="gpio_api_1pin_port.gpio_port_set_bits_clear_bits_raw" time="0.01" />
		<testcase classname="drivers.gpio.1pin" name="gpio_api_1pin_port.gpio_port_set_masked_get_active_low" time="0.02" />
		<testcase classname="drivers.gpio.1pin" name="gpio_api_1pin_port.gpio_port_set_masked_get_active_high" time="0.02" />
		<testcase classname="drivers.gpio.1pin" name="gpio_api_1pin_port.gpio_port_set_masked_get" time="0.01" />
		<testcase classname="drivers.gpio.1pin" name="gpio_api_1pin_port.gpio_port_set_masked_get_raw" time="0.01" />
		<testcase classname="drivers.gpio.1pin" name="gpio_api_1pin_port.gpio_port_toggle" time="0.01" />
		<testcase classname="drivers.gpio.get_direction" name="gpio_get_direction.input_output" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="drivers.gpio.get_direction" name="gpio_get_direction.output" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="drivers.gpio.get_direction" name="gpio_get_direction.input" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="drivers.gpio.get_direction" name="gpio_get_direction.disconnect" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="drivers.gpio.st_2pin_arduino" name="gpio_port_cb_mgmt.gpio_callback_enable_disable" time="3.61" />
		<testcase classname="drivers.gpio.st_2pin_arduino" name="gpio_port_cb_mgmt.gpio_callback_self_remove" time="2.51" />
		<testcase classname="drivers.gpio.st_2pin_arduino" name="gpio_port_cb_mgmt.gpio_callback_add_remove" time="3.61" />
		<testcase classname="drivers.gpio.st_2pin_arduino" name="gpio_port_cb_vari.gpio_callback_variants" time="5.54" />
		<testcase classname="drivers.gpio.st_2pin_arduino" name="after_flash_gpio_config_trigger.gpio_config_trigger" time="0.01" />
		<testcase classname="drivers.gpio.st_2pin_arduino" name="after_flash_gpio_config_trigger.gpio_config_twice_trigger" time="0.01" />
		<testcase classname="drivers.gpio.st_2pin_arduino" name="gpio_port.gpio_port" time="0.03" />
		<testcase classname="drivers.rtc.rtc_utils" name="rtc_utils.rtc_utils_validate_rtc_time" time="7.97" />
		<testcase classname="drivers.rtc.rtc_api_helpers" name="rtc_api_helpers.validate_calibration_from_frequency" time="0.00" />
		<testcase classname="drivers.rtc.rtc_api_helpers" name="rtc_api_helpers.validate_rtc_time_to_tm" time="0.00" />
		<testcase classname="drivers.rtc.rtc_api_helpers" name="rtc_api_helpers.validate_rtc_time_compat_with_tm" time="0.00" />
		<testcase classname="drivers.rtc.rtc_api" name="rtc_api.time_counting" time="10.00" />
		<testcase classname="drivers.rtc.rtc_api" name="rtc_api.set_get_time" time="0.00" />
		<testcase classname="drivers.rtc.rtc_api" name="rtc_api.y2k" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="drivers.rtc.rtc_api" name="rtc_api.alarm_callback" time="26.00" />
		<testcase classname="drivers.rtc.rtc_api" name="rtc_api.alarm" time="26.00" />
		<testcase classname="drivers.rtc.rtc_api" name="rtc_api.set_get_calibration" time="0.66" />
		<testcase classname="drivers.pwm" name="pwm_basic.pwm_cycle" time="3.01" />
		<testcase classname="drivers.pwm" name="pwm_basic.pwm_nsec" time="3.01" />
		<testcase classname="drivers.flash.common.default" name="flash_driver.flash_copy" time="0.13" />
		<testcase classname="drivers.flash.common.default" name="flash_driver.flash_page_layout" time="0.03" />
		<testcase classname="drivers.flash.common.default" name="flash_driver.get_size" time="0.01" />
		<testcase classname="drivers.flash.common.default" name="flash_driver.flash_erase" time="0.06" />
		<testcase classname="drivers.flash.common.default" name="flash_driver.flash_flatten" time="0.08" />
		<testcase classname="drivers.flash.common.default" name="flash_driver.flash_fill" time="0.06" />
		<testcase classname="drivers.flash.common.default" name="flash_driver.read_unaligned_address" time="0.04" />
		<testcase classname="drivers.flash.common.stm32" name="flash_driver.flash_copy" time="0.11" />
		<testcase classname="drivers.flash.common.stm32" name="flash_driver.flash_page_layout" time="0.03" />
		<testcase classname="drivers.flash.common.stm32" name="flash_driver.get_size" time="0.01" />
		<testcase classname="drivers.flash.common.stm32" name="flash_driver.flash_erase" time="0.06" />
		<testcase classname="drivers.flash.common.stm32" name="flash_driver.flash_flatten" time="0.08" />
		<testcase classname="drivers.flash.common.stm32" name="flash_driver.flash_fill" time="0.06" />
		<testcase classname="drivers.flash.common.stm32" name="flash_driver.read_unaligned_address" time="0.04" />
		<testcase classname="drivers.gnss.gnss_parse" name="gnss_parse.dec_to_nano" time="0.00" />
		<testcase classname="drivers.gnss.gnss_parse" name="gnss_parse.atoi" time="0.00" />
		<testcase classname="drivers.gnss.gnss_nmea0183" name="gnss_nmea0183.gsv_parse_satellites" time="0.00" />
		<testcase classname="drivers.gnss.gnss_nmea0183" name="gnss_nmea0183.gsv_parse_headers" time="0.00" />
		<testcase classname="drivers.gnss.gnss_nmea0183" name="gnss_nmea0183.snprintk" time="0.00" />
		<testcase classname="drivers.gnss.gnss_nmea0183" name="gnss_nmea0183.parse_gga_fix" time="0.00" />
		<testcase classname="drivers.gnss.gnss_nmea0183" name="gnss_nmea0183.parse_rmc_fix" time="0.00" />
		<testcase classname="drivers.gnss.gnss_nmea0183" name="gnss_nmea0183.parse_gga_no_fix" time="0.00" />
		<testcase classname="drivers.gnss.gnss_nmea0183" name="gnss_nmea0183.parse_rmc_no_fix" time="0.00" />
		<testcase classname="drivers.gnss.gnss_nmea0183" name="gnss_nmea0183.ddmmyy" time="0.00" />
		<testcase classname="drivers.gnss.gnss_nmea0183" name="gnss_nmea0183.hhmmss" time="0.00" />
		<testcase classname="drivers.gnss.gnss_nmea0183" name="gnss_nmea0183.knots_to_mms" time="0.00" />
		<testcase classname="drivers.gnss.gnss_nmea0183" name="gnss_nmea0183.ddmm_mmmm" time="0.00" />
		<testcase classname="drivers.clock.stm32_clock_configuration.common_device.g0.i2c1_sysclk_lptim1_lsi" name="stm32_common_devices_clocks.sysclk_freq" time="0.00" />
		<testcase classname="drivers.clock.stm32_clock_configuration.common_device.g0.i2c1_sysclk_lptim1_lsi" name="stm32_common_devices_clocks.adc_clk_config" time="0.01" />
		<testcase classname="drivers.clock.stm32_clock_configuration.common_device.g0.i2c1_sysclk_lptim1_lsi" name="stm32_common_devices_clocks.i2c_clk_config" time="0.01" />
		<testcase classname="drivers.clock.stm32_clock_configuration.common_device.g0.i2c1_sysclk_lptim1_lsi" name="stm32_common_devices_clocks.lptim_clk_config" time="0.01" />
		<testcase classname="drivers.clock.stm32_clock_configuration.common_device.g0.i2c1_hsi_lptim1_lse_adc1_pllp" name="stm32_common_devices_clocks.sysclk_freq" time="0.00" />
		<testcase classname="drivers.clock.stm32_clock_configuration.common_device.g0.i2c1_hsi_lptim1_lse_adc1_pllp" name="stm32_common_devices_clocks.adc_clk_config" time="0.01" />
		<testcase classname="drivers.clock.stm32_clock_configuration.common_device.g0.i2c1_hsi_lptim1_lse_adc1_pllp" name="stm32_common_devices_clocks.i2c_clk_config" time="0.01" />
		<testcase classname="drivers.clock.stm32_clock_configuration.common_device.g0.i2c1_hsi_lptim1_lse_adc1_pllp" name="stm32_common_devices_clocks.lptim_clk_config" time="0.01" />
		<testcase classname="drivers.clock.stm32_clock_configuration.common_core.g0.sysclksrc_hsi_g0_16_div_2" name="stm32_sysclck_config.pll_src" time="0.00" />
		<testcase classname="drivers.clock.stm32_clock_configuration.common_core.g0.sysclksrc_hsi_g0_16_div_2" name="stm32_sysclck_config.sysclk_src" time="0.00" />
		<testcase classname="drivers.clock.stm32_clock_configuration.common_core.g0.sysclksrc_hsi_g0_16_div_2" name="stm32_sysclck_config.hclk_freq" time="0.00" />
		<testcase classname="drivers.clock.stm32_clock_configuration.common_core.g0.sysclksrc_hsi_g0_16_div_4" name="stm32_sysclck_config.pll_src" time="0.00" />
		<testcase classname="drivers.clock.stm32_clock_configuration.common_core.g0.sysclksrc_hsi_g0_16_div_4" name="stm32_sysclck_config.sysclk_src" time="0.00" />
		<testcase classname="drivers.clock.stm32_clock_configuration.common_core.g0.sysclksrc_hsi_g0_16_div_4" name="stm32_sysclck_config.hclk_freq" time="0.00" />
		<testcase classname="drivers.clock.stm32_clock_configuration.common_core.g0.sysclksrc_pll_g0_64_hsi_16" name="stm32_sysclck_config.pll_src" time="0.00" />
		<testcase classname="drivers.clock.stm32_clock_configuration.common_core.g0.sysclksrc_pll_g0_64_hsi_16" name="stm32_sysclck_config.sysclk_src" time="0.00" />
		<testcase classname="drivers.clock.stm32_clock_configuration.common_core.g0.sysclksrc_pll_g0_64_hsi_16" name="stm32_sysclck_config.hclk_freq" time="0.00" />
		<testcase classname="drivers.clock.stm32_clock_configuration.common_core.g0.sysclksrc_hsi_g0_16" name="stm32_sysclck_config.pll_src" time="0.00" />
		<testcase classname="drivers.clock.stm32_clock_configuration.common_core.g0.sysclksrc_hsi_g0_16" name="stm32_sysclck_config.sysclk_src" time="0.00" />
		<testcase classname="drivers.clock.stm32_clock_configuration.common_core.g0.sysclksrc_hsi_g0_16" name="stm32_sysclck_config.hclk_freq" time="0.00" />
		<testcase classname="drivers.counter.basic_api" name="counter_basic.cancelled_alarm_does_not_expire" time="5.31" />
		<testcase classname="drivers.counter.basic_api" name="counter_basic.short_relative_alarm" time="42.42" />
		<testcase classname="drivers.counter.basic_api" name="counter_basic.late_alarm_error" time="0.81" />
		<testcase classname="drivers.counter.basic_api" name="counter_basic.late_alarm" time="0.81" />
		<testcase classname="drivers.counter.basic_api" name="counter_basic.valid_function_without_alarm" time="1.92" />
		<testcase classname="drivers.counter.basic_api" name="counter_basic.all_channels" time="3.96" />
		<testcase classname="drivers.counter.basic_api" name="counter_basic.multiple_alarms" time="0.92" />
		<testcase classname="drivers.counter.basic_api" name="counter_basic.single_shot_alarm_top" time="1.17" />
		<testcase classname="drivers.counter.basic_api" name="counter_basic.single_shot_alarm_notop" time="8.16" />
		<testcase classname="drivers.counter.basic_api" name="counter_no_callback.set_top_value_without_alarm" time="0.85" />
		<testcase classname="drivers.counter.basic_api" name="counter_basic.set_top_value_with_alarm" time="1.58" />
		<testcase classname="drivers.can.shell" name="can_shell.can_recover_timeout" time="0.00" />
		<testcase classname="drivers.can.shell" name="can_shell.can_recover" time="0.00" />
		<testcase classname="drivers.can.shell" name="can_shell.can_filter_remove" time="0.00" />
		<testcase classname="drivers.can.shell" name="can_shell.can_filter_remove_missing_value" time="0.00" />
		<testcase classname="drivers.can.shell" name="can_shell.can_filter_add_all_options" time="0.00" />
		<testcase classname="drivers.can.shell" name="can_shell.can_filter_add_ext_id_mask" time="0.00" />
		<testcase classname="drivers.can.shell" name="can_shell.can_filter_add_ext_id" time="0.00" />
		<testcase classname="drivers.can.shell" name="can_shell.can_filter_add_std_id_mask" time="0.00" />
		<testcase classname="drivers.can.shell" name="can_shell.can_filter_add_std_id" time="0.00" />
		<testcase classname="drivers.can.shell" name="can_shell.can_filter_add_missing_id" time="0.00" />
		<testcase classname="drivers.can.shell" name="can_shell.can_send_data_all_options" time="0.00" />
		<testcase classname="drivers.can.shell" name="can_shell.can_send_fd_brs" time="0.00" />
		<testcase classname="drivers.can.shell" name="can_shell.can_send_fd" time="0.00" />
		<testcase classname="drivers.can.shell" name="can_shell.can_send_rtr" time="0.00" />
		<testcase classname="drivers.can.shell" name="can_shell.can_send_no_data" time="0.00" />
		<testcase classname="drivers.can.shell" name="can_shell.can_send_ext_id" time="0.00" />
		<testcase classname="drivers.can.shell" name="can_shell.can_send_std_id" time="0.00" />
		<testcase classname="drivers.can.shell" name="can_shell.can_send_missing_id" time="0.00" />
		<testcase classname="drivers.can.shell" name="can_shell.can_mode_combined" time="0.00" />
		<testcase classname="drivers.can.shell" name="can_shell.can_mode_triple_sampling" time="0.00" />
		<testcase classname="drivers.can.shell" name="can_shell.can_mode_one_shot" time="0.00" />
		<testcase classname="drivers.can.shell" name="can_shell.can_mode_normal" time="0.00" />
		<testcase classname="drivers.can.shell" name="can_shell.can_mode_loopback" time="0.00" />
		<testcase classname="drivers.can.shell" name="can_shell.can_mode_listen_only" time="0.00" />
		<testcase classname="drivers.can.shell" name="can_shell.can_mode_fd" time="0.00" />
		<testcase classname="drivers.can.shell" name="can_shell.can_mode_raw_value" time="0.00" />
		<testcase classname="drivers.can.shell" name="can_shell.can_mode_unknown" time="0.00" />
		<testcase classname="drivers.can.shell" name="can_shell.can_mode_missing_value" time="0.00" />
		<testcase classname="drivers.can.shell" name="can_shell.can_dtiming_missing_value" time="0.00" />
		<testcase classname="drivers.can.shell" name="can_shell.can_dtiming" time="0.00" />
		<testcase classname="drivers.can.shell" name="can_shell.can_timing_missing_value" time="0.00" />
		<testcase classname="drivers.can.shell" name="can_shell.can_timing" time="0.00" />
		<testcase classname="drivers.can.shell" name="can_shell.can_dbitrate_sample_point" time="0.00" />
		<testcase classname="drivers.can.shell" name="can_shell.can_dbitrate" time="0.00" />
		<testcase classname="drivers.can.shell" name="can_shell.can_dbitrate_missing_value" time="0.00" />
		<testcase classname="drivers.can.shell" name="can_shell.can_bitrate_sample_point" time="0.00" />
		<testcase classname="drivers.can.shell" name="can_shell.can_bitrate" time="0.00" />
		<testcase classname="drivers.can.shell" name="can_shell.can_bitrate_missing_value" time="0.00" />
		<testcase classname="drivers.can.shell" name="can_shell.can_show" time="0.00" />
		<testcase classname="drivers.can.shell" name="can_shell.can_stop" time="0.00" />
		<testcase classname="drivers.can.shell" name="can_shell.can_start" time="0.00" />
		<testcase classname="modem.modem_pipelink" name="modem_pipelink.connect_attached" time="0.00" />
		<testcase classname="modem.modem_pipelink" name="modem_pipelink.connect_not_attached" time="0.00" />
		<testcase classname="filesystem.lib_link" name="filesystem.lib_link" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="filesystem.api" name="fs_api_register_mount.mount_unmount" time="0.08" />
		<testcase classname="filesystem.api" name="fs_api_dir_file.file_ops" time="0.15" />
		<testcase classname="filesystem.api" name="fs_api_dir_file.fs_dir" time="0.11" />
		<testcase classname="filesystem.api" name="fs_api_dir_file.file_unlink" time="0.02" />
		<testcase classname="filesystem.api" name="fs_api_dir_file.file_stat" time="0.02" />
		<testcase classname="filesystem.api" name="fs_api_dir_file.file_rename" time="0.02" />
		<testcase classname="filesystem.api" name="fs_api_dir_file.file_sync" time="0.02" />
		<testcase classname="filesystem.api" name="fs_api_dir_file.file_statvfs" time="0.03" />
		<testcase classname="filesystem.api" name="fs_api_dir_file.fs_dir_t_init" time="0.00" />
		<testcase classname="filesystem.api" name="fs_api_dir_file.fs_file_t_init" time="0.00" />
		<testcase classname="filesystem.api" name="fs_api_register_mount.fs_register" time="0.00" />
		<testcase classname="crypto.rng" name="rng_common.rand32" time="6.26" />
		<testcase classname="crypto.rng.random_sw_systimer" name="rng_common.rand32" time="6.15" />
		<testcase classname="debug.coredump.logging_backend" name="debug.coredump.logging_backend" time="5.53" />
		<testcase classname="debug.mipi_stp_decoder" name="mipi_stp_decoder_test.sync_loss" time="0.00" />
		<testcase classname="debug.mipi_stp_decoder" name="mipi_stp_decoder_test.chunk_freq2" time="0.00" />
		<testcase classname="debug.mipi_stp_decoder" name="mipi_stp_decoder_test.multi_chunk_async" time="0.00" />
		<testcase classname="debug.mipi_stp_decoder" name="mipi_stp_decoder_test.chunk_async" time="0.00" />
		<testcase classname="debug.mipi_stp_decoder" name="mipi_stp_decoder_test.chunk_freq" time="0.00" />
		<testcase classname="debug.mipi_stp_decoder" name="mipi_stp_decoder_test.chunk_errors" time="0.00" />
		<testcase classname="debug.mipi_stp_decoder" name="mipi_stp_decoder_test.multi_chunk_data_ts" time="0.00" />
		<testcase classname="debug.mipi_stp_decoder" name="mipi_stp_decoder_test.chunk_data_ts" time="0.00" />
		<testcase classname="debug.mipi_stp_decoder" name="mipi_stp_decoder_test.chunk_data" time="0.00" />
		<testcase classname="debug.mipi_stp_decoder" name="mipi_stp_decoder_test.chunk_channel" time="0.00" />
		<testcase classname="debug.mipi_stp_decoder" name="mipi_stp_decoder_test.chunk_major" time="0.00" />
		<testcase classname="debug.mipi_stp_decoder" name="mipi_stp_decoder_test.chunk_null" time="0.00" />
		<testcase classname="debug.coredump.backends.logging" name="coredump_backends.coredump_5_erase" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="debug.coredump.backends.logging" name="coredump_backends.coredump_4_invalidate" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="debug.coredump.backends.logging" name="coredump_backends.coredump_3_verify" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="debug.coredump.backends.logging" name="coredump_backends.coredump_2_size" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="debug.coredump.backends.logging" name="coredump_backends.coredump_1_stored" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="debug.coredump.backends.logging" name="coredump_backends.coredump_0_ready" time="0.00" />
		<testcase classname="debug.coredump.backends.in_memory" name="coredump_backends.coredump_5_erase" time="0.00" />
		<testcase classname="debug.coredump.backends.in_memory" name="coredump_backends.coredump_4_invalidate" time="0.00" />
		<testcase classname="debug.coredump.backends.in_memory" name="coredump_backends.coredump_3_verify" time="0.00" />
		<testcase classname="debug.coredump.backends.in_memory" name="coredump_backends.coredump_2_size" time="0.00" />
		<testcase classname="debug.coredump.backends.in_memory" name="coredump_backends.coredump_1_stored" time="0.00" />
		<testcase classname="debug.coredump.backends.in_memory" name="coredump_backends.coredump_0_ready" time="0.00" />
		<testcase classname="debug.coredump.backends.other" name="coredump_backends.coredump_5_erase" time="0.00" />
		<testcase classname="debug.coredump.backends.other" name="coredump_backends.coredump_4_invalidate" time="0.00" />
		<testcase classname="debug.coredump.backends.other" name="coredump_backends.coredump_3_verify" time="0.00" />
		<testcase classname="debug.coredump.backends.other" name="coredump_backends.coredump_2_size" time="0.00" />
		<testcase classname="debug.coredump.backends.other" name="coredump_backends.coredump_1_stored" time="0.00" />
		<testcase classname="debug.coredump.backends.other" name="coredump_backends.coredump_0_ready" time="0.00" />
		<testcase classname="debug.cpu_load" name="cpu_load.load" time="5.49" />
		<testcase classname="debug.cpu_load.periodic_report" name="cpu_load.callback_load_high" time="0.40" />
		<testcase classname="debug.cpu_load.periodic_report" name="cpu_load.callback_load_low" time="0.20" />
		<testcase classname="debug.cpu_load.periodic_report" name="cpu_load.periodic_report" time="0.45" />
		<testcase classname="debug.cpu_load.periodic_report" name="cpu_load.load" time="0.30" />
		<testcase classname="debug.cs_trace_defmt" name="coresight_trace_deformatter_test.basic2" time="0.00" />
		<testcase classname="debug.cs_trace_defmt" name="coresight_trace_deformatter_test.basic" time="0.00" />
		<testcase classname="debug.cs_trace_defmt" name="coresight_trace_deformatter_test.err_check" time="0.00" />
		<testcase classname="debug.coredump.threads" name="debug.coredump.threads" time="8.78" />
		<testcase classname="input.api.thread" name="input_api.sequence_thread" time="6.70" />
		<testcase classname="input.api.synchronous" name="input_api.report_apis" time="0.00" />
		<testcase classname="input.api.synchronous" name="input_api.synchronous" time="0.00" />
		<testcase classname="rtio.workq" name="rtio_work.used_count_keeps_track_of_alloc_items" time="0.00" />
		<testcase classname="rtio.workq" name="rtio_work.work_supports_preempting_on_higher_prio_submissions" time="0.01" />
		<testcase classname="rtio.workq" name="rtio_work.work_supports_working_same_prio_items_on_separate_threads" time="0.01" />
		<testcase classname="rtio.workq" name="rtio_work.work_supports_batching_submissions" time="0.01" />
		<testcase classname="rtio.workq" name="rtio_work.work_decouples_submission" time="0.00" />
		<testcase classname="zdsp.utils" name="shift_q7.shift_q7_to_f64_3" time="0.00" />
		<testcase classname="zdsp.utils" name="shift_q7.shift_q7_to_f64_2" time="0.00" />
		<testcase classname="zdsp.utils" name="shift_q7.shift_q7_to_f64_1" time="0.00" />
		<testcase classname="zdsp.utils" name="shift_q7.shift_q7_to_f64_0" time="0.00" />
		<testcase classname="zdsp.utils" name="shift_q7.shift_q7_to_f32_3" time="0.00" />
		<testcase classname="zdsp.utils" name="shift_q7.shift_q7_to_f32_2" time="0.00" />
		<testcase classname="zdsp.utils" name="shift_q7.shift_q7_to_f32_1" time="0.00" />
		<testcase classname="zdsp.utils" name="shift_q7.shift_q7_to_f32_0" time="0.00" />
		<testcase classname="zdsp.utils" name="shift_q15.shift_q15_to_f64_3" time="0.00" />
		<testcase classname="zdsp.utils" name="shift_q15.shift_q15_to_f64_2" time="0.00" />
		<testcase classname="zdsp.utils" name="shift_q15.shift_q15_to_f64_1" time="0.00" />
		<testcase classname="zdsp.utils" name="shift_q15.shift_q15_to_f64_0" time="0.00" />
		<testcase classname="zdsp.utils" name="shift_q15.shift_q15_to_f32_3" time="0.00" />
		<testcase classname="zdsp.utils" name="shift_q15.shift_q15_to_f32_2" time="0.00" />
		<testcase classname="zdsp.utils" name="shift_q15.shift_q15_to_f32_1" time="0.00" />
		<testcase classname="zdsp.utils" name="shift_q15.shift_q15_to_f32_0" time="0.00" />
		<testcase classname="zdsp.utils" name="shift_q31.shift_q31_to_f64_3" time="0.00" />
		<testcase classname="zdsp.utils" name="shift_q31.shift_q31_to_f64_2" time="0.00" />
		<testcase classname="zdsp.utils" name="shift_q31.shift_q31_to_f64_1" time="0.00" />
		<testcase classname="zdsp.utils" name="shift_q31.shift_q31_to_f64_0" time="0.00" />
		<testcase classname="zdsp.utils" name="shift_q31.shift_q31_to_f32_3" time="0.00" />
		<testcase classname="zdsp.utils" name="shift_q31.shift_q31_to_f32_2" time="0.00" />
		<testcase classname="zdsp.utils" name="shift_q31.shift_q31_to_f32_1" time="0.00" />
		<testcase classname="zdsp.utils" name="shift_q31.shift_q31_to_f32_0" time="0.00" />
		<testcase classname="zdsp.utils" name="shift_f32.shift_f32_to_q31_3" time="0.00" />
		<testcase classname="zdsp.utils" name="shift_f32.shift_f32_to_q31_2" time="0.00" />
		<testcase classname="zdsp.utils" name="shift_f32.shift_f32_to_q31_1" time="0.00" />
		<testcase classname="zdsp.utils" name="shift_f32.shift_f32_to_q31_0" time="0.00" />
		<testcase classname="zdsp.utils" name="shift_f32.shift_f32_to_q15_3" time="0.00" />
		<testcase classname="zdsp.utils" name="shift_f32.shift_f32_to_q15_2" time="0.00" />
		<testcase classname="zdsp.utils" name="shift_f32.shift_f32_to_q15_1" time="0.00" />
		<testcase classname="zdsp.utils" name="shift_f32.shift_f32_to_q15_0" time="0.00" />
		<testcase classname="zdsp.utils" name="shift_f32.shift_f32_to_q7_3" time="0.00" />
		<testcase classname="zdsp.utils" name="shift_f32.shift_f32_to_q7_2" time="0.00" />
		<testcase classname="zdsp.utils" name="shift_f32.shift_f32_to_q7_1" time="0.00" />
		<testcase classname="zdsp.utils" name="shift_f32.shift_f32_to_q7_0" time="0.00" />
		<testcase classname="zdsp.utils" name="shift_f64.shift_f64_to_q31_3" time="0.00" />
		<testcase classname="zdsp.utils" name="shift_f64.shift_f64_to_q31_2" time="0.00" />
		<testcase classname="zdsp.utils" name="shift_f64.shift_f64_to_q31_1" time="0.00" />
		<testcase classname="zdsp.utils" name="shift_f64.shift_f64_to_q31_0" time="0.00" />
		<testcase classname="zdsp.utils" name="shift_f64.shift_f64_to_q15_3" time="0.00" />
		<testcase classname="zdsp.utils" name="shift_f64.shift_f64_to_q15_2" time="0.00" />
		<testcase classname="zdsp.utils" name="shift_f64.shift_f64_to_q15_1" time="0.00" />
		<testcase classname="zdsp.utils" name="shift_f64.shift_f64_to_q15_0" time="0.00" />
		<testcase classname="zdsp.utils" name="shift_f64.shift_f64_to_q7_3" time="0.00" />
		<testcase classname="zdsp.utils" name="shift_f64.shift_f64_to_q7_2" time="0.00" />
		<testcase classname="zdsp.utils" name="shift_f64.shift_f64_to_q7_1" time="0.00" />
		<testcase classname="zdsp.utils" name="shift_f64.shift_f64_to_q7_0" time="0.00" />
		<testcase classname="settings.nvs" name="settings_config.config_empty_lookups" time="0.00" />
		<testcase classname="settings.nvs" name="settings_config.config_commit" time="0.00" />
		<testcase classname="settings.nvs" name="settings_config.config_getset_int" time="0.00" />
		<testcase classname="settings.nvs" name="settings_config.config_getset_int64" time="0.00" />
		<testcase classname="settings.nvs" name="settings_config.config_getset_unknown" time="0.00" />
		<testcase classname="settings.zms" name="settings_config.config_empty_lookups" time="0.00" />
		<testcase classname="settings.zms" name="settings_config.config_commit" time="0.00" />
		<testcase classname="settings.zms" name="settings_config.config_getset_int" time="0.00" />
		<testcase classname="settings.zms" name="settings_config.config_getset_int64" time="0.00" />
		<testcase classname="settings.zms" name="settings_config.config_getset_unknown" time="0.00" />
		<testcase classname="logging.log_links" name="log_links.log_source_name_get" time="0.00" />
		<testcase classname="logging.log_links" name="log_links.log_domain_name_get" time="0.00" />
		<testcase classname="logging.log_links" name="log_links.log_runtime_level_set" time="0.00" />
		<testcase classname="logging.log_links" name="log_links.log_compiled_level_get" time="0.00" />
		<testcase classname="logging.log_links" name="log_links.log_source_count" time="0.00" />
		<testcase classname="logging.log_links" name="log_links.log_domain_count" time="0.00" />
		<testcase classname="logging.log_custom_header" name="log_custom_header.macro_prefix" time="5.13" />
		<testcase classname="logging.output.default_timestamp" name="test_timestamp.custom_timestamp" time="9.18" />
		<testcase classname="logging.output.custom_timestamp" name="test_timestamp.custom_timestamp" time="6.52" />
		<testcase classname="debug.coresight.stp_demux" name="log_frontend_stmesp_demux_test.reset" time="0.00" />
		<testcase classname="debug.coresight.stp_demux" name="log_frontend_stmesp_demux_test.hw_event" time="0.00" />
		<testcase classname="debug.coresight.stp_demux" name="log_frontend_stmesp_demux_test.trace_point" time="0.00" />
		<testcase classname="debug.coresight.stp_demux" name="log_frontend_stmesp_demux_test.max_utilization" time="0.00" />
		<testcase classname="debug.coresight.stp_demux" name="log_frontend_stmesp_demux_test.drop_too_many_active" time="0.00" />
		<testcase classname="debug.coresight.stp_demux" name="log_frontend_stmesp_demux_test.mix" time="0.00" />
		<testcase classname="debug.coresight.stp_demux" name="log_frontend_stmesp_demux_test.overwrite" time="0.00" />
		<testcase classname="debug.coresight.stp_demux" name="log_frontend_stmesp_demux_test.basic" time="0.00" />
		<testcase classname="debug.coresight.stp_demux" name="log_frontend_stmesp_demux_test.init" time="0.00" />
		<testcase classname="debug.coresight.stp_demux_max_utilization" name="log_frontend_stmesp_demux_test.reset" time="0.00" />
		<testcase classname="debug.coresight.stp_demux_max_utilization" name="log_frontend_stmesp_demux_test.hw_event" time="0.00" />
		<testcase classname="debug.coresight.stp_demux_max_utilization" name="log_frontend_stmesp_demux_test.trace_point" time="0.00" />
		<testcase classname="debug.coresight.stp_demux_max_utilization" name="log_frontend_stmesp_demux_test.max_utilization" time="0.00" />
		<testcase classname="debug.coresight.stp_demux_max_utilization" name="log_frontend_stmesp_demux_test.drop_too_many_active" time="0.00" />
		<testcase classname="debug.coresight.stp_demux_max_utilization" name="log_frontend_stmesp_demux_test.mix" time="0.00" />
		<testcase classname="debug.coresight.stp_demux_max_utilization" name="log_frontend_stmesp_demux_test.overwrite" time="0.00" />
		<testcase classname="debug.coresight.stp_demux_max_utilization" name="log_frontend_stmesp_demux_test.basic" time="0.00" />
		<testcase classname="debug.coresight.stp_demux_max_utilization" name="log_frontend_stmesp_demux_test.init" time="0.00" />
		<testcase classname="logging.mipi_syst" name="log_syst.log_syst_float_data" time="0.00" />
		<testcase classname="logging.mipi_syst" name="log_syst.log_syst_data_multiple_args" time="0.00" />
		<testcase classname="logging.mipi_syst" name="log_syst.log_syst_data" time="0.00" />
		<testcase classname="logging.mipi_syst" name="log_syst.log_syst_format_table_selection" time="0.00" />
		<testcase classname="logging.mipi_syst.text" name="log_syst.log_syst_float_data" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="logging.mipi_syst.text" name="log_syst.log_syst_data_multiple_args" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="logging.mipi_syst.text" name="log_syst.log_syst_data" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="logging.mipi_syst.text" name="log_syst.log_syst_format_table_selection" time="0.00" />
		<testcase classname="logging.output" name="test_log_output.skip_src" time="0.00" />
		<testcase classname="logging.output" name="test_log_output.thread_id" time="0.00" />
		<testcase classname="logging.output" name="test_log_output.colors" time="0.00" />
		<testcase classname="logging.output" name="test_log_output.levels" time="0.00" />
		<testcase classname="logging.output" name="test_log_output.ts_to_us" time="0.00" />
		<testcase classname="logging.output" name="test_log_output.format_ts" time="0.00" />
		<testcase classname="logging.output" name="test_log_output.ts_flag" time="0.00" />
		<testcase classname="logging.output" name="test_log_output.level_flag" time="0.00" />
		<testcase classname="logging.output" name="test_log_output.no_flags_dname" time="0.00" />
		<testcase classname="logging.output" name="test_log_output.raw" time="0.00" />
		<testcase classname="logging.output" name="test_log_output.no_flags" time="0.00" />
		<testcase classname="logging.output.ts64" name="test_log_output.skip_src" time="0.00" />
		<testcase classname="logging.output.ts64" name="test_log_output.thread_id" time="0.00" />
		<testcase classname="logging.output.ts64" name="test_log_output.colors" time="0.00" />
		<testcase classname="logging.output.ts64" name="test_log_output.levels" time="0.00" />
		<testcase classname="logging.output.ts64" name="test_log_output.ts_to_us" time="0.00" />
		<testcase classname="logging.output.ts64" name="test_log_output.format_ts" time="0.00" />
		<testcase classname="logging.output.ts64" name="test_log_output.ts_flag" time="0.00" />
		<testcase classname="logging.output.ts64" name="test_log_output.level_flag" time="0.00" />
		<testcase classname="logging.output.ts64" name="test_log_output.no_flags_dname" time="0.00" />
		<testcase classname="logging.output.ts64" name="test_log_output.raw" time="0.00" />
		<testcase classname="logging.output.ts64" name="test_log_output.no_flags" time="0.00" />
		<testcase classname="logging.output.ts64.date" name="test_log_output.skip_src" time="0.00" />
		<testcase classname="logging.output.ts64.date" name="test_log_output.thread_id" time="0.00" />
		<testcase classname="logging.output.ts64.date" name="test_log_output.colors" time="0.00" />
		<testcase classname="logging.output.ts64.date" name="test_log_output.levels" time="0.00" />
		<testcase classname="logging.output.ts64.date" name="test_log_output.ts_to_us" time="0.00" />
		<testcase classname="logging.output.ts64.date" name="test_log_output.format_ts" time="0.01" />
		<testcase classname="logging.output.ts64.date" name="test_log_output.ts_flag" time="0.00" />
		<testcase classname="logging.output.ts64.date" name="test_log_output.level_flag" time="0.00" />
		<testcase classname="logging.output.ts64.date" name="test_log_output.no_flags_dname" time="0.00" />
		<testcase classname="logging.output.ts64.date" name="test_log_output.raw" time="0.00" />
		<testcase classname="logging.output.ts64.date" name="test_log_output.no_flags" time="0.00" />
		<testcase classname="logging.output.ts64.date.fulllibc" name="test_log_output.skip_src" time="0.00" />
		<testcase classname="logging.output.ts64.date.fulllibc" name="test_log_output.thread_id" time="0.00" />
		<testcase classname="logging.output.ts64.date.fulllibc" name="test_log_output.colors" time="0.00" />
		<testcase classname="logging.output.ts64.date.fulllibc" name="test_log_output.levels" time="0.00" />
		<testcase classname="logging.output.ts64.date.fulllibc" name="test_log_output.ts_to_us" time="0.00" />
		<testcase classname="logging.output.ts64.date.fulllibc" name="test_log_output.format_ts" time="0.01" />
		<testcase classname="logging.output.ts64.date.fulllibc" name="test_log_output.ts_flag" time="0.00" />
		<testcase classname="logging.output.ts64.date.fulllibc" name="test_log_output.level_flag" time="0.00" />
		<testcase classname="logging.output.ts64.date.fulllibc" name="test_log_output.no_flags_dname" time="0.00" />
		<testcase classname="logging.output.ts64.date.fulllibc" name="test_log_output.raw" time="0.00" />
		<testcase classname="logging.output.ts64.date.fulllibc" name="test_log_output.no_flags" time="0.00" />
		<testcase classname="logging.output.ts64.iso8601" name="test_log_output.skip_src" time="0.00" />
		<testcase classname="logging.output.ts64.iso8601" name="test_log_output.thread_id" time="0.00" />
		<testcase classname="logging.output.ts64.iso8601" name="test_log_output.colors" time="0.00" />
		<testcase classname="logging.output.ts64.iso8601" name="test_log_output.levels" time="0.00" />
		<testcase classname="logging.output.ts64.iso8601" name="test_log_output.ts_to_us" time="0.00" />
		<testcase classname="logging.output.ts64.iso8601" name="test_log_output.format_ts" time="0.01" />
		<testcase classname="logging.output.ts64.iso8601" name="test_log_output.ts_flag" time="0.00" />
		<testcase classname="logging.output.ts64.iso8601" name="test_log_output.level_flag" time="0.00" />
		<testcase classname="logging.output.ts64.iso8601" name="test_log_output.no_flags_dname" time="0.00" />
		<testcase classname="logging.output.ts64.iso8601" name="test_log_output.raw" time="0.00" />
		<testcase classname="logging.output.ts64.iso8601" name="test_log_output.no_flags" time="0.00" />
		<testcase classname="logging.output.ts64.iso8601.fulllibc" name="test_log_output.skip_src" time="0.00" />
		<testcase classname="logging.output.ts64.iso8601.fulllibc" name="test_log_output.thread_id" time="0.00" />
		<testcase classname="logging.output.ts64.iso8601.fulllibc" name="test_log_output.colors" time="0.00" />
		<testcase classname="logging.output.ts64.iso8601.fulllibc" name="test_log_output.levels" time="0.00" />
		<testcase classname="logging.output.ts64.iso8601.fulllibc" name="test_log_output.ts_to_us" time="0.00" />
		<testcase classname="logging.output.ts64.iso8601.fulllibc" name="test_log_output.format_ts" time="0.01" />
		<testcase classname="logging.output.ts64.iso8601.fulllibc" name="test_log_output.ts_flag" time="0.00" />
		<testcase classname="logging.output.ts64.iso8601.fulllibc" name="test_log_output.level_flag" time="0.00" />
		<testcase classname="logging.output.ts64.iso8601.fulllibc" name="test_log_output.no_flags_dname" time="0.00" />
		<testcase classname="logging.output.ts64.iso8601.fulllibc" name="test_log_output.raw" time="0.00" />
		<testcase classname="logging.output.ts64.iso8601.fulllibc" name="test_log_output.no_flags" time="0.00" />
		<testcase classname="logging.output.thread_id" name="test_log_output.skip_src" time="0.00" />
		<testcase classname="logging.output.thread_id" name="test_log_output.thread_id" time="0.00" />
		<testcase classname="logging.output.thread_id" name="test_log_output.colors" time="0.00" />
		<testcase classname="logging.output.thread_id" name="test_log_output.levels" time="0.00" />
		<testcase classname="logging.output.thread_id" name="test_log_output.ts_to_us" time="0.00" />
		<testcase classname="logging.output.thread_id" name="test_log_output.format_ts" time="0.00" />
		<testcase classname="logging.output.thread_id" name="test_log_output.ts_flag" time="0.00" />
		<testcase classname="logging.output.thread_id" name="test_log_output.level_flag" time="0.00" />
		<testcase classname="logging.output.thread_id" name="test_log_output.no_flags_dname" time="0.00" />
		<testcase classname="logging.output.thread_id" name="test_log_output.raw" time="0.00" />
		<testcase classname="logging.output.thread_id" name="test_log_output.no_flags" time="0.00" />
		<testcase classname="logging.log_link_order" name="log_link_order.log_one_remote_ordering" time="0.00" />
		<testcase classname="logging.log_link_order" name="log_link_order.log_local_unordered" time="0.00" />
		<testcase classname="logging.log_link_order" name="log_link_order.log_only_local" time="0.00" />
		<testcase classname="logging.immediate" name="log_immediate.log_immediate_preemption" time="7.67" />
		<testcase classname="logging.immediate.clean_output" name="log_immediate.log_immediate_preemption" time="8.01" />
		<testcase classname="logging.async" name="test_log_core_additional.log_msg_create" time="0.00" />
		<testcase classname="logging.async" name="test_log_core_additional.log_generic" time="0.00" />
		<testcase classname="logging.async" name="test_log_core_additional.log_thread_trigger" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="logging.async" name="test_log_core_additional.log_thread" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="logging.async" name="test_log_core_additional.multiple_backends" time="0.00" />
		<testcase classname="logging.async" name="test_log_core_additional.log_timestamping" time="0.01" />
		<testcase classname="logging.async" name="test_log_core_additional.log_severity" time="0.00" />
		<testcase classname="logging.async" name="test_log_core_additional.log_early_logging" time="0.01" />
		<testcase classname="logging.async" name="test_log_core_additional.log_sync" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="logging.async" name="test_log_core_additional.log_domain_id" time="0.01" />
		<testcase classname="logging.async" name="test_log_core_additional.log_backend" time="0.00" />
		<testcase classname="logging.sync" name="test_log_core_additional.log_msg_create" time="0.00" />
		<testcase classname="logging.sync" name="test_log_core_additional.log_generic" time="0.02" />
		<testcase classname="logging.sync" name="test_log_core_additional.log_thread_trigger" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="logging.sync" name="test_log_core_additional.log_thread" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="logging.sync" name="test_log_core_additional.multiple_backends" time="0.00" />
		<testcase classname="logging.sync" name="test_log_core_additional.log_timestamping" time="0.02" />
		<testcase classname="logging.sync" name="test_log_core_additional.log_severity" time="0.02" />
		<testcase classname="logging.sync" name="test_log_core_additional.log_early_logging" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="logging.sync" name="test_log_core_additional.log_sync" time="0.01" />
		<testcase classname="logging.sync" name="test_log_core_additional.log_domain_id" time="0.01" />
		<testcase classname="logging.sync" name="test_log_core_additional.log_backend" time="0.00" />
		<testcase classname="logging.thread" name="test_log_core_additional.log_msg_create" time="0.01" />
		<testcase classname="logging.thread" name="test_log_core_additional.log_generic" time="0.01" />
		<testcase classname="logging.thread" name="test_log_core_additional.log_thread_trigger" time="0.00" />
		<testcase classname="logging.thread" name="test_log_core_additional.log_thread" time="2.01" />
		<testcase classname="logging.thread" name="test_log_core_additional.multiple_backends" time="0.00" />
		<testcase classname="logging.thread" name="test_log_core_additional.log_timestamping" time="0.01" />
		<testcase classname="logging.thread" name="test_log_core_additional.log_severity" time="0.01" />
		<testcase classname="logging.thread" name="test_log_core_additional.log_early_logging" time="0.02" />
		<testcase classname="logging.thread" name="test_log_core_additional.log_sync" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="logging.thread" name="test_log_core_additional.log_domain_id" time="0.01" />
		<testcase classname="logging.thread" name="test_log_core_additional.log_backend" time="0.00" />
		<testcase classname="logging.log_user" name="test_log_core_additional.log_msg_create_user" time="0.03" />
		<testcase classname="logging.log_user" name="test_log_core_additional.log_printk_from_user" time="0.00" />
		<testcase classname="logging.log_user" name="test_log_core_additional.log_panic" time="0.02" />
		<testcase classname="logging.log_user" name="test_log_core_additional.log_filter_set" time="0.00" />
		<testcase classname="logging.log_user" name="test_log_core_additional.log_generic_user" time="0.02" />
		<testcase classname="logging.log_user" name="test_log_core_additional.log_hexdump_from_user" time="0.03" />
		<testcase classname="logging.log_user" name="test_log_core_additional.log_from_user" time="0.04" />
		<testcase classname="logging.backend.uart.single" name="log_backend_uart.log_backend_uart_multi_instance" time="7.08" />
		<testcase classname="logging.backend.uart.multi" name="log_backend_uart.log_backend_uart_multi_instance" time="5.20" />
		<testcase classname="logging.backend.initialization" name="log_backend_init.log_backends_initialization" time="9.46" />
		<testcase classname="logging.cache" name="test_log_cache.log_cache_basic" time="9.44" />
		<testcase classname="logging.format.switch.deferred" name="log_switch_format.log_switch_format" time="6.19" />
		<testcase classname="logging.format.switch.immediate" name="log_switch_format.log_switch_format" time="5.44" />
		<testcase classname="logging.format.switch.custom_output" name="log_switch_format.log_switch_format_does_not_log_when_uninit" time="0.00" />
		<testcase classname="logging.format.switch.custom_output" name="log_switch_format.log_switch_format_custom_output_called_when_set" time="0.00" />
		<testcase classname="logging.format.switch.custom_output" name="log_switch_format.log_switch_format_custom_output_handles_null" time="0.00" />
		<testcase classname="logging.format.switch.custom_output" name="log_switch_format.log_switch_format" time="0.01" />
		<testcase classname="logging.benchmark" name="test_log_benchmark.log_message_with_string" time="0.01" />
		<testcase classname="logging.benchmark" name="test_log_benchmark.log_message_store_time_no_overwrite_from_user" time="0.00" />
		<testcase classname="logging.benchmark" name="test_log_benchmark.log_message_store_time_overwrite" time="0.03" />
		<testcase classname="logging.benchmark" name="test_log_benchmark.log_message_store_time_no_overwrite" time="0.02" />
		<testcase classname="logging.benchmark" name="test_log_benchmark.log_capacity" time="0.01" />
		<testcase classname="logging.benchmark_speed" name="test_log_benchmark.log_message_with_string" time="0.01" />
		<testcase classname="logging.benchmark_speed" name="test_log_benchmark.log_message_store_time_no_overwrite_from_user" time="0.00" />
		<testcase classname="logging.benchmark_speed" name="test_log_benchmark.log_message_store_time_overwrite" time="0.02" />
		<testcase classname="logging.benchmark_speed" name="test_log_benchmark.log_message_store_time_no_overwrite" time="0.01" />
		<testcase classname="logging.benchmark_speed" name="test_log_benchmark.log_capacity" time="0.01" />
		<testcase classname="ipc.icmsg_pbuf" name="test_pbuf.stress" time="3.08" />
		<testcase classname="ipc.icmsg_pbuf" name="test_pbuf.retcodes" time="0.07" />
		<testcase classname="ipc.icmsg_pbuf" name="test_pbuf.rw" time="0.00" />
		<testcase classname="shell.history" name="shell_test.storing_long_buffers" time="0.00" />
		<testcase classname="shell.history" name="shell_test.no_duplicates_in_a_row" time="0.00" />
		<testcase classname="shell.history" name="shell_test.too_long_line_not_stored" time="0.00" />
		<testcase classname="shell.history" name="shell_test.history_get_up_and_down" time="0.00" />
		<testcase classname="shell.history" name="shell_test.history_purge" time="0.00" />
		<testcase classname="shell.history" name="shell_test.history_add_get" time="0.00" />
		<testcase classname="shell.shell_custom_header" name="sh.shell_fprintf" time="5.84" />
		<testcase classname="shell.core" name="sh.section_cmd" time="0.02" />
		<testcase classname="shell.core" name="sh.cmd_dict" time="0.01" />
		<testcase classname="shell.core" name="sh.max_argc" time="0.01" />
		<testcase classname="shell.core" name="sh.mand_2_opt_raw" time="0.03" />
		<testcase classname="shell.core" name="sh.cmd_mand_1_opt_raw" time="0.02" />
		<testcase classname="shell.core" name="sh.shell_fprintf" time="0.00" />
		<testcase classname="shell.core" name="sh.set_root_cmd" time="0.02" />
		<testcase classname="shell.core" name="sh.cmd_select" time="0.03" />
		<testcase classname="shell.core" name="sh.shell_wildcards_dynamic" time="0.01" />
		<testcase classname="shell.core" name="sh.shell_wildcards_static" time="0.03" />
		<testcase classname="shell.core" name="sh.shell_module" time="0.03" />
		<testcase classname="shell.core" name="sh.cmd_resize" time="0.04" />
		<testcase classname="shell.core" name="sh.cmd_history" time="0.02" />
		<testcase classname="shell.core" name="sh.cmd_shell" time="0.27" />
		<testcase classname="shell.core" name="sh.cmd_clear" time="0.02" />
		<testcase classname="shell.core" name="shell_1cpu.cmd_help" time="0.02" />
		<testcase classname="message_bus.zbus.dyn_channel.static_and_dynamic_channels" name="dynamic.malloc" time="1.01" />
		<testcase classname="message_bus.zbus.dyn_channel.static_and_dynamic_channels" name="dynamic.static" time="1.01" />
		<testcase classname="message_bus.zbus.general_unittests" name="basic.specification_based__zbus_obs_attach_detach" time="0.03" />
		<testcase classname="message_bus.zbus.general_unittests" name="basic.specification_based__zbus_sub_wait_msg" time="0.23" />
		<testcase classname="message_bus.zbus.general_unittests" name="basic.specification_based__zbus_sub_wait" time="0.23" />
		<testcase classname="message_bus.zbus.general_unittests" name="basic.specification_based__zbus_obs_set_chan_notification_mask" time="0.04" />
		<testcase classname="message_bus.zbus.general_unittests" name="basic.specification_based__zbus_obs_set_enable" time="0.62" />
		<testcase classname="message_bus.zbus.general_unittests" name="basic.hard_channel" time="0.01" />
		<testcase classname="message_bus.zbus.general_unittests" name="basic.iterators" time="1.03" />
		<testcase classname="message_bus.zbus.general_unittests" name="basic.specification_based__zbus_chan" time="3.03" />
		<testcase classname="message_bus.zbus.general_unittests_without_priority_boost" name="basic.specification_based__zbus_obs_attach_detach" time="0">
			<skipped type="skipped" message="ztest skip" />
		</testcase>
		<testcase classname="message_bus.zbus.general_unittests_without_priority_boost" name="basic.specification_based__zbus_sub_wait_msg" time="0.23" />
		<testcase classname="message_bus.zbus.general_unittests_without_priority_boost" name="basic.specification_based__zbus_sub_wait" time="0.23" />
		<testcase classname="message_bus.zbus.general_unittests_without_priority_boost" name="basic.specification_based__zbus_obs_set_chan_notification_mask" time="0.04" />
		<testcase classname="message_bus.zbus.general_unittests_without_priority_boost" name="basic.specification_based__zbus_obs_set_enable" time="0.62" />
		<testcase classname="message_bus.zbus.general_unittests_without_priority_boost" name="basic.hard_channel" time="0.01" />
		<testcase classname="message_bus.zbus.general_unittests_without_priority_boost" name="basic.iterators" time="1.03" />
		<testcase classname="message_bus.zbus.general_unittests_without_priority_boost" name="basic.specification_based__zbus_chan" time="3.03" />
		<testcase classname="message_bus.zbus.runtime_obs_reg.add_and_remove_observers_with_node" name="basic.remove_first_runtime_observer_alloc_none" time="0.02" />
		<testcase classname="message_bus.zbus.runtime_obs_reg.add_and_remove_observers_with_node" name="basic.specification_based__zbus_obs_priority" time="0.01" />
		<testcase classname="message_bus.zbus.runtime_obs_reg.add_and_remove_observers_with_node" name="basic.specification_based__zbus_obs_add_rm_obs_busy" time="1.00" />
		<testcase classname="message_bus.zbus.runtime_obs_reg.add_and_remove_observers_with_node" name="basic.specification_based__zbus_obs_add_rm_obs" time="0.53" />
		<testcase classname="message_bus.zbus.user_data.channel_user_data" name="user_data.user_data_regression" time="1.01" />
		<testcase classname="message_bus.zbus.user_data.channel_user_data" name="user_data.channel_user_data" time="0.00" />
		<testcase classname="message_bus.zbus.hlp_priority_boost" name="hlp_priority_boost.priority_elevation" time="6.82" />
		<testcase classname="message_bus.zbus.module_interaction_no_error" name="integration.event_dispatcher_queue_timeout" time="1.64" />
		<testcase classname="message_bus.zbus.module_interaction_no_error" name="integration.event_dispatcher_mutex_timeout" time="3.00" />
		<testcase classname="message_bus.zbus.module_interaction_no_error" name="integration.channel_set_enable" time="1.81" />
		<testcase classname="message_bus.zbus.module_interaction_no_error" name="integration.basic" time="1.62" />
		<testcase classname="message_bus.zbus.channel_id" name="message_bus.zbus.channel_id" time="4.85" />
		<testcase classname="message_bus.zbus.publish_stats" name="publish_stats.channel_metadata" time="7.41" />
		<testcase classname="message_bus.zbus.runtime_obs_reg.add_and_remove_observers_dynamic_memory" name="basic.remove_first_runtime_observer" time="0.02" />
		<testcase classname="message_bus.zbus.runtime_obs_reg.add_and_remove_observers_dynamic_memory" name="basic.specification_based__zbus_obs_priority" time="0.01" />
		<testcase classname="message_bus.zbus.runtime_obs_reg.add_and_remove_observers_dynamic_memory" name="basic.specification_based__zbus_obs_add_rm_obs_busy" time="1.00" />
		<testcase classname="message_bus.zbus.runtime_obs_reg.add_and_remove_observers_dynamic_memory" name="basic.specification_based__zbus_obs_add_rm_obs" time="0.53" />
		<testcase classname="message_bus.zbus.runtime_obs_reg.add_and_remove_observers_static_memory" name="basic.remove_first_runtime_observer" time="0.02" />
		<testcase classname="message_bus.zbus.runtime_obs_reg.add_and_remove_observers_static_memory" name="basic.specification_based__zbus_obs_priority" time="0.01" />
		<testcase classname="message_bus.zbus.runtime_obs_reg.add_and_remove_observers_static_memory" name="basic.specification_based__zbus_obs_add_rm_obs_busy" time="1.00" />
		<testcase classname="message_bus.zbus.runtime_obs_reg.add_and_remove_observers_static_memory" name="basic.specification_based__zbus_obs_add_rm_obs" time="0.53" />
		<testcase classname="mgmt.mcumgr.fs.mgmt.hash.supported.crc32" name="fs_mgmt_hash_supported.supported" time="6.72" />
		<testcase classname="mgmt.mcumgr.fs.mgmt.hash.supported.sha256" name="fs_mgmt_hash_supported.supported" time="9.74" />
		<testcase classname="mgmt.mcumgr.fs.mgmt.hash.supported.all" name="fs_mgmt_hash_supported.supported" time="5.11" />
		<testcase classname="mgmt.mcumgr.os.echo" name="os_mgmt_echo.echo" time="5.27" />
		<testcase classname="mgmt.mcumgr.os.info" name="os_mgmt_info_custom_cmd_disabled_verify.info_cmd_custom_disabled" time="0.00" />
		<testcase classname="mgmt.mcumgr.os.info" name="os_mgmt_info_custom_cmd_disabled.info_cmd_custom_disabled" time="0.00" />
		<testcase classname="mgmt.mcumgr.os.info" name="os_mgmt_info_custom_cmd.info_cmd_custom" time="0.00" />
		<testcase classname="mgmt.mcumgr.os.info" name="os_mgmt_info_custom_os_disabled.info_os_custom_disabled" time="0.00" />
		<testcase classname="mgmt.mcumgr.os.info" name="os_mgmt_info_custom_os.info_os_custom" time="0.00" />
		<testcase classname="mgmt.mcumgr.os.info" name="os_mgmt_info.info_14_invalid_2" time="0.00" />
		<testcase classname="mgmt.mcumgr.os.info" name="os_mgmt_info.info_13_invalid_1" time="0.00" />
		<testcase classname="mgmt.mcumgr.os.info" name="os_mgmt_info.info_12_multi_2" time="0.00" />
		<testcase classname="mgmt.mcumgr.os.info" name="os_mgmt_info.info_11_multi_1" time="0.00" />
		<testcase classname="mgmt.mcumgr.os.info" name="os_mgmt_info.info_10_all" time="0.00" />
		<testcase classname="mgmt.mcumgr.os.info" name="os_mgmt_info.info_9_os" time="0.00" />
		<testcase classname="mgmt.mcumgr.os.info" name="os_mgmt_info.info_8_platform" time="0.00" />
		<testcase classname="mgmt.mcumgr.os.info" name="os_mgmt_info.info_7_processor" time="0.00" />
		<testcase classname="mgmt.mcumgr.os.info" name="os_mgmt_info.info_6_machine" time="0.00" />
		<testcase classname="mgmt.mcumgr.os.info" name="os_mgmt_info.info_5_kernel_version" time="0.00" />
		<testcase classname="mgmt.mcumgr.os.info" name="os_mgmt_info.info_4_kernel_release" time="0.00" />
		<testcase classname="mgmt.mcumgr.os.info" name="os_mgmt_info.info_3_node_name" time="0.00" />
		<testcase classname="mgmt.mcumgr.os.info" name="os_mgmt_info.info_2_kernel_name" time="0.00" />
		<testcase classname="mgmt.mcumgr.os.info" name="os_mgmt_info.info_1" time="0.00" />
		<testcase classname="mgmt.mcumgr.os.info.no_hooks" name="os_mgmt_info.info_14_invalid_2" time="0.00" />
		<testcase classname="mgmt.mcumgr.os.info.no_hooks" name="os_mgmt_info.info_13_invalid_1" time="0.00" />
		<testcase classname="mgmt.mcumgr.os.info.no_hooks" name="os_mgmt_info.info_12_multi_2" time="0.00" />
		<testcase classname="mgmt.mcumgr.os.info.no_hooks" name="os_mgmt_info.info_11_multi_1" time="0.00" />
		<testcase classname="mgmt.mcumgr.os.info.no_hooks" name="os_mgmt_info.info_10_all" time="0.00" />
		<testcase classname="mgmt.mcumgr.os.info.no_hooks" name="os_mgmt_info.info_9_os" time="0.00" />
		<testcase classname="mgmt.mcumgr.os.info.no_hooks" name="os_mgmt_info.info_8_platform" time="0.00" />
		<testcase classname="mgmt.mcumgr.os.info.no_hooks" name="os_mgmt_info.info_7_processor" time="0.00" />
		<testcase classname="mgmt.mcumgr.os.info.no_hooks" name="os_mgmt_info.info_6_machine" time="0.00" />
		<testcase classname="mgmt.mcumgr.os.info.no_hooks" name="os_mgmt_info.info_5_kernel_version" time="0.00" />
		<testcase classname="mgmt.mcumgr.os.info.no_hooks" name="os_mgmt_info.info_4_kernel_release" time="0.00" />
		<testcase classname="mgmt.mcumgr.os.info.no_hooks" name="os_mgmt_info.info_3_node_name" time="0.00" />
		<testcase classname="mgmt.mcumgr.os.info.no_hooks" name="os_mgmt_info.info_2_kernel_name" time="0.00" />
		<testcase classname="mgmt.mcumgr.os.info.no_hooks" name="os_mgmt_info.info_1" time="0.00" />
		<testcase classname="mgmt.mcumgr.os.info.build_date" name="os_mgmt_info_build_date.info_build_date_2_all" time="0.00" />
		<testcase classname="mgmt.mcumgr.os.info.build_date" name="os_mgmt_info_build_date.info_build_date_1_build_date" time="0.00" />
		<testcase classname="mgmt.mcumgr.os.info.limited_size" name="os_mgmt_info_limited.info_2_all" time="0.00" />
		<testcase classname="mgmt.mcumgr.os.info.limited_size" name="os_mgmt_info_limited.info_1_kernel_name" time="0.00" />
		<testcase classname="mgmt.mcumgr.smp.version" name="smp_version.new_command" time="0.00" />
		<testcase classname="mgmt.mcumgr.smp.version" name="smp_version.current_command" time="0.00" />
		<testcase classname="mgmt.mcumgr.smp.version" name="smp_version.legacy_command" time="0.00" />
		<testcase classname="mgmt.mcumgr.smp.version_no_legacy" name="smp_version.new_command" time="0.00" />
		<testcase classname="mgmt.mcumgr.smp.version_no_legacy" name="smp_version.current_command" time="0.00" />
		<testcase classname="mgmt.mcumgr.smp.version_no_legacy" name="smp_version.legacy_command" time="0.00" />
		<testcase classname="secure_storage.psa.crypto.secure_storage" name="secure_storage_psa_crypto.persistent_key_usage" time="0.19" />
		<testcase classname="secure_storage.psa.crypto.secure_storage" name="secure_storage_psa_crypto.its_caller_isolation" time="0.17" />
		<testcase classname="secure_storage.psa.its.secure_storage.store.settings" name="secure_storage_psa_its.write_once_flag" time="0.05" />
		<testcase classname="secure_storage.psa.its.secure_storage.store.settings" name="secure_storage_psa_its.max_num_entries" time="3.53" />
		<testcase classname="secure_storage.psa.its.secure_storage.store.settings" name="secure_storage_psa_its.all_offsets" time="3.71" />
		<testcase classname="secure_storage.psa.its.secure_storage.store.settings" name="secure_storage_psa_its.all_sizes" time="13.96" />
		<testcase classname="secure_storage.psa.its.secure_storage.custom.transform" name="secure_storage_psa_its.write_once_flag" time="0.06" />
		<testcase classname="secure_storage.psa.its.secure_storage.custom.transform" name="secure_storage_psa_its.max_num_entries" time="23.96" />
		<testcase classname="secure_storage.psa.its.secure_storage.custom.transform" name="secure_storage_psa_its.all_offsets" time="0.70" />
		<testcase classname="secure_storage.psa.its.secure_storage.custom.transform" name="secure_storage_psa_its.all_sizes" time="11.37" />
		<testcase classname="secure_storage.psa.its.secure_storage.custom.store" name="secure_storage_psa_its.max_num_entries" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="secure_storage.psa.its.secure_storage.custom.store" name="secure_storage_psa_its.all_offsets" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="secure_storage.psa.its.secure_storage.custom.store" name="secure_storage_psa_its.all_sizes" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="secure_storage.psa.its.secure_storage.custom.store" name="secure_storage_psa_its.write_once_flag" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="secure_storage.psa.its.secure_storage.custom.both" name="secure_storage_psa_its.max_num_entries" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="secure_storage.psa.its.secure_storage.custom.both" name="secure_storage_psa_its.all_offsets" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="secure_storage.psa.its.secure_storage.custom.both" name="secure_storage_psa_its.all_sizes" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="secure_storage.psa.its.secure_storage.custom.both" name="secure_storage_psa_its.write_once_flag" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="sample.basic.helloworld" name="sample.basic.helloworld" time="5.41" />
		<testcase classname="sample.psa.its.secure_storage.entropy_not_secure" name="sample.psa.its.secure_storage.entropy_not_secure" time="4.53" />
		<testcase classname="sample.psa.persistent_key.secure_storage.entropy_not_secure" name="sample.psa.persistent_key.secure_storage.entropy_not_secure" time="4.94" />
		<testcase classname="sample.libraries.hash_map.minimal.separate_chaining.djb2" name="sample.libraries.hash_map.minimal.separate_chaining.djb2" time="12.43" />
		<testcase classname="sample.libraries.hash_map.minimal.open_addressing.djb2" name="sample.libraries.hash_map.minimal.open_addressing.djb2" time="10.37" />
		<testcase classname="sample.libraries.hash_map.newlib.separate_chaining.djb2" name="sample.libraries.hash_map.newlib.separate_chaining.djb2" time="10.87" />
		<testcase classname="sample.libraries.hash_map.newlib.open_addressing.djb2" name="sample.libraries.hash_map.newlib.open_addressing.djb2" time="9.05" />
		<testcase classname="sample.libraries.hash_map.newlib.cxx_unordered_map.djb2" name="sample.libraries.hash_map.newlib.cxx_unordered_map.djb2" time="9.16" />
		<testcase classname="sample.libraries.hash_map.picolibc.separate_chaining.djb2" name="sample.libraries.hash_map.picolibc.separate_chaining.djb2" time="9.43" />
		<testcase classname="sample.libraries.hash_map.picolibc.open_addressing.djb2" name="sample.libraries.hash_map.picolibc.open_addressing.djb2" time="9.75" />
		<testcase classname="sample.basic.sys_heap" name="sample.basic.sys_heap" time="3.81" />
		<testcase classname="sample.cpp.synchronization" name="sample.cpp.synchronization" time="8.12" />
		<testcase classname="sample.cpp.synchronization.picolibc" name="sample.cpp.synchronization.picolibc" time="7.59" />
		<testcase classname="sample.app_dev.external_lib" name="sample.app_dev.external_lib" time="4.10" />
		<testcase classname="sample.kernel.metairq_dispatch" name="sample.kernel.metairq_dispatch" time="6.04" />
		<testcase classname="sample.kernel.cond_var.simple" name="sample.kernel.cond_var.simple" time="9.08" />
		<testcase classname="sample.kernel.cond_var" name="sample.kernel.cond_var" time="9.57" />
		<testcase classname="sample.kernel.bootargs.tokenization" name="sample.kernel.bootargs.tokenization" time="4.02" />
		<testcase classname="sample.data_structures.min-heap" name="sample.data_structures.min-heap" time="10.69" />
		<testcase classname="sample.sensor.soc_voltage" name="sample.sensor.soc_voltage" time="6.11" />
		<testcase classname="sample.sensor.die_temperature_polling" name="sample.sensor.die_temperature_polling" time="4.79" />
		<testcase classname="sample.kernel.memory_protection.shared_mem" name="sample.kernel.memory_protection.shared_mem" time="5.22" />
		<testcase classname="sample.userspace.prod_consumer" name="sample.userspace.prod_consumer" time="6.06" />
		<testcase classname="sample.helloworld" name="sample.helloworld" time="5.86" />
		<testcase classname="sample.kernel.synchronization" name="sample.kernel.synchronization" time="4.94" />
		<testcase classname="sample.kernel.philosopher" name="sample.kernel.philosopher" time="6.03" />
		<testcase classname="sample.kernel.philosopher.same_prio" name="sample.kernel.philosopher.same_prio" time="6.43" />
		<testcase classname="sample.kernel.philosopher.static" name="sample.kernel.philosopher.static" time="5.56" />
		<testcase classname="sample.kernel.philosopher.semaphores" name="sample.kernel.philosopher.semaphores" time="5.23" />
		<testcase classname="sample.kernel.philosopher.stacks" name="sample.kernel.philosopher.stacks" time="7.42" />
		<testcase classname="sample.kernel.philosopher.fifos" name="sample.kernel.philosopher.fifos" time="4.56" />
		<testcase classname="sample.kernel.philosopher.lifos" name="sample.kernel.philosopher.lifos" time="6.56" />
		<testcase classname="sample.kernel.philosopher.preempt_only" name="sample.kernel.philosopher.preempt_only" time="5.93" />
		<testcase classname="sample.kernel.philosopher.coop_only" name="sample.kernel.philosopher.coop_only" time="12.53" />
		<testcase classname="sample.net.cellular_modem" name="sample.net.cellular_modem" time="0">
			<skipped type="skipped" message="Quarantine: NA" />
		</testcase>
		<testcase classname="sample.modules.nanopb" name="sample.modules.nanopb" time="5.19" />
		<testcase classname="sample.modules.cmsis_dsp.moving_average" name="sample.modules.cmsis_dsp.moving_average" time="8.48" />
		<testcase classname="sample.posix.env" name="sample.posix.env" time="7.54" />
		<testcase classname="sample.posix.uname" name="sample.posix.uname" time="13.21" />
		<testcase classname="sample.posix.philosopher" name="sample.posix.philosopher" time="5.97" />
		<testcase classname="sample.posix.eventfd" name="sample.posix.eventfd" time="14.24" />
		<testcase classname="sample.boards.stm32.power_mgmt.standby_shutdown" name="sample.boards.stm32.power_mgmt.standby_shutdown" time="0">
			<skipped type="skipped" message="Quarantine: NA" />
		</testcase>
		<testcase classname="sample.boards.stm32.power_mgmt.blinky" name="sample.boards.stm32.power_mgmt.blinky" time="5.17" />
		<testcase classname="sample.mpu.mpu_test" name="sample.mpu.mpu_test.test_shell_harness" time="33.30">
			<failure type="failure" message="twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred">shell = &lt;twister_harness.helpers.shell.Shell object at 0x736f68903680&gt;
testdata_path = '/local/ztb/zephyrproject/zephyr/samples/arch/mpu/mpu_test/test_shell.yml'

    def test_shell_harness(shell: Shell, testdata_path):
        if not testdata_path:
            pytest.skip('testdata not provided')
        for command, expected in get_next_commands(testdata_path):
            logger.info('send command: %s', command)
&gt;           lines = shell.exec_command(command)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^

scripts/pylib/shell-twister-harness/test_shell.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
scripts/pylib/pytest-twister-harness/src/twister_harness/helpers/shell.py:77: in exec_command
    self._device.readlines_until(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = HardwareAdapter(), regex = 'uart:\\~\\$\\ ', num_of_lines = None
timeout = 20.0, print_output = True

    def readlines_until(
            self,
            regex: str | None = None,
            num_of_lines: int | None = None,
            timeout: float | None = None,
            print_output: bool = True,
    ) -&gt; list[str]:
        """
        Read available output lines produced by device from internal buffer
        until following conditions:
    
        1. If regex is provided - read until regex regex is found in read
           line (or until timeout).
        2. If num_of_lines is provided - read until number of read lines is
           equal to num_of_lines (or until timeout).
        3. If none of above is provided - return immediately lines collected so
           far in internal buffer.
    
        If timeout is not provided, then use base_timeout.
        """
        timeout = timeout or self.base_timeout
        if regex:
            regex_compiled = re.compile(regex)
        lines: list[str] = []
        if regex or num_of_lines:
            timeout_time: float = time.time() + timeout
            while time.time() &lt; timeout_time:
                try:
                    line = self.readline(0.1, print_output)
                except TwisterHarnessTimeoutException:
                    continue
                lines.append(line)
                if regex and regex_compiled.search(line):
                    break
                if num_of_lines and len(lines) == num_of_lines:
                    break
            else:
                msg = 'Read from device timeout occurred'
                logger.error(msg)
&gt;               raise TwisterHarnessTimeoutException(msg)
E               twister_harness.exceptions.TwisterHarnessTimeoutException: Read from device timeout occurred

scripts/pylib/pytest-twister-harness/src/twister_harness/device/device_adapter.py:192: TwisterHarnessTimeoutException</failure>
		</testcase>
		<testcase classname="sample.drivers.crypto.mbedtls" name="sample.drivers.crypto.mbedtls" time="13.66" />
		<testcase classname="sample.drivers.watchdog" name="sample.drivers.watchdog" time="0">
			<skipped type="skipped" message="Quarantine: NA" />
		</testcase>
		<testcase classname="sample.drivers.watchdog.stm32_wwdg" name="sample.drivers.watchdog.stm32_wwdg" time="0">
			<skipped type="skipped" message="Quarantine: instable behaviour on watchdog tests" />
		</testcase>
		<testcase classname="sample.drivers.watchdog.stm32h7_wwdg" name="sample.drivers.watchdog.stm32h7_wwdg" time="0">
			<skipped type="skipped" message="Quarantine: instable behaviour on watchdog tests" />
		</testcase>
		<testcase classname="sample.drivers.watchdog.stm32_iwdg" name="sample.drivers.watchdog.stm32_iwdg" time="0">
			<skipped type="skipped" message="Quarantine: instable behaviour on watchdog tests" />
		</testcase>
		<testcase classname="sample.drivers.dac" name="sample.drivers.dac" time="6.81" />
		<testcase classname="sample.drivers.flash.shell" name="sample.drivers.flash.shell" time="0">
			<skipped type="skipped" message="RAM overflow" />
		</testcase>
		<testcase classname="sample.drivers.counter.alarm.stm32_rtc" name="sample.drivers.counter.alarm.stm32_rtc" time="9.83" />
		<testcase classname="sample.task_wdt" name="sample.task_wdt" time="0">
			<skipped type="skipped" message="Quarantine: NA" />
		</testcase>
		<testcase classname="sample.bindesc" name="sample.bindesc" time="5.33" />
		<testcase classname="sample.smf.hsm_psicc2" name="sample.smf.hsm_psicc2" time="6.68" />
		<testcase classname="sample.rtio.sensor_batch_processing" name="sample.rtio.sensor_batch_processing" time="10.96" />
		<testcase classname="sample.subsys.settings" name="sample.subsys.settings" time="0">
			<skipped type="skipped" message="Quarantine: Need to perform flash erase before run the test, otherwise test failed" />
		</testcase>
		<testcase classname="sample.logger.syst.deferred" name="sample.logger.syst.deferred" time="6.22" />
		<testcase classname="sample.logger.syst.immediate" name="sample.logger.syst.immediate" time="5.39" />
		<testcase classname="sample.logger.syst.catalog.deferred" name="sample.logger.syst.catalog.deferred" time="5.41" />
		<testcase classname="sample.logger.syst.catalog.immediate" name="sample.logger.syst.catalog.immediate" time="6.30" />
		<testcase classname="sample.logger.syst.deferred_cpp" name="sample.logger.syst.deferred_cpp" time="8.01" />
		<testcase classname="sample.logger.syst.immediate_cpp" name="sample.logger.syst.immediate_cpp" time="4.99" />
		<testcase classname="sample.logger.syst.catalog.deferred_cpp" name="sample.logger.syst.catalog.deferred_cpp" time="5.38" />
		<testcase classname="sample.logger.syst.catalog.immediate_cpp" name="sample.logger.syst.catalog.immediate_cpp" time="6.55" />
		<testcase classname="sample.logger.basic" name="sample.logger.basic" time="6.53" />
		<testcase classname="sample.zbus.hello_world" name="sample.zbus.hello_world" time="6.74" />
		<testcase classname="sample.zbus.dyn_channel" name="sample.zbus.dyn_channel" time="11.07" />
		<testcase classname="sample.zbus.benchmark_async" name="sample.zbus.benchmark_async" time="9.90" />
		<testcase classname="sample.zbus.benchmark_async_msg_sub" name="sample.zbus.benchmark_async_msg_sub" time="6.03" />
		<testcase classname="sample.zbus.benchmark_sync" name="sample.zbus.benchmark_sync" time="4.46" />
		<testcase classname="sample.zbus.confirmed_message" name="sample.zbus.confirmed_message" time="18.82" />
		<testcase classname="sample.zbus.work_queue" name="sample.zbus.work_queue" time="6.25" />
		<testcase classname="sample.zbus.runtime_os_registration" name="sample.zbus.runtime_os_registration" time="8.75" />
		<testcase classname="sample.zbus.runtime_os_registration_dynamic_alloc" name="sample.zbus.runtime_os_registration_dynamic_alloc" time="9.35" />
		<testcase classname="sample.zbus.msg_subscriber_dynamic" name="sample.zbus.msg_subscriber_dynamic" time="8.41" />
		<testcase classname="sample.zbus.msg_subscriber_static" name="sample.zbus.msg_subscriber_static" time="7.04" />
		<testcase classname="sample.zbus.msg_subscriber_dynamic_isolated" name="sample.zbus.msg_subscriber_dynamic_isolated" time="6.49" />
		<testcase classname="sample.zbus.msg_subscriber_dynamic_isolated_too_small" name="sample.zbus.msg_subscriber_dynamic_isolated_too_small" time="5.39" />
		<testcase classname="sample.zbus.msg_subscriber_static_isolated" name="sample.zbus.msg_subscriber_static_isolated" time="10.71" />
		<testcase classname="sample.zbus.msg_subscriber_static_isolated_too_small" name="sample.zbus.msg_subscriber_static_isolated_too_small" time="4.78" />
		<testcase classname="sample.zbus.non_priority_boost" name="sample.zbus.non_priority_boost" time="20.19" />
		<testcase classname="sample.zbus.priority_boost" name="sample.zbus.priority_boost" time="20.99" />
		<testcase classname="sample.nvs.basic" name="sample.nvs.basic" time="0">
			<skipped type="skipped" message="Quarantine: Need to perform flash erase before run the test, otherwise test failed" />
		</testcase>
		<testcase classname="sample.tracing.user" name="sample.tracing.user" time="7.84" />
		<testcase classname="sample.tracing.osawareness.openocd" name="sample.tracing.osawareness.openocd" time="6.43" />
		<testcase classname="sample.tracing.gpio" name="sample.tracing.gpio" time="6.11" />
	</testsuite>
</testsuites>